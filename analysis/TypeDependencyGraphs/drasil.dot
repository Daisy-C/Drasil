digraph alltypes {
	subgraph ast {
		subgraph rule{
		Rule -> Target;
		Rule -> Dependencies;
		Rule -> Type;
		Rule -> Command;
		Rule	[shape=oval, color=darkviolet, label=Rule];
		}
		subgraph command{
		Command -> MakeString;
		Command -> CommandOpts;
		Command	[shape=oval, color=darkviolet, label=Command];
		}
		subgraph commandopts{
		CommandOpts	[shape=oval, color=darkviolet, label=CommandOpts];
		}
		subgraph type{
		Type	[shape=oval, color=darkviolet, label=Type];
		}
		subgraph makefile{
		Makefile -> Rule;
		Makefile	[shape=oval, color=darkgreen, label=Makefile];
		}
		subgraph target{
		Target -> MakeString;
		Target	[shape=oval, color=red2, label=Target];
		}
		subgraph dependencies{
		Dependencies -> Target;
		Dependencies	[shape=oval, color=red2, label=Dependencies];
		}
	}
	subgraph helpers {
	}
	subgraph import {
	}
	subgraph makestring {
		subgraph makestring{
		MakeString -> String;
		MakeString	[shape=oval, color=darkviolet, label=MakeString];
		}
		subgraph mvar{
		MVar -> VarName;
		MVar -> VarVal;
		MVar	[shape=oval, color=darkviolet, label=MVar];
		}
		subgraph varname{
		VarName -> String;
		VarName	[shape=oval, color=red2, label=VarName];
		}
		subgraph varval{
		VarVal -> String;
		VarVal	[shape=oval, color=red2, label=VarVal];
		}
	}
	subgraph print {
	}
	subgraph drails {
	}
	subgraph odelibraries {
	}
	subgraph code {
	}
	subgraph codedefinition {
		subgraph definitiontype{
		DefinitionType -> CodeChunk;
		DefinitionType -> CodeExpr;
		DefinitionType -> DefinitionType;
		DefinitionType	[shape=oval, color=cyan3, label=DefinitionType];
		}
	}
	subgraph contraintmaps {
		subgraph constraintce{
		ConstraintCE -> ConstraintCodeExpr;
		ConstraintCE	[shape=oval, color=red2, label=ConstraintCE];
		}
		subgraph constraintcemap{
		ConstraintCEMap -> MapUIDConstraintCE;
		ConstraintCEMap	[shape=oval, color=red2, label=ConstraintCEMap];
		}
	}
	subgraph parameter {
		subgraph passby{
		PassBy -> CodeChunk;
		PassBy -> PassBy;
		PassBy	[shape=oval, color=cyan3, label=PassBy];
		}
	}
	subgraph ast {
		subgraph docconfig{
		DocConfig -> String;
		DocConfig -> Bool;
		DocConfig	[shape=oval, color=cyan3, label=DocConfig];
		}
		subgraph buildname{
		BuildName -> BuildName;
		BuildName -> Ext;
		BuildName	[shape=oval, color=darkviolet, label=BuildName];
		}
		subgraph ext{
		Ext -> MakeString;
		Ext	[shape=oval, color=darkviolet, label=Ext];
		}
		subgraph builddependencies{
		BuildDependencies -> BuildName;
		BuildDependencies	[shape=oval, color=darkviolet, label=BuildDependencies];
		}
		subgraph buildconfig{
		BuildConfig	[shape=oval, color=darkviolet, label=BuildConfig];
		}
		subgraph runtype{
		RunType -> CommandFragment;
		RunType	[shape=oval, color=darkviolet, label=RunType];
		}
		subgraph runnable{
		Runnable -> BuildName;
		Runnable -> NameOpts;
		Runnable -> RunType;
		Runnable	[shape=oval, color=darkviolet, label=Runnable];
		}
		subgraph commandfragment{
		CommandFragment -> MakeString;
		CommandFragment	[shape=oval, color=red2, label=CommandFragment];
		}
		subgraph buildcommand{
		BuildCommand -> CommandFragment;
		BuildCommand	[shape=oval, color=red2, label=BuildCommand];
		}
		subgraph interpretercommand{
		InterpreterCommand -> String;
		InterpreterCommand	[shape=oval, color=red2, label=InterpreterCommand];
		}
		subgraph interpreteroption{
		InterpreterOption -> String;
		InterpreterOption	[shape=oval, color=red2, label=InterpreterOption];
		}
	}
	subgraph import {
		subgraph codeharness{
		CodeHarness -> MaybeBuildConfig;
		CodeHarness -> MaybeRunnable;
		CodeHarness -> GOOLState;
		CodeHarness -> ProgData;
		CodeHarness -> MaybeDocConfig;
		CodeHarness	[shape=oval, color=cyan3, label=CodeHarness];
		}
	}
	subgraph import {
		subgraph optimizechoice{
		OptimizeChoice -> Doc;
		OptimizeChoice	[shape=oval, color=red2, label=OptimizeChoice];
		}
		subgraph projname{
		ProjName -> String;
		ProjName	[shape=oval, color=red2, label=ProjName];
		}
	}
	subgraph csarprendererh {
		subgraph csharpprojecta{
		CSharpProjecta -> a;
		CSharpProjecta	[shape=oval, color=darkgreen, label=CSharpProjecta];
		}
		subgraph packagecsharpproject{
		PackageCSharpProject -> PackData;
		PackageCSharpProject	[shape=oval, color=red2, label=PackageCSharpProject];
		}
		subgraph auxiliarycsharpproject{
		AuxiliaryCSharpProject -> AuxData;
		AuxiliaryCSharpProject	[shape=oval, color=red2, label=AuxiliaryCSharpProject];
		}
		subgraph auxhelpercsharpproject{
		AuxHelperCSharpProject -> Doc;
		AuxHelperCSharpProject	[shape=oval, color=red2, label=AuxHelperCSharpProject];
		}
	}
	subgraph cpprenderer {
		subgraph cppprojecta{
		CppProjecta -> a;
		CppProjecta	[shape=oval, color=darkgreen, label=CppProjecta];
		}
		subgraph packagecppproject{
		PackageCppProject -> PackData;
		PackageCppProject	[shape=oval, color=red2, label=PackageCppProject];
		}
		subgraph auxiliarycppproject{
		AuxiliaryCppProject -> AuxData;
		AuxiliaryCppProject	[shape=oval, color=red2, label=AuxiliaryCppProject];
		}
		subgraph auxhelpercppproject{
		AuxHelperCppProject -> Doc;
		AuxHelperCppProject	[shape=oval, color=red2, label=AuxHelperCppProject];
		}
	}
	subgraph javarenderer {
		subgraph javaprojecta{
		JavaProjecta -> a;
		JavaProjecta	[shape=oval, color=darkgreen, label=JavaProjecta];
		}
		subgraph packagejavaproject{
		PackageJavaProject -> PackData;
		PackageJavaProject	[shape=oval, color=red2, label=PackageJavaProject];
		}
		subgraph auxiliaryjavaproject{
		AuxiliaryJavaProject -> AuxData;
		AuxiliaryJavaProject	[shape=oval, color=red2, label=AuxiliaryJavaProject];
		}
		subgraph auxhelperjavaproject{
		AuxHelperJavaProject -> Doc;
		AuxHelperJavaProject	[shape=oval, color=red2, label=AuxHelperJavaProject];
		}
	}
	subgraph languagepolymorpich {
	}
	subgraph pytonrendererh {
		subgraph pythonprojecta{
		PythonProjecta -> a;
		PythonProjecta	[shape=oval, color=darkgreen, label=PythonProjecta];
		}
		subgraph packagepythonproject{
		PackagePythonProject -> PackData;
		PackagePythonProject	[shape=oval, color=red2, label=PackagePythonProject];
		}
		subgraph auxiliarypythonproject{
		AuxiliaryPythonProject -> AuxData;
		AuxiliaryPythonProject	[shape=oval, color=red2, label=AuxiliaryPythonProject];
		}
		subgraph auxhelperpythonproject{
		AuxHelperPythonProject -> Doc;
		AuxHelperPythonProject	[shape=oval, color=red2, label=AuxHelperPythonProject];
		}
	}
	subgraph swiftrenderer {
		subgraph swiftprojecta{
		SwiftProjecta -> a;
		SwiftProjecta	[shape=oval, color=darkgreen, label=SwiftProjecta];
		}
		subgraph packageswiftproject{
		PackageSwiftProject -> PackData;
		PackageSwiftProject	[shape=oval, color=red2, label=PackageSwiftProject];
		}
		subgraph auxiliaryswiftproject{
		AuxiliarySwiftProject -> AuxData;
		AuxiliarySwiftProject	[shape=oval, color=red2, label=AuxiliarySwiftProject];
		}
		subgraph auxhelperswiftproject{
		AuxHelperSwiftProject -> Doc;
		AuxHelperSwiftProject	[shape=oval, color=red2, label=AuxHelperSwiftProject];
		}
	}
	subgraph clasinterfaces {
		subgraph readmeinfo{
		ReadMeInfo -> LangAbbrev;
		ReadMeInfo -> LangVers;
		ReadMeInfo -> MaybeString;
		ReadMeInfo -> ImplementationType;
		ReadMeInfo -> Name;
		ReadMeInfo -> FilePath;
		ReadMeInfo -> Contributor;
		ReadMeInfo -> CaseName;
		ReadMeInfo	[shape=oval, color=cyan3, label=ReadMeInfo];
		}
		subgraph langabbrev{
		LangAbbrev -> String;
		LangAbbrev	[shape=oval, color=red2, label=LangAbbrev];
		}
		subgraph langvers{
		LangVers -> String;
		LangVers	[shape=oval, color=red2, label=LangVers];
		}
		subgraph casename{
		CaseName -> String;
		CaseName	[shape=oval, color=red2, label=CaseName];
		}
		subgraph contributor{
		Contributor -> String;
		Contributor	[shape=oval, color=red2, label=Contributor];
		}
	}
	subgraph data {
		subgraph auxdata{
		AuxData -> FilePath;
		AuxData -> Doc;
		AuxData	[shape=oval, color=cyan3, label=AuxData];
		}
		subgraph packdata{
		PackData -> ProgData;
		PackData -> AuxData;
		PackData	[shape=oval, color=cyan3, label=PackData];
		}
	}
	subgraph languagerenderer {
	}
	subgraph configparers {
		subgraph configuration{
		Configuration -> String;
		Configuration -> MaybeString;
		Configuration -> Options;
		Configuration	[shape=oval, color=cyan3, label=Configuration];
		}
	}
	subgraph comments {
	}
	subgraph conceptmatch {
	}
	subgraph decriptionss {
	}
	subgraph drailstates {
		subgraph drasilstate{
		DrasilState -> CodeSpec;
		DrasilState -> Modularity;
		DrasilState -> ImplementationType;
		DrasilState -> Structure;
		DrasilState -> ConstantStructure;
		DrasilState -> ConstantRepr;
		DrasilState -> MatchedConceptMap;
		DrasilState -> MatchedSpaces;
		DrasilState -> ConstraintBehaviour;
		DrasilState -> Comments;
		DrasilState -> Verbosity;
		DrasilState -> String;
		DrasilState -> Logging;
		DrasilState -> AuxFile;
		DrasilState -> Expr;
		DrasilState -> Mod;
		DrasilState -> Name;
		DrasilState -> ExtLibMap;
		DrasilState -> FilePath;
		DrasilState -> ModExportMap;
		DrasilState -> ClassDefinitionMap;
		DrasilState -> Doc;
		DrasilState -> Space;
		DrasilState	[shape=oval, color=cyan3, label=DrasilState];
		}
		subgraph matchedspaces{
		MatchedSpaces -> SpaceGenStateCodeType;
		MatchedSpaces	[shape=oval, color=red2, label=MatchedSpaces];
		}
		subgraph extlibmap{
		ExtLibMap -> MapStringExtLibState;
		ExtLibMap	[shape=oval, color=red2, label=ExtLibMap];
		}
		subgraph modexportmap{
		ModExportMap -> MapStringString;
		ModExportMap	[shape=oval, color=red2, label=ModExportMap];
		}
		subgraph classdefinitionmap{
		ClassDefinitionMap -> MapStringString;
		ClassDefinitionMap	[shape=oval, color=red2, label=ClassDefinitionMap];
		}
		subgraph genstate{
		GenState -> StateDrasilState;
		GenState	[shape=oval, color=red2, label=GenState];
		}
		subgraph modexp{
		ModExp -> StringString;
		ModExp	[shape=oval, color=red2, label=ModExp];
		}
		subgraph classdef{
		ClassDef -> StringString;
		ClassDef	[shape=oval, color=red2, label=ClassDef];
		}
	}
	subgraph functioncalls {
	}
	subgraph genode {
		subgraph odegeninfo{
		ODEGenInfo -> MaybeFilePathNameExtLibStateNameVersion;
		ODEGenInfo	[shape=oval, color=red2, label=ODEGenInfo];
		}
	}
	subgraph generategool {
		subgraph classtype{
		ClassType -> OOProg;
		ClassType -> r;
		ClassType -> ClassType;
		ClassType -> Name;
		ClassType -> Maybe;
		ClassType -> Description;
		ClassType	[shape=oval, color=darkviolet, label=ClassType];
		}
	}
	subgraph generator {
	}
	subgraph helpers {
	}
	subgraph import {
	}
	subgraph logging {
	}
	subgraph modules {
		subgraph calctype{
		CalcType -> OOProg;
		CalcType -> r;
		CalcType -> CalcType;
		CalcType -> CodeDefinition;
		CalcType -> CodeExpr;
		CalcType	[shape=oval, color=darkviolet, label=CalcType];
		}
		subgraph constraintce{
		ConstraintCE -> ConstraintCodeExpr;
		ConstraintCE	[shape=oval, color=red2, label=ConstraintCE];
		}
	}
	subgraph parameters {
		subgraph paramtype{
		ParamType -> ParamType;
		ParamType -> Bool;
		ParamType	[shape=oval, color=darkviolet, label=ParamType];
		}
	}
	subgraph readinput {
	}
	subgraph spacematch {
	}
	subgraph writeinput {
	}
	subgraph writereadme {
	}
	subgraph code {
		subgraph code{
		Code -> FilePath;
		Code	[shape=oval, color=darkgreen, label=Code];
		}
	}
	subgraph codegeneration {
	}
	subgraph codequantitydicts {
	}
	subgraph datadecs {
		subgraph datadesc_{
		DataDesc_ -> Data_;
		DataDesc_ -> Delimiter;
		DataDesc_ -> DataDesc_;
		DataDesc_	[shape=oval, color=darkviolet, label=DataDesc_];
		}
		subgraph data_{
		Data_ -> DataItem_;
		Data_	[shape=oval, color=darkviolet, label=Data_];
		}
		subgraph dataitem_{
		DataItem_	[shape=oval, color=darkviolet, label=DataItem_];
		}
		subgraph data{
		Data -> DataItem;
		Data	[shape=oval, color=darkviolet, label=Data];
		}
		subgraph linepattern{
		LinePattern -> DataItem;
		LinePattern	[shape=oval, color=darkviolet, label=LinePattern];
		}
		subgraph dataitem{
		DataItem -> CodeVarChunk;
		DataItem	[shape=oval, color=red2, label=DataItem];
		}
		subgraph delimiter{
		Delimiter -> String;
		Delimiter	[shape=oval, color=red2, label=Delimiter];
		}
		subgraph datadesc{
		DataDesc -> Data;
		DataDesc	[shape=oval, color=red2, label=DataDesc];
		}
		subgraph delim{
		Delim -> Char;
		Delim	[shape=oval, color=red2, label=Delim];
		}
	}
	subgraph extlibimport {
		subgraph extlibstate{
		ExtLibState -> Mod;
		ExtLibState -> FuncStmt;
		ExtLibState -> Name;
		ExtLibState -> String;
		ExtLibState	[shape=oval, color=cyan3, label=ExtLibState];
		}
	}
	subgraph externallibrary {
		subgraph step{
		Step -> FunctionInterface;
		Step -> NonEmpty;
		Step -> CodeExpr;
		Step -> Condition;
		Step -> Step;
		Step -> CodeVarChunk;
		Step -> FuncStmt;
		Step	[shape=oval, color=darkviolet, label=Step];
		}
		subgraph functioninterface{
		FunctionInterface -> NonEmpty;
		FunctionInterface -> Requires;
		FunctionInterface -> FuncType;
		FunctionInterface -> CodeFuncChunk;
		FunctionInterface -> Argument;
		FunctionInterface -> Maybe;
		FunctionInterface -> Result;
		FunctionInterface	[shape=oval, color=darkviolet, label=FunctionInterface];
		}
		subgraph result{
		Result -> CodeVarChunk;
		Result	[shape=oval, color=darkviolet, label=Result];
		}
		subgraph argument{
		Argument -> Maybe;
		Argument -> NamedArgument;
		Argument -> ArgumentInfo;
		Argument	[shape=oval, color=darkviolet, label=Argument];
		}
		subgraph argumentinfo{
		ArgumentInfo -> CodeExpr;
		ArgumentInfo -> Space;
		ArgumentInfo -> Maybe;
		ArgumentInfo -> CodeVarChunk;
		ArgumentInfo -> CodeFuncChunk;
		ArgumentInfo -> Parameter;
		ArgumentInfo -> Step;
		ArgumentInfo -> Requires;
		ArgumentInfo -> Description;
		ArgumentInfo -> ClassInfo;
		ArgumentInfo -> NonEmpty;
		ArgumentInfo	[shape=oval, color=darkviolet, label=ArgumentInfo];
		}
		subgraph parameter{
		Parameter -> ParameterChunk;
		Parameter -> Space;
		Parameter	[shape=oval, color=darkviolet, label=Parameter];
		}
		subgraph classinfo{
		ClassInfo -> MethodInfo;
		ClassInfo -> String;
		ClassInfo	[shape=oval, color=darkviolet, label=ClassInfo];
		}
		subgraph methodinfo{
		MethodInfo -> Description;
		MethodInfo -> Parameter;
		MethodInfo -> Step;
		MethodInfo -> CodeFuncChunk;
		MethodInfo -> Maybe;
		MethodInfo -> NonEmpty;
		MethodInfo	[shape=oval, color=darkviolet, label=MethodInfo];
		}
		subgraph functype{
		FuncType -> CodeVarChunk;
		FuncType -> StepGroup;
		FuncType -> ExternalLibrary;
		FuncType	[shape=oval, color=darkviolet, label=FuncType];
		}
		subgraph condition{
		Condition -> CodeExpr;
		Condition	[shape=oval, color=red2, label=Condition];
		}
		subgraph requires{
		Requires -> String;
		Requires	[shape=oval, color=red2, label=Requires];
		}
		subgraph externallibrary{
		ExternalLibrary -> StepGroup;
		ExternalLibrary	[shape=oval, color=red2, label=ExternalLibrary];
		}
		subgraph stepgroup{
		StepGroup -> NonEmptyStep;
		StepGroup	[shape=oval, color=red2, label=StepGroup];
		}
	}
	subgraph externallibrarycall {
		subgraph stepgroupfill{
		StepGroupFill -> Int;
		StepGroupFill -> StepFill;
		StepGroupFill	[shape=oval, color=darkviolet, label=StepGroupFill];
		}
		subgraph stepfill{
		StepFill -> FunctionIntFill;
		StepFill -> NonEmpty;
		StepFill -> CodeExpr;
		StepFill -> StepFill;
		StepFill -> CodeVarChunk;
		StepFill	[shape=oval, color=darkviolet, label=StepFill];
		}
		subgraph argumentfill{
		ArgumentFill -> Maybe;
		ArgumentFill -> NamedArgument;
		ArgumentFill -> CodeExpr;
		ArgumentFill	[shape=oval, color=darkviolet, label=ArgumentFill];
		}
		subgraph parameterfill{
		ParameterFill -> ParameterChunk;
		ParameterFill	[shape=oval, color=darkviolet, label=ParameterFill];
		}
		subgraph classinfofill{
		ClassInfoFill -> MethodInfoFill;
		ClassInfoFill	[shape=oval, color=darkviolet, label=ClassInfoFill];
		}
		subgraph methodinfofill{
		MethodInfoFill -> ParameterFill;
		MethodInfoFill -> Initializer;
		MethodInfoFill -> StepFill;
		MethodInfoFill -> NonEmpty;
		MethodInfoFill -> StepGroupFill;
		MethodInfoFill -> ExternalLibraryCall;
		MethodInfoFill	[shape=oval, color=darkviolet, label=MethodInfoFill];
		}
		subgraph functionintfill{
		FunctionIntFill -> ArgumentFill;
		FunctionIntFill	[shape=oval, color=darkgreen, label=FunctionIntFill];
		}
		subgraph externallibrarycall{
		ExternalLibraryCall -> StepGroupFill;
		ExternalLibraryCall	[shape=oval, color=red2, label=ExternalLibraryCall];
		}
	}
	subgraph lang {
		subgraph lang{
		Lang	[shape=oval, color=darkviolet, label=Lang];
		}
	}
	subgraph odeinfo {
		subgraph odeinfo{
		ODEInfo -> CodeVarChunk;
		ODEInfo -> CodeExpr;
		ODEInfo -> ODEOptions;
		ODEInfo	[shape=oval, color=cyan3, label=ODEInfo];
		}
		subgraph odeoptions{
		ODEOptions -> ODEMethod;
		ODEOptions -> CodeExpr;
		ODEOptions	[shape=oval, color=cyan3, label=ODEOptions];
		}
		subgraph odemethod{
		ODEMethod	[shape=oval, color=darkviolet, label=ODEMethod];
		}
	}
	subgraph odelibpckg {
		subgraph odelibpckg{
		ODELibPckg -> Name;
		ODELibPckg -> Version;
		ODELibPckg -> ExternalLibrary;
		ODELibPckg -> ODEInfoExternalLibraryCall;
		ODELibPckg -> MaybeFilePath;
		ODELibPckg -> Lang;
		ODELibPckg	[shape=oval, color=cyan3, label=ODELibPckg];
		}
	}
	subgraph coicehs {
		subgraph choices{
		Choices -> Lang;
		Choices -> Modularity;
		Choices -> Structure;
		Choices -> ConstantStructure;
		Choices -> ConstantRepr;
		Choices -> ConceptMatchMap;
		Choices -> SpaceMatch;
		Choices -> ImplementationType;
		Choices -> ODELibPckg;
		Choices -> ODEInfo;
		Choices -> ConstraintBehaviour;
		Choices -> Comments;
		Choices -> Verbosity;
		Choices -> Visibility;
		Choices -> Logging;
		Choices -> FilePath;
		Choices -> AuxFile;
		Choices	[shape=oval, color=cyan3, label=Choices];
		}
		subgraph modularity{
		Modularity -> InputModule;
		Modularity	[shape=oval, color=darkviolet, label=Modularity];
		}
		subgraph inputmodule{
		InputModule	[shape=oval, color=darkviolet, label=InputModule];
		}
		subgraph structure{
		Structure	[shape=oval, color=darkviolet, label=Structure];
		}
		subgraph constantstructure{
		ConstantStructure	[shape=oval, color=darkviolet, label=ConstantStructure];
		}
		subgraph constantrepr{
		ConstantRepr	[shape=oval, color=darkviolet, label=ConstantRepr];
		}
		subgraph codeconcept{
		CodeConcept	[shape=oval, color=darkviolet, label=CodeConcept];
		}
		subgraph implementationtype{
		ImplementationType	[shape=oval, color=darkviolet, label=ImplementationType];
		}
		subgraph constraintbehaviour{
		ConstraintBehaviour	[shape=oval, color=darkviolet, label=ConstraintBehaviour];
		}
		subgraph comments{
		Comments	[shape=oval, color=darkviolet, label=Comments];
		}
		subgraph verbosity{
		Verbosity	[shape=oval, color=darkviolet, label=Verbosity];
		}
		subgraph visibility{
		Visibility	[shape=oval, color=darkviolet, label=Visibility];
		}
		subgraph logging{
		Logging	[shape=oval, color=darkviolet, label=Logging];
		}
		subgraph auxfile{
		AuxFile -> FilePath;
		AuxFile	[shape=oval, color=darkviolet, label=AuxFile];
		}
		subgraph conceptmatchmap{
		ConceptMatchMap -> MapUIDCodeConcept;
		ConceptMatchMap	[shape=oval, color=red2, label=ConceptMatchMap];
		}
		subgraph matchedconceptmap{
		MatchedConceptMap -> MapUIDCodeConcept;
		MatchedConceptMap	[shape=oval, color=red2, label=MatchedConceptMap];
		}
		subgraph spacematch{
		SpaceMatch -> SpaceCodeType;
		SpaceMatch	[shape=oval, color=red2, label=SpaceMatch];
		}
	}
	subgraph code {
	}
	subgraph codespec {
		subgraph codespec{
		CodeSpec -> Name;
		CodeSpec -> a;
		CodeSpec -> Input;
		CodeSpec -> Derived;
		CodeSpec -> Output;
		CodeSpec -> FilePath;
		CodeSpec -> Def;
		CodeSpec -> ConstraintCEMap;
		CodeSpec -> Const;
		CodeSpec -> ConstantMap;
		CodeSpec -> Mod;
		CodeSpec -> ChunkDB;
		CodeSpec	[shape=oval, color=cyan3, label=CodeSpec];
		}
		subgraph input{
		Input -> CodeVarChunk;
		Input	[shape=oval, color=red2, label=Input];
		}
		subgraph output{
		Output -> CodeVarChunk;
		Output	[shape=oval, color=red2, label=Output];
		}
		subgraph const{
		Const -> CodeDefinition;
		Const	[shape=oval, color=red2, label=Const];
		}
		subgraph derived{
		Derived -> CodeDefinition;
		Derived	[shape=oval, color=red2, label=Derived];
		}
		subgraph def{
		Def -> CodeDefinition;
		Def	[shape=oval, color=red2, label=Def];
		}
		subgraph constantmap{
		ConstantMap -> MapUIDCodeDefinition;
		ConstantMap	[shape=oval, color=red2, label=ConstantMap];
		}
		subgraph known{
		Known -> CodeVarChunk;
		Known	[shape=oval, color=red2, label=Known];
		}
		subgraph need{
		Need -> CodeVarChunk;
		Need	[shape=oval, color=red2, label=Need];
		}
	}
	subgraph mod {
		subgraph class{
		Class -> Name;
		Class -> MaybeName;
		Class -> Description;
		Class -> StateVariable;
		Class -> Func;
		Class	[shape=oval, color=cyan3, label=Class];
		}
		subgraph statevariable{
		StateVariable -> ScopeTag;
		StateVariable -> CodeVarChunk;
		StateVariable	[shape=oval, color=cyan3, label=StateVariable];
		}
		subgraph mod{
		Mod -> Name;
		Mod -> Description;
		Mod -> Import;
		Mod -> Class;
		Mod -> Func;
		Mod -> Mod;
		Mod	[shape=oval, color=darkviolet, label=Mod];
		}
		subgraph func{
		Func -> FuncDef;
		Func -> FuncData;
		Func -> Name;
		Func -> Description;
		Func -> DataDesc;
		Func -> Func;
		Func	[shape=oval, color=darkviolet, label=Func];
		}
		subgraph funcdata{
		FuncData -> Name;
		FuncData -> Description;
		FuncData -> DataDesc;
		FuncData -> FuncData;
		FuncData	[shape=oval, color=darkviolet, label=FuncData];
		}
		subgraph funcdef{
		FuncDef -> Name;
		FuncDef -> Description;
		FuncDef -> ParameterChunk;
		FuncDef -> Space;
		FuncDef	[shape=oval, color=darkviolet, label=FuncDef];
		}
		subgraph funcstmt{
		FuncStmt -> CodeVarChunk;
		FuncStmt -> CodeExpr;
		FuncStmt -> FuncStmt;
		FuncStmt -> Integer;
		FuncStmt	[shape=oval, color=darkviolet, label=FuncStmt];
		}
		subgraph name{
		Name -> String;
		Name	[shape=oval, color=red2, label=Name];
		}
		subgraph description{
		Description -> String;
		Description	[shape=oval, color=red2, label=Description];
		}
		subgraph import{
		Import -> String;
		Import	[shape=oval, color=red2, label=Import];
		}
		subgraph version{
		Version -> String;
		Version	[shape=oval, color=red2, label=Version];
		}
		subgraph initializer{
		Initializer -> CodeVarChunkCodeExpr;
		Initializer	[shape=oval, color=red2, label=Initializer];
		}
	}
	subgraph filetetss {
	}
	subgraph helloworld {
	}
	subgraph helper {
	}
	subgraph main {
	}
	subgraph obervers {
	}
	subgraph patterntets {
	}
	subgraph codebaes {
		subgraph varorfunc{
		VarOrFunc -> QuantityDict;
		VarOrFunc -> VarOrFunc;
		VarOrFunc	[shape=oval, color=cyan3, label=VarOrFunc];
		}
		subgraph codevarchunk{
		CodeVarChunk -> CodeChunk;
		CodeVarChunk -> MaybeCodeChunk;
		CodeVarChunk	[shape=oval, color=cyan3, label=CodeVarChunk];
		}
		subgraph codefuncchunk{
		CodeFuncChunk -> CodeChunk;
		CodeFuncChunk	[shape=oval, color=darkgreen, label=CodeFuncChunk];
		}
	}
	subgraph convert {
	}
	subgraph development {
	}
	subgraph extract {
	}
	subgraph precedence {
	}
	subgraph expr {
		subgraph arithbinop{
		ArithBinOp	[shape=oval, color=darkviolet, label=ArithBinOp];
		}
		subgraph eqbinop{
		EqBinOp	[shape=oval, color=darkviolet, label=EqBinOp];
		}
		subgraph boolbinop{
		BoolBinOp	[shape=oval, color=darkviolet, label=BoolBinOp];
		}
		subgraph labinop{
		LABinOp	[shape=oval, color=darkviolet, label=LABinOp];
		}
		subgraph ordbinop{
		OrdBinOp	[shape=oval, color=darkviolet, label=OrdBinOp];
		}
		subgraph vvvbinop{
		VVVBinOp	[shape=oval, color=darkviolet, label=VVVBinOp];
		}
		subgraph vvnbinop{
		VVNBinOp	[shape=oval, color=darkviolet, label=VVNBinOp];
		}
		subgraph assocarithoper{
		AssocArithOper	[shape=oval, color=darkviolet, label=AssocArithOper];
		}
		subgraph assocbooloper{
		AssocBoolOper	[shape=oval, color=darkviolet, label=AssocBoolOper];
		}
		subgraph ufunc{
		UFunc	[shape=oval, color=darkviolet, label=UFunc];
		}
		subgraph ufuncb{
		UFuncB	[shape=oval, color=darkviolet, label=UFuncB];
		}
		subgraph ufuncvec{
		UFuncVec	[shape=oval, color=darkviolet, label=UFuncVec];
		}
		subgraph codeexpr{
		CodeExpr -> Double;
		CodeExpr -> CodeExpr;
		CodeExpr -> Integer;
		CodeExpr -> String;
		CodeExpr -> AssocArithOper;
		CodeExpr -> AssocBoolOper;
		CodeExpr -> DerivType;
		CodeExpr -> UID;
		CodeExpr -> Completeness;
		CodeExpr -> UFunc;
		CodeExpr -> UFuncB;
		CodeExpr -> UFuncVec;
		CodeExpr -> ArithBinOp;
		CodeExpr -> BoolBinOp;
		CodeExpr -> EqBinOp;
		CodeExpr -> LABinOp;
		CodeExpr -> OrdBinOp;
		CodeExpr -> VVVBinOp;
		CodeExpr -> VVNBinOp;
		CodeExpr -> DomainDesc;
		CodeExpr -> RealInterval;
		CodeExpr	[shape=oval, color=darkviolet, label=CodeExpr];
		}
	}
	subgraph codeexpr {
	}
	subgraph computation {
	}
	subgraph documentation {
	}
	subgraph education {
	}
	subgraph math {
	}
	subgraph pyicalpropertieshs {
	}
	subgraph pyicshs {
	}
	subgraph software {
	}
	subgraph solidmecanichs {
	}
	subgraph termodynamichs {
	}
	subgraph pyicshs {
	}
	subgraph math {
	}
	subgraph pyicalpropertieshs {
	}
	subgraph pyicshs {
	}
	subgraph solidmecanichs {
	}
	subgraph termodynamichs {
	}
	subgraph products {
	}
	subgraph pyicshs {
	}
	subgraph pyicalpropertieshs {
	}
	subgraph pyicshs {
	}
	subgraph solidmecanichs {
	}
	subgraph termodynamichs {
	}
	subgraph citations {
	}
	subgraph contraintss {
	}
	subgraph people {
	}
	subgraph si_units {
	}
	subgraph getcunkh {
	}
	subgraph cunkdbh {
		subgraph chunkdb{
		ChunkDB -> SymbolMap;
		ChunkDB -> TermMap;
		ChunkDB -> ConceptMap;
		ChunkDB -> UnitMap;
		ChunkDB -> TraceMap;
		ChunkDB -> RefbyMap;
		ChunkDB -> DatadefnMap;
		ChunkDB -> InsModelMap;
		ChunkDB -> GendefMap;
		ChunkDB -> TheoryModelMap;
		ChunkDB -> ConceptInstanceMap;
		ChunkDB -> SectionMap;
		ChunkDB -> LabelledContentMap;
		ChunkDB -> ReferenceMap;
		ChunkDB	[shape=oval, color=cyan3, label=ChunkDB];
		}
		subgraph umapa{
		UMapa -> MapUIDaInt;
		UMapa	[shape=oval, color=red2, label=UMapa];
		}
		subgraph symbolmap{
		SymbolMap -> UMapQuantityDict;
		SymbolMap	[shape=oval, color=red2, label=SymbolMap];
		}
		subgraph conceptmap{
		ConceptMap -> UMapConceptChunk;
		ConceptMap	[shape=oval, color=red2, label=ConceptMap];
		}
		subgraph unitmap{
		UnitMap -> UMapUnitDefn;
		UnitMap	[shape=oval, color=red2, label=UnitMap];
		}
		subgraph termmap{
		TermMap -> UMapIdeaDict;
		TermMap	[shape=oval, color=red2, label=TermMap];
		}
		subgraph tracemap{
		TraceMap -> MapUIDUID;
		TraceMap	[shape=oval, color=red2, label=TraceMap];
		}
		subgraph refbymap{
		RefbyMap -> MapUIDUID;
		RefbyMap	[shape=oval, color=red2, label=RefbyMap];
		}
		subgraph datadefnmap{
		DatadefnMap -> UMapDataDefinition;
		DatadefnMap	[shape=oval, color=red2, label=DatadefnMap];
		}
		subgraph insmodelmap{
		InsModelMap -> UMapInstanceModel;
		InsModelMap	[shape=oval, color=red2, label=InsModelMap];
		}
		subgraph gendefmap{
		GendefMap -> UMapGenDefn;
		GendefMap	[shape=oval, color=red2, label=GendefMap];
		}
		subgraph theorymodelmap{
		TheoryModelMap -> UMapTheoryModel;
		TheoryModelMap	[shape=oval, color=red2, label=TheoryModelMap];
		}
		subgraph conceptinstancemap{
		ConceptInstanceMap -> UMapConceptInstance;
		ConceptInstanceMap	[shape=oval, color=red2, label=ConceptInstanceMap];
		}
		subgraph sectionmap{
		SectionMap -> UMapSection;
		SectionMap	[shape=oval, color=red2, label=SectionMap];
		}
		subgraph labelledcontentmap{
		LabelledContentMap -> UMapLabelledContent;
		LabelledContentMap	[shape=oval, color=red2, label=LabelledContentMap];
		}
		subgraph referencemap{
		ReferenceMap -> UMapReference;
		ReferenceMap	[shape=oval, color=red2, label=ReferenceMap];
		}
	}
	subgraph syteminformations {
		subgraph referencedb{
		ReferenceDB -> ConceptMap;
		ReferenceDB	[shape=oval, color=cyan3, label=ReferenceDB];
		}
		subgraph systeminformation{
		SystemInformation -> CommonIdea;
		SystemInformation -> a;
		SystemInformation -> Idea;
		SystemInformation -> b;
		SystemInformation -> HasName;
		SystemInformation -> c;
		SystemInformation	[shape=oval, color=darkviolet, label=SystemInformation];
		}
		subgraph blocka{
		Blocka -> a;
		Blocka -> SystemInformation;
		Blocka -> BibRef;
		Blocka	[shape=oval, color=darkviolet, label=Blocka];
		}
		subgraph refmapa{
		RefMapa -> MapUIDaInt;
		RefMapa	[shape=oval, color=red2, label=RefMapa];
		}
		subgraph bibmap{
		BibMap -> RefMapCitation;
		BibMap	[shape=oval, color=red2, label=BibMap];
		}
		subgraph conceptmap{
		ConceptMap -> RefMapConceptInstance;
		ConceptMap	[shape=oval, color=red2, label=ConceptMap];
		}
	}
	subgraph drails {
	}
	subgraph references {
	}
	subgraph srs {
	}
	subgraph core {
		subgraph docsection{
		DocSection -> RefSec;
		DocSection -> IntroSec;
		DocSection -> StkhldrSec;
		DocSection -> GSDSec;
		DocSection -> SSDSec;
		DocSection -> ReqrmntSec;
		DocSection -> LCsSec;
		DocSection -> UCsSec;
		DocSection -> TraceabilitySec;
		DocSection -> AuxConstntSec;
		DocSection -> AppndxSec;
		DocSection -> OffShelfSolnsSec;
		DocSection	[shape=oval, color=darkviolet, label=DocSection];
		}
		subgraph refsec{
		RefSec -> Contents;
		RefSec -> RefTab;
		RefSec	[shape=oval, color=darkviolet, label=RefSec];
		}
		subgraph reftab{
		RefTab -> RefTab;
		RefTab -> TUIntro;
		RefTab -> UnitDefn;
		RefTab -> LabelledContent;
		RefTab -> TSIntro;
		RefTab -> LFunc;
		RefTab	[shape=oval, color=darkviolet, label=RefTab];
		}
		subgraph tsintro{
		TSIntro -> TConvention;
		TSIntro	[shape=oval, color=darkviolet, label=TSIntro];
		}
		subgraph tconvention{
		TConvention -> Emphasis;
		TConvention	[shape=oval, color=darkviolet, label=TConvention];
		}
		subgraph emphasis{
		Emphasis	[shape=oval, color=darkviolet, label=Emphasis];
		}
		subgraph literature{
		Literature -> Topic;
		Literature	[shape=oval, color=darkviolet, label=Literature];
		}
		subgraph tuintro{
		TUIntro	[shape=oval, color=darkviolet, label=TUIntro];
		}
		subgraph lfunc{
		LFunc -> LFunc;
		LFunc -> DefinedQuantityDict;
		LFunc	[shape=oval, color=darkviolet, label=LFunc];
		}
		subgraph introsec{
		IntroSec -> Sentence;
		IntroSec -> IntroSub;
		IntroSec	[shape=oval, color=darkviolet, label=IntroSec];
		}
		subgraph introsub{
		IntroSub -> Sentence;
		IntroSub -> IntroSub;
		IntroSub -> CI;
		IntroSub -> Section;
		IntroSub	[shape=oval, color=darkviolet, label=IntroSub];
		}
		subgraph stkhldrsub{
		StkhldrSub -> CI;
		StkhldrSub -> Sentence;
		StkhldrSub -> StkhldrSub;
		StkhldrSub	[shape=oval, color=darkviolet, label=StkhldrSub];
		}
		subgraph gsdsub{
		GSDSub -> Contents;
		GSDSub -> GSDSub;
		GSDSub	[shape=oval, color=darkviolet, label=GSDSub];
		}
		subgraph ssdsub{
		SSDSub -> ProblemDescription;
		SSDSub -> SSDSub;
		SSDSub -> SolChSpec;
		SSDSub	[shape=oval, color=darkviolet, label=SSDSub];
		}
		subgraph problemdescription{
		ProblemDescription -> Sentence;
		ProblemDescription -> Section;
		ProblemDescription -> PDSub;
		ProblemDescription -> ProblemDescription;
		ProblemDescription	[shape=oval, color=darkviolet, label=ProblemDescription];
		}
		subgraph pdsub{
		PDSub -> Concept;
		PDSub -> c;
		PDSub -> Maybe;
		PDSub -> Sentence;
		PDSub -> PDSub;
		PDSub -> Idea;
		PDSub -> a;
		PDSub -> LabelledContent;
		PDSub -> Contents;
		PDSub -> ConceptInstance;
		PDSub	[shape=oval, color=darkviolet, label=PDSub];
		}
		subgraph solchspec{
		SolChSpec -> SCSSub;
		SolChSpec -> SolChSpec;
		SolChSpec	[shape=oval, color=darkviolet, label=SolChSpec];
		}
		subgraph scssub{
		SCSSub -> ConceptInstance;
		SCSSub -> SCSSub;
		SCSSub -> Sentence;
		SCSSub -> Fields;
		SCSSub -> TheoryModel;
		SCSSub -> GenDefn;
		SCSSub -> DerivationDisplay;
		SCSSub -> DataDefinition;
		SCSSub	[shape=oval, color=darkviolet, label=SCSSub];
		}
		subgraph derivationdisplay{
		DerivationDisplay	[shape=oval, color=darkviolet, label=DerivationDisplay];
		}
		subgraph reqssub{
		ReqsSub -> ConceptInstance;
		ReqsSub -> LabelledContent;
		ReqsSub -> ReqsSub;
		ReqsSub	[shape=oval, color=darkviolet, label=ReqsSub];
		}
		subgraph traceconfig{
		TraceConfig -> UID;
		TraceConfig -> Sentence;
		TraceConfig -> TraceViewCat;
		TraceConfig -> TraceConfig;
		TraceConfig	[shape=oval, color=darkviolet, label=TraceConfig];
		}
		subgraph auxconstntsec{
		AuxConstntSec -> CI;
		AuxConstntSec -> QDefinition;
		AuxConstntSec	[shape=oval, color=darkviolet, label=AuxConstntSec];
		}
		subgraph appndxsec{
		AppndxSec	[shape=oval, color=darkgreen, label=AppndxSec];
		}
		subgraph stkhldrsec{
		StkhldrSec -> StkhldrSub;
		StkhldrSec	[shape=oval, color=darkgreen, label=StkhldrSec];
		}
		subgraph gsdsec{
		GSDSec -> GSDSub;
		GSDSec	[shape=oval, color=darkgreen, label=GSDSec];
		}
		subgraph ssdsec{
		SSDSec -> SSDSub;
		SSDSec	[shape=oval, color=darkgreen, label=SSDSec];
		}
		subgraph reqrmntsec{
		ReqrmntSec -> ReqsSub;
		ReqrmntSec	[shape=oval, color=darkgreen, label=ReqrmntSec];
		}
		subgraph lcssec{
		LCsSec -> ConceptInstance;
		LCsSec	[shape=oval, color=darkgreen, label=LCsSec];
		}
		subgraph ucssec{
		UCsSec -> ConceptInstance;
		UCsSec	[shape=oval, color=darkgreen, label=UCsSec];
		}
		subgraph traceabilitysec{
		TraceabilitySec -> TraceConfig;
		TraceabilitySec	[shape=oval, color=darkgreen, label=TraceabilitySec];
		}
		subgraph offshelfsolnssec{
		OffShelfSolnsSec -> Contents;
		OffShelfSolnsSec	[shape=oval, color=darkgreen, label=OffShelfSolnsSec];
		}
		subgraph system{
		System -> Sentence;
		System	[shape=oval, color=red2, label=System];
		}
		subgraph dockind{
		DocKind -> Sentence;
		DocKind	[shape=oval, color=red2, label=DocKind];
		}
		subgraph docdesc{
		DocDesc -> DocSection;
		DocDesc	[shape=oval, color=red2, label=DocDesc];
		}
		subgraph topic{
		Topic -> IdeaDict;
		Topic	[shape=oval, color=red2, label=Topic];
		}
	}
	subgraph definitions {
		subgraph field{
		Field -> Verbosity;
		Field -> InclUnits;
		Field	[shape=oval, color=darkviolet, label=Field];
		}
		subgraph verbosity{
		Verbosity	[shape=oval, color=darkviolet, label=Verbosity];
		}
		subgraph inclunits{
		InclUnits	[shape=oval, color=darkviolet, label=InclUnits];
		}
		subgraph fields{
		Fields -> Field;
		Fields	[shape=oval, color=red2, label=Fields];
		}
		subgraph modrow{
		ModRow -> StringContents;
		ModRow	[shape=oval, color=red2, label=ModRow];
		}
	}
	subgraph labels {
	}
	subgraph refhelpers {
		subgraph modeldb{
		ModelDB -> RefMapTheoryModel;
		ModelDB -> RefMapGenDefn;
		ModelDB -> RefMapDataDefinition;
		ModelDB -> RefMapInstanceModel;
		ModelDB	[shape=oval, color=cyan3, label=ModelDB];
		}
	}
	subgraph traceabilitymatrix {
		subgraph traceviewcat{
		TraceViewCat -> UIDChunkDBUID;
		TraceViewCat	[shape=oval, color=red2, label=TraceViewCat];
		}
	}
	subgraph units {
	}
	subgraph auxiliarycontantss {
	}
	subgraph generalsytdescs {
	}
	subgraph introduction {
	}
	subgraph referencematerial {
	}
	subgraph requirements {
	}
	subgraph specificsytemdescriptions {
	}
	subgraph stakeolderhs {
	}
	subgraph tableofabbandacronyms {
	}
	subgraph tableofsymbols {
	}
	subgraph tableofunits {
	}
	subgraph traceabilitymandgs {
	}
	subgraph docdecl {
		subgraph docsection{
		DocSection -> RefSec;
		DocSection	[shape=oval, color=darkviolet, label=DocSection];
		}
		subgraph ssdsub{
		SSDSub -> ProblemDescription;
		SSDSub -> SSDSub;
		SSDSub -> SolChSpec;
		SSDSub	[shape=oval, color=darkviolet, label=SSDSub];
		}
		subgraph problemdescription{
		ProblemDescription -> Sentence;
		ProblemDescription -> Section;
		ProblemDescription -> PDSub;
		ProblemDescription -> ProblemDescription;
		ProblemDescription	[shape=oval, color=darkviolet, label=ProblemDescription];
		}
		subgraph pdsub{
		PDSub -> Concept;
		PDSub -> c;
		PDSub -> Maybe;
		PDSub -> Sentence;
		PDSub -> PDSub;
		PDSub -> Idea;
		PDSub -> a;
		PDSub -> LabelledContent;
		PDSub -> Contents;
		PDSub	[shape=oval, color=darkviolet, label=PDSub];
		}
		subgraph solchspec{
		SolChSpec -> SCSSub;
		SolChSpec -> SolChSpec;
		SolChSpec	[shape=oval, color=darkviolet, label=SolChSpec];
		}
		subgraph scssub{
		SCSSub -> SCSSub;
		SCSSub -> Sentence;
		SCSSub -> Fields;
		SCSSub -> DerivationDisplay;
		SCSSub -> HasUncertainty;
		SCSSub -> c;
		SCSSub -> Quantity;
		SCSSub -> Constrained;
		SCSSub -> HasReasVal;
		SCSSub -> MayHaveUnit;
		SCSSub -> Contents;
		SCSSub	[shape=oval, color=darkviolet, label=SCSSub];
		}
		subgraph reqssub{
		ReqsSub -> Sentence;
		ReqsSub -> LabelledContent;
		ReqsSub -> ReqsSub;
		ReqsSub -> SystemInformation;
		ReqsSub -> SRSDecl;
		ReqsSub -> DocDesc;
		ReqsSub	[shape=oval, color=darkviolet, label=ReqsSub];
		}
		subgraph ssdsec{
		SSDSec -> SSDSub;
		SSDSec	[shape=oval, color=darkgreen, label=SSDSec];
		}
		subgraph reqrmntsec{
		ReqrmntSec -> ReqsSub;
		ReqrmntSec	[shape=oval, color=darkgreen, label=ReqrmntSec];
		}
		subgraph srsdecl{
		SRSDecl -> DocSection;
		SRSDecl	[shape=oval, color=red2, label=SRSDecl];
		}
	}
	subgraph doclang {
	}
	subgraph documentlanguage {
	}
	subgraph extractdocdecs {
	}
	subgraph tracetable {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph expresionss {
	}
	subgraph figures {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph main {
	}
	subgraph requirements {
	}
	subgraph unitals {
	}
	subgraph arbiter {
	}
	subgraph vector {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph gdefs {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph main {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph tmods {
	}
	subgraph unitals {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph figures {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph main {
	}
	subgraph moduledefs {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph symbols {
	}
	subgraph tmods {
	}
	subgraph unitals {
		subgraph glasstype{
		GlassType -> IntegerCI;
		GlassType	[shape=oval, color=red2, label=GlassType];
		}
		subgraph glassthickness{
		GlassThickness -> DoubleDouble;
		GlassThickness	[shape=oval, color=red2, label=GlassThickness];
		}
	}
	subgraph units {
	}
	subgraph body {
	}
	subgraph heattranfers {
	}
	subgraph main {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph datadefs {
	}
	subgraph definitions {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph main {
	}
	subgraph odes {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph unitals {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph gendefs {
	}
	subgraph gensydescs {
	}
	subgraph imodel {
	}
	subgraph introsection {
	}
	subgraph main {
	}
	subgraph odes {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph spsydescs {
	}
	subgraph tmodel {
	}
	subgraph unitals {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph expresionss {
	}
	subgraph figures {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph main {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph unitals {
	}
	subgraph asumptionss {
	}
	subgraph baicexprss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph datadefs {
	}
	subgraph defs {
	}
	subgraph figures {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph main {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph tmods {
	}
	subgraph unitals {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph gendefs {
	}
	subgraph generate {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph main {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph tmods {
		subgraph phasechange{
		PhaseChange -> PhaseChange;
		PhaseChange -> Sentence;
		PhaseChange -> TheoryModel;
		PhaseChange	[shape=oval, color=darkviolet, label=PhaseChange];
		}
	}
	subgraph unitals {
	}
	subgraph body {
	}
	subgraph main {
	}
	subgraph formats {
		subgraph doctype{
		DocType	[shape=oval, color=darkviolet, label=DocType];
		}
		subgraph docspec{
		DocSpec -> DocType;
		DocSpec -> Filename;
		DocSpec	[shape=oval, color=darkviolet, label=DocSpec];
		}
		subgraph docclass{
		DocClass -> Maybe;
		DocClass -> String;
		DocClass	[shape=oval, color=darkviolet, label=DocClass];
		}
		subgraph exdoc{
		ExDoc -> Maybe;
		ExDoc -> String;
		ExDoc	[shape=oval, color=darkviolet, label=ExDoc];
		}
		subgraph usepackages{
		UsePackages -> String;
		UsePackages	[shape=oval, color=darkgreen, label=UsePackages];
		}
		subgraph filename{
		Filename -> String;
		Filename	[shape=oval, color=red2, label=Filename];
		}
	}
	subgraph generate {
	}
	subgraph clike {
	}
	subgraph csarprendererh {
		subgraph csharpcodea{
		CSharpCodea -> a;
		CSharpCodea	[shape=oval, color=darkgreen, label=CSharpCodea];
		}
		subgraph programcsharpcode{
		ProgramCSharpCode -> ProgData;
		ProgramCSharpCode	[shape=oval, color=red2, label=ProgramCSharpCode];
		}
		subgraph filecsharpcode{
		FileCSharpCode -> FileData;
		FileCSharpCode	[shape=oval, color=red2, label=FileCSharpCode];
		}
		subgraph importcsharpcode{
		ImportCSharpCode -> Doc;
		ImportCSharpCode	[shape=oval, color=red2, label=ImportCSharpCode];
		}
		subgraph permanencecsharpcode{
		PermanenceCSharpCode -> Doc;
		PermanenceCSharpCode	[shape=oval, color=red2, label=PermanenceCSharpCode];
		}
		subgraph bodycsharpcode{
		BodyCSharpCode -> Doc;
		BodyCSharpCode	[shape=oval, color=red2, label=BodyCSharpCode];
		}
		subgraph blockcsharpcode{
		BlockCSharpCode -> Doc;
		BlockCSharpCode	[shape=oval, color=red2, label=BlockCSharpCode];
		}
		subgraph typecsharpcode{
		TypeCSharpCode -> TypeData;
		TypeCSharpCode	[shape=oval, color=red2, label=TypeCSharpCode];
		}
		subgraph unaryopcsharpcode{
		UnaryOpCSharpCode -> OpData;
		UnaryOpCSharpCode	[shape=oval, color=red2, label=UnaryOpCSharpCode];
		}
		subgraph binaryopcsharpcode{
		BinaryOpCSharpCode -> OpData;
		BinaryOpCSharpCode	[shape=oval, color=red2, label=BinaryOpCSharpCode];
		}
		subgraph variablecsharpcode{
		VariableCSharpCode -> VarData;
		VariableCSharpCode	[shape=oval, color=red2, label=VariableCSharpCode];
		}
		subgraph valuecsharpcode{
		ValueCSharpCode -> ValData;
		ValueCSharpCode	[shape=oval, color=red2, label=ValueCSharpCode];
		}
		subgraph functioncsharpcode{
		FunctionCSharpCode -> FuncData;
		FunctionCSharpCode	[shape=oval, color=red2, label=FunctionCSharpCode];
		}
		subgraph statementcsharpcode{
		StatementCSharpCode -> DocTerminator;
		StatementCSharpCode	[shape=oval, color=red2, label=StatementCSharpCode];
		}
		subgraph scopecsharpcode{
		ScopeCSharpCode -> Doc;
		ScopeCSharpCode	[shape=oval, color=red2, label=ScopeCSharpCode];
		}
		subgraph methodtypecsharpcode{
		MethodTypeCSharpCode -> TypeData;
		MethodTypeCSharpCode	[shape=oval, color=red2, label=MethodTypeCSharpCode];
		}
		subgraph parametercsharpcode{
		ParameterCSharpCode -> ParamData;
		ParameterCSharpCode	[shape=oval, color=red2, label=ParameterCSharpCode];
		}
		subgraph methodcsharpcode{
		MethodCSharpCode -> MethodData;
		MethodCSharpCode	[shape=oval, color=red2, label=MethodCSharpCode];
		}
		subgraph statevarcsharpcode{
		StateVarCSharpCode -> Doc;
		StateVarCSharpCode	[shape=oval, color=red2, label=StateVarCSharpCode];
		}
		subgraph classcsharpcode{
		ClassCSharpCode -> Doc;
		ClassCSharpCode	[shape=oval, color=red2, label=ClassCSharpCode];
		}
		subgraph modulecsharpcode{
		ModuleCSharpCode -> ModData;
		ModuleCSharpCode	[shape=oval, color=red2, label=ModuleCSharpCode];
		}
		subgraph blockcommentcsharpcode{
		BlockCommentCSharpCode -> Doc;
		BlockCommentCSharpCode	[shape=oval, color=red2, label=BlockCommentCSharpCode];
		}
	}
	subgraph commonpeudooos {
	}
	subgraph contructorss {
		subgraph vsopr{
		VSOpr -> VSrOpData;
		VSOpr	[shape=oval, color=red2, label=VSOpr];
		}
	}
	subgraph cpprenderer {
		subgraph cppcodexya{
		CppCodexya -> xa;
		CppCodexya -> ya;
		CppCodexya	[shape=oval, color=cyan3, label=CppCodexya];
		}
		subgraph methoddata{
		MethodData -> ScopeTag;
		MethodData -> Doc;
		MethodData	[shape=oval, color=cyan3, label=MethodData];
		}
		subgraph cppsrccodea{
		CppSrcCodea -> a;
		CppSrcCodea	[shape=oval, color=darkgreen, label=CppSrcCodea];
		}
		subgraph cpphdrcodea{
		CppHdrCodea -> a;
		CppHdrCodea	[shape=oval, color=darkgreen, label=CppHdrCodea];
		}
		subgraph programpcppsrccodecpphdrcode{
		ProgrampCppSrcCodeCppHdrCode -> ProgData;
		ProgrampCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=ProgrampCppSrcCodeCppHdrCode];
		}
		subgraph filepcppsrccodecpphdrcode{
		FilepCppSrcCodeCppHdrCode -> FileData;
		FilepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=FilepCppSrcCodeCppHdrCode];
		}
		subgraph importpcppsrccodecpphdrcode{
		ImportpCppSrcCodeCppHdrCode -> Doc;
		ImportpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=ImportpCppSrcCodeCppHdrCode];
		}
		subgraph permanencepcppsrccodecpphdrcode{
		PermanencepCppSrcCodeCppHdrCode -> BindData;
		PermanencepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=PermanencepCppSrcCodeCppHdrCode];
		}
		subgraph bodypcppsrccodecpphdrcode{
		BodypCppSrcCodeCppHdrCode -> Doc;
		BodypCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=BodypCppSrcCodeCppHdrCode];
		}
		subgraph blockpcppsrccodecpphdrcode{
		BlockpCppSrcCodeCppHdrCode -> Doc;
		BlockpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=BlockpCppSrcCodeCppHdrCode];
		}
		subgraph typepcppsrccodecpphdrcode{
		TypepCppSrcCodeCppHdrCode -> TypeData;
		TypepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=TypepCppSrcCodeCppHdrCode];
		}
		subgraph unaryoppcppsrccodecpphdrcode{
		UnaryOppCppSrcCodeCppHdrCode -> OpData;
		UnaryOppCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=UnaryOppCppSrcCodeCppHdrCode];
		}
		subgraph binaryoppcppsrccodecpphdrcode{
		BinaryOppCppSrcCodeCppHdrCode -> OpData;
		BinaryOppCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=BinaryOppCppSrcCodeCppHdrCode];
		}
		subgraph variablepcppsrccodecpphdrcode{
		VariablepCppSrcCodeCppHdrCode -> VarData;
		VariablepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=VariablepCppSrcCodeCppHdrCode];
		}
		subgraph valuepcppsrccodecpphdrcode{
		ValuepCppSrcCodeCppHdrCode -> ValData;
		ValuepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=ValuepCppSrcCodeCppHdrCode];
		}
		subgraph functionpcppsrccodecpphdrcode{
		FunctionpCppSrcCodeCppHdrCode -> FuncData;
		FunctionpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=FunctionpCppSrcCodeCppHdrCode];
		}
		subgraph statementpcppsrccodecpphdrcode{
		StatementpCppSrcCodeCppHdrCode -> DocTerminator;
		StatementpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=StatementpCppSrcCodeCppHdrCode];
		}
		subgraph scopepcppsrccodecpphdrcode{
		ScopepCppSrcCodeCppHdrCode -> DocScopeTag;
		ScopepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=ScopepCppSrcCodeCppHdrCode];
		}
		subgraph methodtypepcppsrccodecpphdrcode{
		MethodTypepCppSrcCodeCppHdrCode -> TypeData;
		MethodTypepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=MethodTypepCppSrcCodeCppHdrCode];
		}
		subgraph parameterpcppsrccodecpphdrcode{
		ParameterpCppSrcCodeCppHdrCode -> ParamData;
		ParameterpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=ParameterpCppSrcCodeCppHdrCode];
		}
		subgraph methodpcppsrccodecpphdrcode{
		MethodpCppSrcCodeCppHdrCode -> MethodData;
		MethodpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=MethodpCppSrcCodeCppHdrCode];
		}
		subgraph statevarpcppsrccodecpphdrcode{
		StateVarpCppSrcCodeCppHdrCode -> StateVarData;
		StateVarpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=StateVarpCppSrcCodeCppHdrCode];
		}
		subgraph classpcppsrccodecpphdrcode{
		ClasspCppSrcCodeCppHdrCode -> Doc;
		ClasspCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=ClasspCppSrcCodeCppHdrCode];
		}
		subgraph modulepcppsrccodecpphdrcode{
		ModulepCppSrcCodeCppHdrCode -> ModData;
		ModulepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=ModulepCppSrcCodeCppHdrCode];
		}
		subgraph blockcommentpcppsrccodecpphdrcode{
		BlockCommentpCppSrcCodeCppHdrCode -> Doc;
		BlockCommentpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label=BlockCommentpCppSrcCodeCppHdrCode];
		}
		subgraph srcstatesa{
		SrcStatesa -> StatesCppSrcCodea;
		SrcStatesa	[shape=oval, color=red2, label=SrcStatesa];
		}
		subgraph hdrstatesa{
		HdrStatesa -> StatesCppHdrCodea;
		HdrStatesa	[shape=oval, color=red2, label=HdrStatesa];
		}
		subgraph pairstatespa{
		PairStatespa -> StatespCppSrcCodeCppHdrCodea;
		PairStatespa	[shape=oval, color=red2, label=PairStatespa];
		}
		subgraph programcppsrccode{
		ProgramCppSrcCode -> ProgData;
		ProgramCppSrcCode	[shape=oval, color=red2, label=ProgramCppSrcCode];
		}
		subgraph filecppsrccode{
		FileCppSrcCode -> FileData;
		FileCppSrcCode	[shape=oval, color=red2, label=FileCppSrcCode];
		}
		subgraph importcppsrccode{
		ImportCppSrcCode -> Doc;
		ImportCppSrcCode	[shape=oval, color=red2, label=ImportCppSrcCode];
		}
		subgraph permanencecppsrccode{
		PermanenceCppSrcCode -> BindData;
		PermanenceCppSrcCode	[shape=oval, color=red2, label=PermanenceCppSrcCode];
		}
		subgraph bodycppsrccode{
		BodyCppSrcCode -> Doc;
		BodyCppSrcCode	[shape=oval, color=red2, label=BodyCppSrcCode];
		}
		subgraph blockcppsrccode{
		BlockCppSrcCode -> Doc;
		BlockCppSrcCode	[shape=oval, color=red2, label=BlockCppSrcCode];
		}
		subgraph typecppsrccode{
		TypeCppSrcCode -> TypeData;
		TypeCppSrcCode	[shape=oval, color=red2, label=TypeCppSrcCode];
		}
		subgraph unaryopcppsrccode{
		UnaryOpCppSrcCode -> OpData;
		UnaryOpCppSrcCode	[shape=oval, color=red2, label=UnaryOpCppSrcCode];
		}
		subgraph binaryopcppsrccode{
		BinaryOpCppSrcCode -> OpData;
		BinaryOpCppSrcCode	[shape=oval, color=red2, label=BinaryOpCppSrcCode];
		}
		subgraph variablecppsrccode{
		VariableCppSrcCode -> VarData;
		VariableCppSrcCode	[shape=oval, color=red2, label=VariableCppSrcCode];
		}
		subgraph valuecppsrccode{
		ValueCppSrcCode -> ValData;
		ValueCppSrcCode	[shape=oval, color=red2, label=ValueCppSrcCode];
		}
		subgraph functioncppsrccode{
		FunctionCppSrcCode -> FuncData;
		FunctionCppSrcCode	[shape=oval, color=red2, label=FunctionCppSrcCode];
		}
		subgraph statementcppsrccode{
		StatementCppSrcCode -> DocTerminator;
		StatementCppSrcCode	[shape=oval, color=red2, label=StatementCppSrcCode];
		}
		subgraph scopecppsrccode{
		ScopeCppSrcCode -> DocScopeTag;
		ScopeCppSrcCode	[shape=oval, color=red2, label=ScopeCppSrcCode];
		}
		subgraph methodtypecppsrccode{
		MethodTypeCppSrcCode -> TypeData;
		MethodTypeCppSrcCode	[shape=oval, color=red2, label=MethodTypeCppSrcCode];
		}
		subgraph parametercppsrccode{
		ParameterCppSrcCode -> ParamData;
		ParameterCppSrcCode	[shape=oval, color=red2, label=ParameterCppSrcCode];
		}
		subgraph methodcppsrccode{
		MethodCppSrcCode -> MethodData;
		MethodCppSrcCode	[shape=oval, color=red2, label=MethodCppSrcCode];
		}
		subgraph statevarcppsrccode{
		StateVarCppSrcCode -> StateVarData;
		StateVarCppSrcCode	[shape=oval, color=red2, label=StateVarCppSrcCode];
		}
		subgraph classcppsrccode{
		ClassCppSrcCode -> Doc;
		ClassCppSrcCode	[shape=oval, color=red2, label=ClassCppSrcCode];
		}
		subgraph modulecppsrccode{
		ModuleCppSrcCode -> ModData;
		ModuleCppSrcCode	[shape=oval, color=red2, label=ModuleCppSrcCode];
		}
		subgraph blockcommentcppsrccode{
		BlockCommentCppSrcCode -> Doc;
		BlockCommentCppSrcCode	[shape=oval, color=red2, label=BlockCommentCppSrcCode];
		}
		subgraph filecpphdrcode{
		FileCppHdrCode -> FileData;
		FileCppHdrCode	[shape=oval, color=red2, label=FileCppHdrCode];
		}
		subgraph importcpphdrcode{
		ImportCppHdrCode -> Doc;
		ImportCppHdrCode	[shape=oval, color=red2, label=ImportCppHdrCode];
		}
		subgraph permanencecpphdrcode{
		PermanenceCppHdrCode -> BindData;
		PermanenceCppHdrCode	[shape=oval, color=red2, label=PermanenceCppHdrCode];
		}
		subgraph bodycpphdrcode{
		BodyCppHdrCode -> Doc;
		BodyCppHdrCode	[shape=oval, color=red2, label=BodyCppHdrCode];
		}
		subgraph blockcpphdrcode{
		BlockCppHdrCode -> Doc;
		BlockCppHdrCode	[shape=oval, color=red2, label=BlockCppHdrCode];
		}
		subgraph typecpphdrcode{
		TypeCppHdrCode -> TypeData;
		TypeCppHdrCode	[shape=oval, color=red2, label=TypeCppHdrCode];
		}
		subgraph unaryopcpphdrcode{
		UnaryOpCppHdrCode -> OpData;
		UnaryOpCppHdrCode	[shape=oval, color=red2, label=UnaryOpCppHdrCode];
		}
		subgraph binaryopcpphdrcode{
		BinaryOpCppHdrCode -> OpData;
		BinaryOpCppHdrCode	[shape=oval, color=red2, label=BinaryOpCppHdrCode];
		}
		subgraph variablecpphdrcode{
		VariableCppHdrCode -> VarData;
		VariableCppHdrCode	[shape=oval, color=red2, label=VariableCppHdrCode];
		}
		subgraph valuecpphdrcode{
		ValueCppHdrCode -> ValData;
		ValueCppHdrCode	[shape=oval, color=red2, label=ValueCppHdrCode];
		}
		subgraph functioncpphdrcode{
		FunctionCppHdrCode -> FuncData;
		FunctionCppHdrCode	[shape=oval, color=red2, label=FunctionCppHdrCode];
		}
		subgraph statementcpphdrcode{
		StatementCppHdrCode -> DocTerminator;
		StatementCppHdrCode	[shape=oval, color=red2, label=StatementCppHdrCode];
		}
		subgraph scopecpphdrcode{
		ScopeCppHdrCode -> DocScopeTag;
		ScopeCppHdrCode	[shape=oval, color=red2, label=ScopeCppHdrCode];
		}
		subgraph methodtypecpphdrcode{
		MethodTypeCppHdrCode -> TypeData;
		MethodTypeCppHdrCode	[shape=oval, color=red2, label=MethodTypeCppHdrCode];
		}
		subgraph parametercpphdrcode{
		ParameterCppHdrCode -> ParamData;
		ParameterCppHdrCode	[shape=oval, color=red2, label=ParameterCppHdrCode];
		}
		subgraph methodcpphdrcode{
		MethodCppHdrCode -> MethodData;
		MethodCppHdrCode	[shape=oval, color=red2, label=MethodCppHdrCode];
		}
		subgraph statevarcpphdrcode{
		StateVarCppHdrCode -> StateVarData;
		StateVarCppHdrCode	[shape=oval, color=red2, label=StateVarCppHdrCode];
		}
		subgraph classcpphdrcode{
		ClassCppHdrCode -> Doc;
		ClassCppHdrCode	[shape=oval, color=red2, label=ClassCppHdrCode];
		}
		subgraph modulecpphdrcode{
		ModuleCppHdrCode -> ModData;
		ModuleCppHdrCode	[shape=oval, color=red2, label=ModuleCppHdrCode];
		}
		subgraph blockcommentcpphdrcode{
		BlockCommentCppHdrCode -> Doc;
		BlockCommentCppHdrCode	[shape=oval, color=red2, label=BlockCommentCppHdrCode];
		}
	}
	subgraph javarenderer {
		subgraph javacodea{
		JavaCodea -> a;
		JavaCodea	[shape=oval, color=darkgreen, label=JavaCodea];
		}
		subgraph programjavacode{
		ProgramJavaCode -> ProgData;
		ProgramJavaCode	[shape=oval, color=red2, label=ProgramJavaCode];
		}
		subgraph filejavacode{
		FileJavaCode -> FileData;
		FileJavaCode	[shape=oval, color=red2, label=FileJavaCode];
		}
		subgraph importjavacode{
		ImportJavaCode -> Doc;
		ImportJavaCode	[shape=oval, color=red2, label=ImportJavaCode];
		}
		subgraph permanencejavacode{
		PermanenceJavaCode -> Doc;
		PermanenceJavaCode	[shape=oval, color=red2, label=PermanenceJavaCode];
		}
		subgraph bodyjavacode{
		BodyJavaCode -> Doc;
		BodyJavaCode	[shape=oval, color=red2, label=BodyJavaCode];
		}
		subgraph blockjavacode{
		BlockJavaCode -> Doc;
		BlockJavaCode	[shape=oval, color=red2, label=BlockJavaCode];
		}
		subgraph typejavacode{
		TypeJavaCode -> TypeData;
		TypeJavaCode	[shape=oval, color=red2, label=TypeJavaCode];
		}
		subgraph unaryopjavacode{
		UnaryOpJavaCode -> OpData;
		UnaryOpJavaCode	[shape=oval, color=red2, label=UnaryOpJavaCode];
		}
		subgraph binaryopjavacode{
		BinaryOpJavaCode -> OpData;
		BinaryOpJavaCode	[shape=oval, color=red2, label=BinaryOpJavaCode];
		}
		subgraph variablejavacode{
		VariableJavaCode -> VarData;
		VariableJavaCode	[shape=oval, color=red2, label=VariableJavaCode];
		}
		subgraph valuejavacode{
		ValueJavaCode -> ValData;
		ValueJavaCode	[shape=oval, color=red2, label=ValueJavaCode];
		}
		subgraph functionjavacode{
		FunctionJavaCode -> FuncData;
		FunctionJavaCode	[shape=oval, color=red2, label=FunctionJavaCode];
		}
		subgraph statementjavacode{
		StatementJavaCode -> DocTerminator;
		StatementJavaCode	[shape=oval, color=red2, label=StatementJavaCode];
		}
		subgraph scopejavacode{
		ScopeJavaCode -> Doc;
		ScopeJavaCode	[shape=oval, color=red2, label=ScopeJavaCode];
		}
		subgraph methodtypejavacode{
		MethodTypeJavaCode -> TypeData;
		MethodTypeJavaCode	[shape=oval, color=red2, label=MethodTypeJavaCode];
		}
		subgraph parameterjavacode{
		ParameterJavaCode -> ParamData;
		ParameterJavaCode	[shape=oval, color=red2, label=ParameterJavaCode];
		}
		subgraph methodjavacode{
		MethodJavaCode -> MethodData;
		MethodJavaCode	[shape=oval, color=red2, label=MethodJavaCode];
		}
		subgraph statevarjavacode{
		StateVarJavaCode -> Doc;
		StateVarJavaCode	[shape=oval, color=red2, label=StateVarJavaCode];
		}
		subgraph classjavacode{
		ClassJavaCode -> Doc;
		ClassJavaCode	[shape=oval, color=red2, label=ClassJavaCode];
		}
		subgraph modulejavacode{
		ModuleJavaCode -> ModData;
		ModuleJavaCode	[shape=oval, color=red2, label=ModuleJavaCode];
		}
		subgraph blockcommentjavacode{
		BlockCommentJavaCode -> Doc;
		BlockCommentJavaCode	[shape=oval, color=red2, label=BlockCommentJavaCode];
		}
	}
	subgraph languagepolymorpich {
	}
	subgraph macros {
	}
	subgraph pytonrendererh {
		subgraph pythoncodea{
		PythonCodea -> a;
		PythonCodea	[shape=oval, color=darkgreen, label=PythonCodea];
		}
		subgraph programpythoncode{
		ProgramPythonCode -> ProgData;
		ProgramPythonCode	[shape=oval, color=red2, label=ProgramPythonCode];
		}
		subgraph filepythoncode{
		FilePythonCode -> FileData;
		FilePythonCode	[shape=oval, color=red2, label=FilePythonCode];
		}
		subgraph importpythoncode{
		ImportPythonCode -> Doc;
		ImportPythonCode	[shape=oval, color=red2, label=ImportPythonCode];
		}
		subgraph permanencepythoncode{
		PermanencePythonCode -> Doc;
		PermanencePythonCode	[shape=oval, color=red2, label=PermanencePythonCode];
		}
		subgraph bodypythoncode{
		BodyPythonCode -> Doc;
		BodyPythonCode	[shape=oval, color=red2, label=BodyPythonCode];
		}
		subgraph blockpythoncode{
		BlockPythonCode -> Doc;
		BlockPythonCode	[shape=oval, color=red2, label=BlockPythonCode];
		}
		subgraph typepythoncode{
		TypePythonCode -> TypeData;
		TypePythonCode	[shape=oval, color=red2, label=TypePythonCode];
		}
		subgraph unaryoppythoncode{
		UnaryOpPythonCode -> OpData;
		UnaryOpPythonCode	[shape=oval, color=red2, label=UnaryOpPythonCode];
		}
		subgraph binaryoppythoncode{
		BinaryOpPythonCode -> OpData;
		BinaryOpPythonCode	[shape=oval, color=red2, label=BinaryOpPythonCode];
		}
		subgraph variablepythoncode{
		VariablePythonCode -> VarData;
		VariablePythonCode	[shape=oval, color=red2, label=VariablePythonCode];
		}
		subgraph valuepythoncode{
		ValuePythonCode -> ValData;
		ValuePythonCode	[shape=oval, color=red2, label=ValuePythonCode];
		}
		subgraph functionpythoncode{
		FunctionPythonCode -> FuncData;
		FunctionPythonCode	[shape=oval, color=red2, label=FunctionPythonCode];
		}
		subgraph statementpythoncode{
		StatementPythonCode -> DocTerminator;
		StatementPythonCode	[shape=oval, color=red2, label=StatementPythonCode];
		}
		subgraph scopepythoncode{
		ScopePythonCode -> Doc;
		ScopePythonCode	[shape=oval, color=red2, label=ScopePythonCode];
		}
		subgraph methodtypepythoncode{
		MethodTypePythonCode -> TypeData;
		MethodTypePythonCode	[shape=oval, color=red2, label=MethodTypePythonCode];
		}
		subgraph parameterpythoncode{
		ParameterPythonCode -> ParamData;
		ParameterPythonCode	[shape=oval, color=red2, label=ParameterPythonCode];
		}
		subgraph methodpythoncode{
		MethodPythonCode -> MethodData;
		MethodPythonCode	[shape=oval, color=red2, label=MethodPythonCode];
		}
		subgraph statevarpythoncode{
		StateVarPythonCode -> Doc;
		StateVarPythonCode	[shape=oval, color=red2, label=StateVarPythonCode];
		}
		subgraph classpythoncode{
		ClassPythonCode -> Doc;
		ClassPythonCode	[shape=oval, color=red2, label=ClassPythonCode];
		}
		subgraph modulepythoncode{
		ModulePythonCode -> ModData;
		ModulePythonCode	[shape=oval, color=red2, label=ModulePythonCode];
		}
		subgraph blockcommentpythoncode{
		BlockCommentPythonCode -> Doc;
		BlockCommentPythonCode	[shape=oval, color=red2, label=BlockCommentPythonCode];
		}
	}
	subgraph swiftrenderer {
		subgraph swiftcodea{
		SwiftCodea -> a;
		SwiftCodea	[shape=oval, color=darkgreen, label=SwiftCodea];
		}
		subgraph programswiftcode{
		ProgramSwiftCode -> ProgData;
		ProgramSwiftCode	[shape=oval, color=red2, label=ProgramSwiftCode];
		}
		subgraph fileswiftcode{
		FileSwiftCode -> FileData;
		FileSwiftCode	[shape=oval, color=red2, label=FileSwiftCode];
		}
		subgraph importswiftcode{
		ImportSwiftCode -> Doc;
		ImportSwiftCode	[shape=oval, color=red2, label=ImportSwiftCode];
		}
		subgraph permanenceswiftcode{
		PermanenceSwiftCode -> Doc;
		PermanenceSwiftCode	[shape=oval, color=red2, label=PermanenceSwiftCode];
		}
		subgraph bodyswiftcode{
		BodySwiftCode -> Doc;
		BodySwiftCode	[shape=oval, color=red2, label=BodySwiftCode];
		}
		subgraph blockswiftcode{
		BlockSwiftCode -> Doc;
		BlockSwiftCode	[shape=oval, color=red2, label=BlockSwiftCode];
		}
		subgraph typeswiftcode{
		TypeSwiftCode -> TypeData;
		TypeSwiftCode	[shape=oval, color=red2, label=TypeSwiftCode];
		}
		subgraph unaryopswiftcode{
		UnaryOpSwiftCode -> OpData;
		UnaryOpSwiftCode	[shape=oval, color=red2, label=UnaryOpSwiftCode];
		}
		subgraph binaryopswiftcode{
		BinaryOpSwiftCode -> OpData;
		BinaryOpSwiftCode	[shape=oval, color=red2, label=BinaryOpSwiftCode];
		}
		subgraph variableswiftcode{
		VariableSwiftCode -> VarData;
		VariableSwiftCode	[shape=oval, color=red2, label=VariableSwiftCode];
		}
		subgraph valueswiftcode{
		ValueSwiftCode -> ValData;
		ValueSwiftCode	[shape=oval, color=red2, label=ValueSwiftCode];
		}
		subgraph functionswiftcode{
		FunctionSwiftCode -> FuncData;
		FunctionSwiftCode	[shape=oval, color=red2, label=FunctionSwiftCode];
		}
		subgraph statementswiftcode{
		StatementSwiftCode -> DocTerminator;
		StatementSwiftCode	[shape=oval, color=red2, label=StatementSwiftCode];
		}
		subgraph scopeswiftcode{
		ScopeSwiftCode -> Doc;
		ScopeSwiftCode	[shape=oval, color=red2, label=ScopeSwiftCode];
		}
		subgraph methodtypeswiftcode{
		MethodTypeSwiftCode -> TypeData;
		MethodTypeSwiftCode	[shape=oval, color=red2, label=MethodTypeSwiftCode];
		}
		subgraph parameterswiftcode{
		ParameterSwiftCode -> ParamData;
		ParameterSwiftCode	[shape=oval, color=red2, label=ParameterSwiftCode];
		}
		subgraph methodswiftcode{
		MethodSwiftCode -> MethodData;
		MethodSwiftCode	[shape=oval, color=red2, label=MethodSwiftCode];
		}
		subgraph statevarswiftcode{
		StateVarSwiftCode -> Doc;
		StateVarSwiftCode	[shape=oval, color=red2, label=StateVarSwiftCode];
		}
		subgraph classswiftcode{
		ClassSwiftCode -> Doc;
		ClassSwiftCode	[shape=oval, color=red2, label=ClassSwiftCode];
		}
		subgraph moduleswiftcode{
		ModuleSwiftCode -> ModData;
		ModuleSwiftCode	[shape=oval, color=red2, label=ModuleSwiftCode];
		}
		subgraph blockcommentswiftcode{
		BlockCommentSwiftCode -> Doc;
		BlockCommentSwiftCode	[shape=oval, color=red2, label=BlockCommentSwiftCode];
		}
	}
	subgraph ast {
		subgraph binddata{
		BindData -> Binding;
		BindData -> Doc;
		BindData	[shape=oval, color=cyan3, label=BindData];
		}
		subgraph filedata{
		FileData -> FilePath;
		FileData -> ModData;
		FileData	[shape=oval, color=cyan3, label=FileData];
		}
		subgraph funcdata{
		FuncData -> TypeData;
		FuncData -> Doc;
		FuncData	[shape=oval, color=cyan3, label=FuncData];
		}
		subgraph moddata{
		ModData -> String;
		ModData -> Doc;
		ModData	[shape=oval, color=cyan3, label=ModData];
		}
		subgraph opdata{
		OpData -> Int;
		OpData -> Doc;
		OpData	[shape=oval, color=cyan3, label=OpData];
		}
		subgraph paramdata{
		ParamData -> VarData;
		ParamData -> Doc;
		ParamData	[shape=oval, color=cyan3, label=ParamData];
		}
		subgraph progdata{
		ProgData -> String;
		ProgData -> FileData;
		ProgData	[shape=oval, color=cyan3, label=ProgData];
		}
		subgraph statevardata{
		StateVarData -> ScopeTag;
		StateVarData -> Doc;
		StateVarData	[shape=oval, color=cyan3, label=StateVarData];
		}
		subgraph typedata{
		TypeData -> CodeType;
		TypeData -> String;
		TypeData -> Doc;
		TypeData	[shape=oval, color=cyan3, label=TypeData];
		}
		subgraph valdata{
		ValData -> MaybeInt;
		ValData -> TypeData;
		ValData -> Doc;
		ValData	[shape=oval, color=cyan3, label=ValData];
		}
		subgraph vardata{
		VarData -> Binding;
		VarData -> String;
		VarData -> TypeData;
		VarData -> Doc;
		VarData	[shape=oval, color=cyan3, label=VarData];
		}
		subgraph terminator{
		Terminator	[shape=oval, color=darkviolet, label=Terminator];
		}
		subgraph scopetag{
		ScopeTag	[shape=oval, color=darkviolet, label=ScopeTag];
		}
		subgraph qualifiedname{
		QualifiedName -> String;
		QualifiedName -> QualifiedName;
		QualifiedName	[shape=oval, color=darkviolet, label=QualifiedName];
		}
		subgraph filetype{
		FileType	[shape=oval, color=darkviolet, label=FileType];
		}
		subgraph binding{
		Binding -> Binding;
		Binding -> a;
		Binding	[shape=oval, color=darkviolet, label=Binding];
		}
		subgraph methoddata{
		MethodData -> Doc;
		MethodData	[shape=oval, color=darkgreen, label=MethodData];
		}
	}
	subgraph clasinterfaces {
		subgraph label{
		Label -> String;
		Label	[shape=oval, color=red2, label=Label];
		}
		subgraph library{
		Library -> String;
		Library	[shape=oval, color=red2, label=Library];
		}
		subgraph gsprograma{
		GSPrograma -> GSaPrograma;
		GSPrograma	[shape=oval, color=red2, label=GSPrograma];
		}
		subgraph sfilea{
		SFilea -> FSaFilea;
		SFilea	[shape=oval, color=red2, label=SFilea];
		}
		subgraph msbodya{
		MSBodya -> MSaBodya;
		MSBodya	[shape=oval, color=red2, label=MSBodya];
		}
		subgraph msblocka{
		MSBlocka -> MSaBlocka;
		MSBlocka	[shape=oval, color=red2, label=MSBlocka];
		}
		subgraph vstypea{
		VSTypea -> VSaTypea;
		VSTypea	[shape=oval, color=red2, label=VSTypea];
		}
		subgraph svariablea{
		SVariablea -> VSaVariablea;
		SVariablea	[shape=oval, color=red2, label=SVariablea];
		}
		subgraph svaluea{
		SValuea -> VSaValuea;
		SValuea	[shape=oval, color=red2, label=SValuea];
		}
		subgraph namedargsr{
		NamedArgsr -> SVariablerSValuer;
		NamedArgsr	[shape=oval, color=red2, label=NamedArgsr];
		}
		subgraph mixedcallr{
		MixedCallr -> LabelVSTyperSValuerNamedArgsrSValuer;
		MixedCallr	[shape=oval, color=red2, label=MixedCallr];
		}
		subgraph mixedctorcallr{
		MixedCtorCallr -> VSTyperSValuerNamedArgsrSValuer;
		MixedCtorCallr	[shape=oval, color=red2, label=MixedCtorCallr];
		}
		subgraph poscallr{
		PosCallr -> LabelVSTyperSValuerSValuer;
		PosCallr	[shape=oval, color=red2, label=PosCallr];
		}
		subgraph posctorcallr{
		PosCtorCallr -> VSTyperSValuerSValuer;
		PosCtorCallr	[shape=oval, color=red2, label=PosCtorCallr];
		}
		subgraph vsfunctiona{
		VSFunctiona -> VSaFunctiona;
		VSFunctiona	[shape=oval, color=red2, label=VSFunctiona];
		}
		subgraph msstatementa{
		MSStatementa -> MSaStatementa;
		MSStatementa	[shape=oval, color=red2, label=MSStatementa];
		}
		subgraph inoutcallr{
		InOutCallr -> LabelSValuerSVariablerSVariabler;
		InOutCallr	[shape=oval, color=red2, label=InOutCallr];
		}
		subgraph comment{
		Comment -> String;
		Comment	[shape=oval, color=red2, label=Comment];
		}
		subgraph msparametera{
		MSParametera -> MSaParametera;
		MSParametera	[shape=oval, color=red2, label=MSParametera];
		}
		subgraph smethoda{
		SMethoda -> MSaMethoda;
		SMethoda	[shape=oval, color=red2, label=SMethoda];
		}
		subgraph initializersr{
		Initializersr -> SVariablerSValuer;
		Initializersr	[shape=oval, color=red2, label=Initializersr];
		}
		subgraph inoutfuncr{
		InOutFuncr -> SVariablerSVariablerSVariabler;
		InOutFuncr	[shape=oval, color=red2, label=InOutFuncr];
		}
		subgraph docinoutfuncr{
		DocInOutFuncr -> StringStringSVariabler;
		DocInOutFuncr	[shape=oval, color=red2, label=DocInOutFuncr];
		}
		subgraph csstatevara{
		CSStateVara -> CSaStateVara;
		CSStateVara	[shape=oval, color=red2, label=CSStateVara];
		}
		subgraph sclassa{
		SClassa -> CSaClassa;
		SClassa	[shape=oval, color=red2, label=SClassa];
		}
		subgraph fsmodulea{
		FSModulea -> FSaModulea;
		FSModulea	[shape=oval, color=red2, label=FSModulea];
		}
	}
	subgraph clasess {
	}
	subgraph codeanalyiss {
		subgraph exceptiontype{
		ExceptionType -> String;
		ExceptionType	[shape=oval, color=darkviolet, label=ExceptionType];
		}
	}
	subgraph codeinfo {
		subgraph codeinfoa{
		CodeInfoa -> a;
		CodeInfoa	[shape=oval, color=darkgreen, label=CodeInfoa];
		}
		subgraph programcodeinfo{
		ProgramCodeInfo -> GOOLState;
		ProgramCodeInfo	[shape=oval, color=red2, label=ProgramCodeInfo];
		}
		subgraph filecodeinfo{
		FileCodeInfo	[shape=oval, color=red2, label=FileCodeInfo];
		}
		subgraph permanencecodeinfo{
		PermanenceCodeInfo	[shape=oval, color=red2, label=PermanenceCodeInfo];
		}
		subgraph bodycodeinfo{
		BodyCodeInfo	[shape=oval, color=red2, label=BodyCodeInfo];
		}
		subgraph blockcodeinfo{
		BlockCodeInfo	[shape=oval, color=red2, label=BlockCodeInfo];
		}
		subgraph typecodeinfo{
		TypeCodeInfo -> String;
		TypeCodeInfo	[shape=oval, color=red2, label=TypeCodeInfo];
		}
		subgraph variablecodeinfo{
		VariableCodeInfo	[shape=oval, color=red2, label=VariableCodeInfo];
		}
		subgraph valuecodeinfo{
		ValueCodeInfo	[shape=oval, color=red2, label=ValueCodeInfo];
		}
		subgraph functioncodeinfo{
		FunctionCodeInfo	[shape=oval, color=red2, label=FunctionCodeInfo];
		}
		subgraph statementcodeinfo{
		StatementCodeInfo	[shape=oval, color=red2, label=StatementCodeInfo];
		}
		subgraph scopecodeinfo{
		ScopeCodeInfo -> ScopeTag;
		ScopeCodeInfo	[shape=oval, color=red2, label=ScopeCodeInfo];
		}
		subgraph parametercodeinfo{
		ParameterCodeInfo	[shape=oval, color=red2, label=ParameterCodeInfo];
		}
		subgraph methodcodeinfo{
		MethodCodeInfo	[shape=oval, color=red2, label=MethodCodeInfo];
		}
		subgraph statevarcodeinfo{
		StateVarCodeInfo	[shape=oval, color=red2, label=StateVarCodeInfo];
		}
		subgraph classcodeinfo{
		ClassCodeInfo	[shape=oval, color=red2, label=ClassCodeInfo];
		}
		subgraph modulecodeinfo{
		ModuleCodeInfo	[shape=oval, color=red2, label=ModuleCodeInfo];
		}
	}
	subgraph codetype {
		subgraph codetype{
		CodeType	[shape=oval, color=darkviolet, label=CodeType];
		}
		subgraph classname{
		ClassName -> String;
		ClassName	[shape=oval, color=red2, label=ClassName];
		}
	}
	subgraph helpers {
	}
	subgraph languagerenderer {
		subgraph funcdocrenderer{
		FuncDocRenderer -> StringStringStringStringString;
		FuncDocRenderer	[shape=oval, color=red2, label=FuncDocRenderer];
		}
		subgraph classdocrenderer{
		ClassDocRenderer -> StringString;
		ClassDocRenderer	[shape=oval, color=red2, label=ClassDocRenderer];
		}
		subgraph moduledocrenderer{
		ModuleDocRenderer -> StringStringStringStringString;
		ModuleDocRenderer	[shape=oval, color=red2, label=ModuleDocRenderer];
		}
	}
	subgraph rendererclasess {
		subgraph vsunopa{
		VSUnOpa -> VSaUnaryOpa;
		VSUnOpa	[shape=oval, color=red2, label=VSUnOpa];
		}
		subgraph vsbinopa{
		VSBinOpa -> VSaBinaryOpa;
		VSBinOpa	[shape=oval, color=red2, label=VSBinOpa];
		}
		subgraph msmthdtypea{
		MSMthdTypea -> MSaMethodTypea;
		MSMthdTypea	[shape=oval, color=red2, label=MSMthdTypea];
		}
		subgraph parentspec{
		ParentSpec -> Doc;
		ParentSpec	[shape=oval, color=red2, label=ParentSpec];
		}
	}
	subgraph state {
		subgraph goolstate{
		GOOLState -> FilePath;
		GOOLState -> MaybeFilePath;
		GOOLState -> MapStringClassName;
		GOOLState -> MapQualifiedNameExceptionType;
		GOOLState -> MapQualifiedNameQualifiedName;
		GOOLState -> Bool;
		GOOLState	[shape=oval, color=cyan3, label=GOOLState];
		}
		subgraph filestate{
		FileState -> GOOLState;
		FileState -> String;
		FileState -> FileType;
		FileState -> Bool;
		FileState -> ClassName;
		FileState -> Doc;
		FileState	[shape=oval, color=cyan3, label=FileState];
		}
		subgraph classstate{
		ClassState -> FileState;
		ClassState -> ClassName;
		ClassState	[shape=oval, color=cyan3, label=ClassState];
		}
		subgraph methodstate{
		MethodState -> ClassState;
		MethodState -> String;
		MethodState -> Bool;
		MethodState -> ExceptionType;
		MethodState -> QualifiedName;
		MethodState -> ScopeTag;
		MethodState -> Index;
		MethodState	[shape=oval, color=cyan3, label=MethodState];
		}
		subgraph valuestate{
		ValueState	[shape=oval, color=darkgreen, label=ValueState];
		}
		subgraph index{
		Index -> Integer;
		Index	[shape=oval, color=red2, label=Index];
		}
		subgraph gs{
		GS -> StateGOOLState;
		GS	[shape=oval, color=red2, label=GS];
		}
		subgraph fs{
		FS -> StateFileState;
		FS	[shape=oval, color=red2, label=FS];
		}
		subgraph cs{
		CS -> StateClassState;
		CS	[shape=oval, color=red2, label=CS];
		}
		subgraph ms{
		MS -> StateMethodState;
		MS	[shape=oval, color=red2, label=MS];
		}
		subgraph vs{
		VS -> StateValueState;
		VS	[shape=oval, color=red2, label=VS];
		}
	}
	subgraph drails {
	}
	subgraph core {
		subgraph conceptchunk{
		ConceptChunk -> IdeaDict;
		ConceptChunk -> Sentence;
		ConceptChunk -> UID;
		ConceptChunk	[shape=oval, color=cyan3, label=ConceptChunk];
		}
		subgraph commonconcept{
		CommonConcept -> CI;
		CommonConcept -> Sentence;
		CommonConcept	[shape=oval, color=cyan3, label=CommonConcept];
		}
		subgraph conceptinstance{
		ConceptInstance -> ConceptChunk;
		ConceptInstance -> String;
		ConceptInstance -> ShortName;
		ConceptInstance	[shape=oval, color=cyan3, label=ConceptInstance];
		}
	}
	subgraph citation {
		subgraph citation{
		Citation -> CitationKind;
		Citation -> CiteField;
		Citation -> UID;
		Citation -> ShortName;
		Citation	[shape=oval, color=cyan3, label=Citation];
		}
		subgraph bibref{
		BibRef -> Citation;
		BibRef	[shape=oval, color=red2, label=BibRef];
		}
		subgraph entryid{
		EntryID -> String;
		EntryID	[shape=oval, color=red2, label=EntryID];
		}
	}
	subgraph commonidea {
		subgraph ci{
		CI -> UID;
		CI -> NP;
		CI -> String;
		CI	[shape=oval, color=cyan3, label=CI];
		}
	}
	subgraph concept {
	}
	subgraph contraineds {
		subgraph constrainedchunk{
		ConstrainedChunk -> QuantityDict;
		ConstrainedChunk -> ConstraintE;
		ConstrainedChunk -> MaybeExpr;
		ConstrainedChunk	[shape=oval, color=cyan3, label=ConstrainedChunk];
		}
		subgraph constrconcept{
		ConstrConcept -> DefinedQuantityDict;
		ConstrConcept -> ConstraintE;
		ConstrConcept -> MaybeExpr;
		ConstrConcept	[shape=oval, color=cyan3, label=ConstrConcept];
		}
	}
	subgraph definedquantity {
		subgraph definedquantitydict{
		DefinedQuantityDict -> ConceptChunk;
		DefinedQuantityDict -> StageSymbol;
		DefinedQuantityDict -> Space;
		DefinedQuantityDict -> MaybeUnitDefn;
		DefinedQuantityDict	[shape=oval, color=cyan3, label=DefinedQuantityDict];
		}
	}
	subgraph eq {
		subgraph qdefinition{
		QDefinition -> QuantityDict;
		QDefinition -> Sentence;
		QDefinition -> Expr;
		QDefinition -> UID;
		QDefinition	[shape=oval, color=cyan3, label=QDefinition];
		}
	}
	subgraph namedargument {
		subgraph namedargument{
		NamedArgument -> QuantityDict;
		NamedArgument	[shape=oval, color=darkgreen, label=NamedArgument];
		}
	}
	subgraph namedidea {
		subgraph namedchunk{
		NamedChunk -> UID;
		NamedChunk -> NP;
		NamedChunk	[shape=oval, color=cyan3, label=NamedChunk];
		}
		subgraph ideadict{
		IdeaDict -> NamedChunk;
		IdeaDict -> MaybeString;
		IdeaDict	[shape=oval, color=cyan3, label=IdeaDict];
		}
	}
	subgraph quantity {
		subgraph quantitydict{
		QuantityDict -> IdeaDict;
		QuantityDict -> Space;
		QuantityDict -> StageSymbol;
		QuantityDict -> MaybeUnitDefn;
		QuantityDict	[shape=oval, color=cyan3, label=QuantityDict];
		}
	}
	subgraph relation {
		subgraph relationconcept{
		RelationConcept -> ConceptChunk;
		RelationConcept -> Relation;
		RelationConcept	[shape=oval, color=cyan3, label=RelationConcept];
		}
	}
	subgraph uncertainquantity {
		subgraph uncertainchunk{
		UncertainChunk -> ConstrainedChunk;
		UncertainChunk -> Uncertainty;
		UncertainChunk	[shape=oval, color=cyan3, label=UncertainChunk];
		}
		subgraph uncertq{
		UncertQ -> ConstrConcept;
		UncertQ -> Uncertainty;
		UncertQ	[shape=oval, color=cyan3, label=UncertQ];
		}
	}
	subgraph unitdefn {
		subgraph unitdefn{
		UnitDefn -> ConceptChunk;
		UnitDefn -> UnitSymbol;
		UnitDefn -> UID;
		UnitDefn	[shape=oval, color=cyan3, label=UnitDefn];
		}
		subgraph unitequation{
		UnitEquation -> UID;
		UnitEquation -> USymb;
		UnitEquation	[shape=oval, color=cyan3, label=UnitEquation];
		}
	}
	subgraph unital {
		subgraph unitalchunk{
		UnitalChunk -> DefinedQuantityDict;
		UnitalChunk -> UnitDefn;
		UnitalChunk	[shape=oval, color=cyan3, label=UnitalChunk];
		}
	}
	subgraph unitary {
		subgraph unitarychunk{
		UnitaryChunk -> QuantityDict;
		UnitaryChunk -> UnitDefn;
		UnitaryChunk	[shape=oval, color=cyan3, label=UnitaryChunk];
		}
	}
	subgraph unitaryconcept {
		subgraph unitaryconceptdict{
		UnitaryConceptDict -> UnitaryChunk;
		UnitaryConceptDict -> Sentence;
		UnitaryConceptDict -> UID;
		UnitaryConceptDict	[shape=oval, color=cyan3, label=UnitaryConceptDict];
		}
	}
	subgraph citations {
	}
	subgraph core {
	}
	subgraph core2 {
	}
	subgraph document {
	}
	subgraph citation {
		subgraph citefield{
		CiteField -> String;
		CiteField -> People;
		CiteField	[shape=oval, color=darkviolet, label=CiteField];
		}
		subgraph hp{
		HP -> String;
		HP	[shape=oval, color=darkviolet, label=HP];
		}
		subgraph citationkind{
		CitationKind -> editor;
		CitationKind -> People;
		CitationKind -> CiteField;
		CitationKind	[shape=oval, color=darkviolet, label=CitationKind];
		}
	}
	subgraph date {
		subgraph month{
		Month	[shape=oval, color=darkviolet, label=Month];
		}
	}
	subgraph sentence {
	}
	subgraph core {
		subgraph labelledcontent{
		LabelledContent -> Reference;
		LabelledContent -> RawContent;
		LabelledContent	[shape=oval, color=cyan3, label=LabelledContent];
		}
		subgraph listtype{
		ListType -> ItemType;
		ListType -> Maybe;
		ListType -> String;
		ListType	[shape=oval, color=darkviolet, label=ListType];
		}
		subgraph itemtype{
		ItemType -> Sentence;
		ItemType	[shape=oval, color=darkviolet, label=ItemType];
		}
		subgraph contents{
		Contents -> UnlabelledContent;
		Contents -> LabelledContent;
		Contents	[shape=oval, color=darkviolet, label=Contents];
		}
		subgraph dtype{
		DType	[shape=oval, color=darkviolet, label=DType];
		}
		subgraph rawcontent{
		RawContent -> Sentence;
		RawContent -> Title;
		RawContent -> Bool;
		RawContent	[shape=oval, color=darkviolet, label=RawContent];
		}
		subgraph unlabelledcontent{
		UnlabelledContent -> RawContent;
		UnlabelledContent	[shape=oval, color=darkgreen, label=UnlabelledContent];
		}
		subgraph maxwidthpercent{
		MaxWidthPercent -> Float;
		MaxWidthPercent	[shape=oval, color=red2, label=MaxWidthPercent];
		}
		subgraph title{
		Title -> Sentence;
		Title	[shape=oval, color=red2, label=Title];
		}
		subgraph author{
		Author -> Sentence;
		Author	[shape=oval, color=red2, label=Author];
		}
		subgraph header{
		Header -> Sentence;
		Header	[shape=oval, color=red2, label=Header];
		}
		subgraph depth{
		Depth -> Int;
		Depth	[shape=oval, color=red2, label=Depth];
		}
		subgraph width{
		Width -> Float;
		Width	[shape=oval, color=red2, label=Width];
		}
		subgraph height{
		Height -> Float;
		Height	[shape=oval, color=red2, label=Height];
		}
		subgraph listtuple{
		ListTuple -> TitleItemTypeMaybeString;
		ListTuple	[shape=oval, color=red2, label=ListTuple];
		}
		subgraph filepath{
		Filepath -> String;
		Filepath	[shape=oval, color=red2, label=Filepath];
		}
		subgraph lbl{
		Lbl -> Sentence;
		Lbl	[shape=oval, color=red2, label=Lbl];
		}
		subgraph identifier{
		Identifier -> String;
		Identifier	[shape=oval, color=red2, label=Identifier];
		}
	}
	subgraph diplays {
	}
	subgraph extract {
	}
	subgraph math {
	}
	subgraph precedence {
	}
	subgraph type {
		subgraph lbltype{
		LblType -> IRefProg;
		LblType -> String;
		LblType	[shape=oval, color=darkviolet, label=LblType];
		}
		subgraph irefprog{
		IRefProg -> UID;
		IRefProg	[shape=oval, color=darkviolet, label=IRefProg];
		}
	}
	subgraph core {
		subgraph capitalizationrule{
		CapitalizationRule	[shape=oval, color=darkviolet, label=CapitalizationRule];
		}
		subgraph pluralrule{
		PluralRule	[shape=oval, color=darkviolet, label=PluralRule];
		}
		subgraph np{
		NP -> String;
		NP -> PluralRule;
		NP	[shape=oval, color=darkviolet, label=NP];
		}
		subgraph pluralform{
		PluralForm -> Sentence;
		PluralForm	[shape=oval, color=red2, label=PluralForm];
		}
	}
	subgraph extract {
	}
	subgraph helpers {
	}
	subgraph ast {
		subgraph uri{
		URI -> Scheme;
		URI -> Authority;
		URI -> Path;
		URI -> Query;
		URI -> Fragment;
		URI -> String;
		URI	[shape=oval, color=darkviolet, label=URI];
		}
		subgraph scheme{
		Scheme	[shape=oval, color=darkviolet, label=Scheme];
		}
		subgraph authority{
		Authority -> Username;
		Authority -> Password;
		Authority -> Host;
		Authority -> Port;
		Authority	[shape=oval, color=darkviolet, label=Authority];
		}
		subgraph port{
		Port -> Int;
		Port	[shape=oval, color=darkviolet, label=Port];
		}
		subgraph path{
		Path -> String;
		Path	[shape=oval, color=red2, label=Path];
		}
		subgraph query{
		Query -> String;
		Query	[shape=oval, color=red2, label=Query];
		}
		subgraph fragment{
		Fragment -> String;
		Fragment	[shape=oval, color=red2, label=Fragment];
		}
		subgraph username{
		Username -> String;
		Username	[shape=oval, color=red2, label=Username];
		}
		subgraph password{
		Password -> String;
		Password	[shape=oval, color=red2, label=Password];
		}
		subgraph host{
		Host -> String;
		Host	[shape=oval, color=red2, label=Host];
		}
	}
	subgraph core {
		subgraph uncertainty{
		Uncertainty -> MaybeDouble;
		Uncertainty -> MaybeInt;
		Uncertainty	[shape=oval, color=cyan3, label=Uncertainty];
		}
	}
	subgraph clasess {
		subgraph conceptc{
		Conceptc -> IdeacDefinitioncConceptDomainc;
		Conceptc	[shape=oval, color=red2, label=Conceptc];
		}
	}
	subgraph contraints {
		subgraph constraintreason{
		ConstraintReason	[shape=oval, color=darkviolet, label=ConstraintReason];
		}
		subgraph constrainta{
		Constrainta -> ConstraintReason;
		Constrainta -> RealInterval;
		Constrainta -> a;
		Constrainta -> Constraint;
		Constrainta -> Double;
		Constrainta	[shape=oval, color=darkviolet, label=Constrainta];
		}
		subgraph constrainte{
		ConstraintE -> ConstraintExpr;
		ConstraintE	[shape=oval, color=red2, label=ConstraintE];
		}
	}
	subgraph derivation {
		subgraph derivation{
		Derivation -> Sentence;
		Derivation -> Derivation;
		Derivation	[shape=oval, color=darkviolet, label=Derivation];
		}
	}
	subgraph development {
	}
	subgraph diplays {
	}
	subgraph diplayclassess {
	}
	subgraph diplayexprs {
		subgraph displaybinop{
		DisplayBinOp	[shape=oval, color=darkviolet, label=DisplayBinOp];
		}
		subgraph displayassocbinop{
		DisplayAssocBinOp	[shape=oval, color=darkviolet, label=DisplayAssocBinOp];
		}
		subgraph displayexpr{
		DisplayExpr -> Expr;
		DisplayExpr -> DisplayExpr;
		DisplayExpr -> Space;
		DisplayExpr -> DisplayBinOp;
		DisplayExpr -> DisplayAssocBinOp;
		DisplayExpr	[shape=oval, color=darkviolet, label=DisplayExpr];
		}
	}
	subgraph document {
		subgraph section{
		Section -> Title;
		Section -> SecCons;
		Section -> Reference;
		Section	[shape=oval, color=cyan3, label=Section];
		}
		subgraph document{
		Document -> Title;
		Document -> Author;
		Document -> Section;
		Document -> Reference;
		Document -> RawContent;
		Document -> LabelledContent;
		Document	[shape=oval, color=darkviolet, label=Document];
		}
	}
	subgraph expr {
		subgraph arithbinop{
		ArithBinOp	[shape=oval, color=darkviolet, label=ArithBinOp];
		}
		subgraph eqbinop{
		EqBinOp	[shape=oval, color=darkviolet, label=EqBinOp];
		}
		subgraph boolbinop{
		BoolBinOp	[shape=oval, color=darkviolet, label=BoolBinOp];
		}
		subgraph labinop{
		LABinOp	[shape=oval, color=darkviolet, label=LABinOp];
		}
		subgraph ordbinop{
		OrdBinOp	[shape=oval, color=darkviolet, label=OrdBinOp];
		}
		subgraph vvvbinop{
		VVVBinOp	[shape=oval, color=darkviolet, label=VVVBinOp];
		}
		subgraph vvnbinop{
		VVNBinOp	[shape=oval, color=darkviolet, label=VVNBinOp];
		}
		subgraph assocarithoper{
		AssocArithOper	[shape=oval, color=darkviolet, label=AssocArithOper];
		}
		subgraph assocbooloper{
		AssocBoolOper	[shape=oval, color=darkviolet, label=AssocBoolOper];
		}
		subgraph ufunc{
		UFunc	[shape=oval, color=darkviolet, label=UFunc];
		}
		subgraph ufuncb{
		UFuncB	[shape=oval, color=darkviolet, label=UFuncB];
		}
		subgraph ufuncvec{
		UFuncVec	[shape=oval, color=darkviolet, label=UFuncVec];
		}
		subgraph completeness{
		Completeness	[shape=oval, color=darkviolet, label=Completeness];
		}
		subgraph expr{
		Expr -> Double;
		Expr -> Expr;
		Expr -> Integer;
		Expr -> String;
		Expr -> AssocArithOper;
		Expr -> AssocBoolOper;
		Expr -> DerivType;
		Expr -> UID;
		Expr -> Completeness;
		Expr -> ExprRelation;
		Expr -> UFunc;
		Expr -> UFuncB;
		Expr -> UFuncVec;
		Expr -> ArithBinOp;
		Expr -> BoolBinOp;
		Expr -> EqBinOp;
		Expr -> LABinOp;
		Expr -> OrdBinOp;
		Expr -> VVVBinOp;
		Expr -> VVNBinOp;
		Expr -> DomainDesc;
		Expr -> RealInterval;
		Expr	[shape=oval, color=darkviolet, label=Expr];
		}
		subgraph derivtype{
		DerivType	[shape=oval, color=darkviolet, label=DerivType];
		}
		subgraph relation{
		Relation -> Expr;
		Relation	[shape=oval, color=red2, label=Relation];
		}
		subgraph variable{
		Variable -> String;
		Variable	[shape=oval, color=red2, label=Variable];
		}
	}
	subgraph mics {
	}
	subgraph nounpraehs {
		subgraph capitalization{
		Capitalization -> Sentence;
		Capitalization	[shape=oval, color=red2, label=Capitalization];
		}
		subgraph pluralstring{
		PluralString -> String;
		PluralString	[shape=oval, color=red2, label=PluralString];
		}
	}
	subgraph people {
		subgraph person{
		Person -> String;
		Person -> Conv;
		Person	[shape=oval, color=cyan3, label=Person];
		}
		subgraph conv{
		Conv	[shape=oval, color=darkviolet, label=Conv];
		}
		subgraph people{
		People -> Person;
		People	[shape=oval, color=red2, label=People];
		}
	}
	subgraph refprog {
		subgraph refinfo{
		RefInfo -> Int;
		RefInfo -> String;
		RefInfo	[shape=oval, color=darkviolet, label=RefInfo];
		}
	}
	subgraph reference {
		subgraph reference{
		Reference -> UID;
		Reference -> LblType;
		Reference -> ShortName;
		Reference -> RefInfo;
		Reference	[shape=oval, color=cyan3, label=Reference];
		}
	}
	subgraph sentence {
		subgraph sentencestyle{
		SentenceStyle	[shape=oval, color=darkviolet, label=SentenceStyle];
		}
		subgraph sentence{
		Sentence -> SentenceStyle;
		Sentence -> UID;
		Sentence -> Sentence;
		Sentence -> USymb;
		Sentence -> String;
		Sentence -> Symbol;
		Sentence	[shape=oval, color=darkviolet, label=Sentence];
		}
	}
	subgraph sorthandhs {
	}
	subgraph sortnameh {
		subgraph shortname{
		ShortName -> Sentence;
		ShortName	[shape=oval, color=darkgreen, label=ShortName];
		}
	}
	subgraph space {
		subgraph space{
		Space	[shape=oval, color=cyan3, label=Space];
		}
		subgraph rtopology{
		RTopology	[shape=oval, color=darkviolet, label=RTopology];
		}
		subgraph domaindescab{
		DomainDescab -> Symbol;
		DomainDescab -> RTopology;
		DomainDescab -> a;
		DomainDescab -> b;
		DomainDescab -> DomainDesc;
		DomainDescab	[shape=oval, color=darkviolet, label=DomainDescab];
		}
		subgraph inclusive{
		Inclusive	[shape=oval, color=darkviolet, label=Inclusive];
		}
		subgraph realintervalab{
		RealIntervalab -> Inclusive;
		RealIntervalab -> a;
		RealIntervalab -> b;
		RealIntervalab -> RealInterval;
		RealIntervalab	[shape=oval, color=darkviolet, label=RealIntervalab];
		}
	}
	subgraph stages {
		subgraph stage{
		Stage	[shape=oval, color=darkviolet, label=Stage];
		}
	}
	subgraph symbol {
		subgraph decoration{
		Decoration	[shape=oval, color=darkviolet, label=Decoration];
		}
		subgraph symbol{
		Symbol -> String;
		Symbol -> Int;
		Symbol -> Special;
		Symbol -> Decoration;
		Symbol -> Symbol;
		Symbol	[shape=oval, color=darkviolet, label=Symbol];
		}
	}
	subgraph uid {
		subgraph uid{
		UID -> String;
		UID	[shape=oval, color=red2, label=UID];
		}
	}
	subgraph uncertainty {
	}
	subgraph unicode {
		subgraph special{
		Special	[shape=oval, color=darkviolet, label=Special];
		}
	}
	subgraph unitlang {
		subgraph udefn{
		UDefn -> USymb;
		UDefn	[shape=oval, color=darkviolet, label=UDefn];
		}
		subgraph unitsymbol{
		UnitSymbol -> USymb;
		UnitSymbol -> UDefn;
		UnitSymbol -> UnitSymbol;
		UnitSymbol	[shape=oval, color=darkviolet, label=UnitSymbol];
		}
		subgraph usymb{
		USymb -> Symbol;
		USymb -> Integer;
		USymb	[shape=oval, color=darkgreen, label=USymb];
		}
	}
	subgraph drails {
	}
	subgraph domains {
	}
	subgraph css {
	}
	subgraph helpers {
		subgraph variation{
		Variation -> String;
		Variation -> Doc;
		Variation	[shape=oval, color=darkviolet, label=Variation];
		}
	}
	subgraph monad {
		subgraph printhtml{
		PrintHTML -> String;
		PrintHTML	[shape=oval, color=darkgreen, label=PrintHTML];
		}
	}
	subgraph print {
		subgraph openclose{
		OpenClose -> PrintingInformation;
		OpenClose -> String;
		OpenClose -> Document;
		OpenClose -> Doc;
		OpenClose	[shape=oval, color=darkviolet, label=OpenClose];
		}
	}
	subgraph createmd {
		subgraph seperator{
		Seperator -> Doc;
		Seperator	[shape=oval, color=red2, label=Seperator];
		}
	}
	subgraph print {
		subgraph linearity{
		Linearity -> PrintingConfiguration;
		Linearity	[shape=oval, color=darkviolet, label=Linearity];
		}
	}
	subgraph codeexpr {
	}
	subgraph diplayexprs {
	}
	subgraph document {
	}
	subgraph expr {
	}
	subgraph helpers {
	}
	subgraph sentence {
	}
	subgraph space {
	}
	subgraph symbol {
	}
	subgraph ast {
		subgraph linktype{
		LinkType -> Spec;
		LinkType	[shape=oval, color=darkviolet, label=LinkType];
		}
		subgraph ops{
		Ops	[shape=oval, color=darkviolet, label=Ops];
		}
		subgraph fence{
		Fence	[shape=oval, color=darkviolet, label=Fence];
		}
		subgraph oversymb{
		OverSymb	[shape=oval, color=darkviolet, label=OverSymb];
		}
		subgraph fonts{
		Fonts	[shape=oval, color=darkviolet, label=Fonts];
		}
		subgraph spacing{
		Spacing	[shape=oval, color=darkviolet, label=Spacing];
		}
		subgraph expr{
		Expr -> Double;
		Expr -> Integer;
		Expr -> String;
		Expr -> ExprExpr;
		Expr	[shape=oval, color=darkviolet, label=Expr];
		}
		subgraph spec{
		Spec -> Expr;
		Spec	[shape=oval, color=darkviolet, label=Spec];
		}
		subgraph listtype{
		ListType -> ItemTypeMaybe;
		ListType -> Label;
		ListType -> TitleItemTypeMaybe;
		ListType	[shape=oval, color=darkviolet, label=ListType];
		}
		subgraph itemtype{
		ItemType -> Spec;
		ItemType -> ListType;
		ItemType	[shape=oval, color=darkviolet, label=ItemType];
		}
		subgraph label{
		Label -> Spec;
		Label	[shape=oval, color=red2, label=Label];
		}
		subgraph title{
		Title -> Spec;
		Title	[shape=oval, color=red2, label=Title];
		}
	}
	subgraph citation {
		subgraph citation{
		Citation -> EntryID;
		Citation -> CitationKind;
		Citation -> CiteField;
		Citation	[shape=oval, color=darkviolet, label=Citation];
		}
		subgraph citefield{
		CiteField -> Spec;
		CiteField -> People;
		CiteField	[shape=oval, color=darkviolet, label=CiteField];
		}
		subgraph hp{
		HP -> Spec;
		HP	[shape=oval, color=darkviolet, label=HP];
		}
		subgraph bibref{
		BibRef -> Citation;
		BibRef	[shape=oval, color=red2, label=BibRef];
		}
	}
	subgraph helpers {
	}
	subgraph import {
	}
	subgraph layoutobj {
		subgraph document{
		Document -> Title;
		Document -> Author;
		Document -> LayoutObj;
		Document	[shape=oval, color=darkviolet, label=Document];
		}
		subgraph layoutobj{
		LayoutObj -> Tags;
		LayoutObj -> Spec;
		LayoutObj -> Label;
		LayoutObj -> Bool;
		LayoutObj -> Caption;
		LayoutObj	[shape=oval, color=darkviolet, label=LayoutObj];
		}
		subgraph author{
		Author -> Spec;
		Author	[shape=oval, color=red2, label=Author];
		}
		subgraph contents{
		Contents -> Spec;
		Contents	[shape=oval, color=red2, label=Contents];
		}
		subgraph items{
		Items -> LayoutObj;
		Items	[shape=oval, color=red2, label=Items];
		}
		subgraph tags{
		Tags -> String;
		Tags	[shape=oval, color=red2, label=Tags];
		}
		subgraph depth{
		Depth -> Int;
		Depth	[shape=oval, color=red2, label=Depth];
		}
		subgraph width{
		Width -> Float;
		Width	[shape=oval, color=red2, label=Width];
		}
		subgraph height{
		Height -> Float;
		Height	[shape=oval, color=red2, label=Height];
		}
		subgraph filepath{
		Filepath -> String;
		Filepath	[shape=oval, color=red2, label=Filepath];
		}
		subgraph caption{
		Caption -> Spec;
		Caption	[shape=oval, color=red2, label=Caption];
		}
	}
	subgraph printinginformation {
		subgraph printinginformation{
		PrintingInformation -> ChunkDB;
		PrintingInformation -> Stage;
		PrintingInformation -> PrintingConfiguration;
		PrintingInformation	[shape=oval, color=cyan3, label=PrintingInformation];
		}
		subgraph notation{
		Notation	[shape=oval, color=darkviolet, label=Notation];
		}
		subgraph printingconfiguration{
		PrintingConfiguration -> Notation;
		PrintingConfiguration	[shape=oval, color=darkgreen, label=PrintingConfiguration];
		}
	}
	subgraph helpers {
	}
	subgraph monad {
		subgraph mathcontext{
		MathContext	[shape=oval, color=darkviolet, label=MathContext];
		}
		subgraph latex{
		Latex -> String;
		Latex	[shape=oval, color=darkgreen, label=Latex];
		}
		subgraph d{
		D -> Doc;
		D	[shape=oval, color=red2, label=D];
		}
	}
	subgraph preamble {
		subgraph package{
		Package	[shape=oval, color=darkviolet, label=Package];
		}
		subgraph def{
		Def	[shape=oval, color=darkviolet, label=Def];
		}
	}
	subgraph print {
		subgraph openclose{
		OpenClose -> Expr;
		OpenClose -> D;
		OpenClose	[shape=oval, color=darkviolet, label=OpenClose];
		}
		subgraph fieldwrap{
		FieldWrap -> String;
		FieldWrap -> FieldWrap;
		FieldWrap -> Spec;
		FieldWrap -> D;
		FieldWrap	[shape=oval, color=darkviolet, label=FieldWrap];
		}
	}
	subgraph config {
		subgraph styleguide{
		StyleGuide -> StyleGuide;
		StyleGuide -> String;
		StyleGuide	[shape=oval, color=darkviolet, label=StyleGuide];
		}
	}
	subgraph format {
		subgraph format{
		Format	[shape=oval, color=darkviolet, label=Format];
		}
	}
	subgraph printers {
	}
	subgraph teoryconcepths {
	}
	subgraph clasess {
	}
	subgraph contraintsets {
		subgraph constraintset{
		ConstraintSet -> ConceptChunk;
		ConstraintSet -> NonEmptyExpr;
		ConstraintSet	[shape=oval, color=cyan3, label=ConstraintSet];
		}
	}
	subgraph datadefinition {
		subgraph datadefinition{
		DataDefinition -> QDefinition;
		DataDefinition -> ScopeType;
		DataDefinition -> Reference;
		DataDefinition -> MaybeDerivation;
		DataDefinition -> ShortName;
		DataDefinition -> String;
		DataDefinition -> Sentence;
		DataDefinition	[shape=oval, color=cyan3, label=DataDefinition];
		}
		subgraph scope{
		Scope -> UID;
		Scope	[shape=oval, color=darkgreen, label=Scope];
		}
	}
	subgraph gendefn {
		subgraph gendefn{
		GenDefn -> UID;
		GenDefn -> ModelKinds;
		GenDefn -> MaybeUnitDefn;
		GenDefn -> MaybeDerivation;
		GenDefn -> Reference;
		GenDefn -> ShortName;
		GenDefn -> String;
		GenDefn -> Sentence;
		GenDefn	[shape=oval, color=cyan3, label=GenDefn];
		}
	}
	subgraph intancemodels {
		subgraph instancemodel{
		InstanceModel -> ModelKinds;
		InstanceModel -> NP;
		InstanceModel -> Inputs;
		InstanceModel -> Output;
		InstanceModel -> Reference;
		InstanceModel -> MaybeDerivation;
		InstanceModel -> ShortName;
		InstanceModel -> String;
		InstanceModel -> Sentence;
		InstanceModel	[shape=oval, color=cyan3, label=InstanceModel];
		}
		subgraph input{
		Input -> QuantityDictMaybeRealIntervalExprExpr;
		Input	[shape=oval, color=red2, label=Input];
		}
		subgraph inputs{
		Inputs -> Input;
		Inputs	[shape=oval, color=red2, label=Inputs];
		}
		subgraph output{
		Output -> QuantityDict;
		Output	[shape=oval, color=red2, label=Output];
		}
		subgraph outputconstraints{
		OutputConstraints -> RealIntervalExprExpr;
		OutputConstraints	[shape=oval, color=red2, label=OutputConstraints];
		}
	}
	subgraph modelkinds {
		subgraph modelkinds{
		ModelKinds -> RelationConcept;
		ModelKinds -> ConstraintSet;
		ModelKinds -> QDefinition;
		ModelKinds -> MultiDefn;
		ModelKinds	[shape=oval, color=darkviolet, label=ModelKinds];
		}
	}
	subgraph multidefn {
		subgraph definingexpr{
		DefiningExpr -> UID;
		DefiningExpr -> Sentence;
		DefiningExpr -> Expr;
		DefiningExpr	[shape=oval, color=cyan3, label=DefiningExpr];
		}
		subgraph multidefn{
		MultiDefn -> UID;
		MultiDefn -> QuantityDict;
		MultiDefn -> Sentence;
		MultiDefn -> NonEmptyDefiningExpr;
		MultiDefn	[shape=oval, color=cyan3, label=MultiDefn];
		}
	}
	subgraph teoryh {
		subgraph theorymodel{
		TheoryModel -> UID;
		TheoryModel -> ConceptChunk;
		TheoryModel -> TheoryModel;
		TheoryModel -> SpaceDefn;
		TheoryModel -> QuantityDict;
		TheoryModel -> QDefinition;
		TheoryModel -> DisplayExpr;
		TheoryModel -> Reference;
		TheoryModel -> ShortName;
		TheoryModel -> String;
		TheoryModel -> Sentence;
		TheoryModel	[shape=oval, color=cyan3, label=TheoryModel];
		}
	}
	subgraph drails {
	}
	subgraph concepts {
	}
	subgraph contents {
	}
	subgraph document {
	}
	subgraph englihs {
	}
	subgraph fold {
		subgraph enumtype{
		EnumType	[shape=oval, color=darkviolet, label=EnumType];
		}
		subgraph wraptype{
		WrapType	[shape=oval, color=darkviolet, label=WrapType];
		}
		subgraph septype{
		SepType	[shape=oval, color=darkviolet, label=SepType];
		}
		subgraph foldtype{
		FoldType -> SepType;
		FoldType -> FoldType;
		FoldType -> Sentence;
		FoldType	[shape=oval, color=darkviolet, label=FoldType];
		}
	}
	subgraph litss {
	}
	subgraph mics {
	}
	subgraph nounpraehs {
	}
	subgraph sentence {
	}
	subgraph strings {
	}
	subgraph drails {
	}
	subgraph analyiss {
	}
	subgraph body {
		subgraph folderlocation{
		FolderLocation -> FilePath;
		FolderLocation	[shape=oval, color=cyan3, label=FolderLocation];
		}
	}
	subgraph caestudys {
		subgraph modularity{
		Modularity	[shape=oval, color=darkviolet, label=Modularity];
		}
		subgraph implementtype{
		ImplementType	[shape=oval, color=darkviolet, label=ImplementType];
		}
		subgraph logging{
		Logging	[shape=oval, color=darkviolet, label=Logging];
		}
		subgraph instruct{
		InStruct	[shape=oval, color=darkviolet, label=InStruct];
		}
		subgraph construct{
		ConStruct	[shape=oval, color=darkviolet, label=ConStruct];
		}
		subgraph conrep{
		ConRep	[shape=oval, color=darkviolet, label=ConRep];
		}
		subgraph realnumrep{
		RealNumRep	[shape=oval, color=darkviolet, label=RealNumRep];
		}
		subgraph casestudy{
		CaseStudy -> Name;
		CaseStudy -> Modularity;
		CaseStudy -> ImplementType;
		CaseStudy -> Logging;
		CaseStudy -> InStruct;
		CaseStudy -> ConStruct;
		CaseStudy -> ConRep;
		CaseStudy -> RealNumRep;
		CaseStudy	[shape=oval, color=darkviolet, label=CaseStudy];
		}
		subgraph name{
		Name -> String;
		Name	[shape=oval, color=red2, label=Name];
		}
	}
	subgraph documentation {
	}
	subgraph example {
	}
	subgraph graphs {
	}
	subgraph introduction {
	}
	subgraph main {
	}
}
