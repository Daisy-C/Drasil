-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Theory SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-theory
@version 0.1.0.0

module Data.Drasil.TheoryConcepts

-- | Data definition.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
dataDefn :: CI

-- | General definition.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
genDefn :: CI

-- | Instance model.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
inModel :: CI

-- | Theoretical model.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
thModel :: CI

module Theory.Drasil

-- | Members of this class may have inputs.
class HasInputs c

-- | Provides a <tt>Lens</tt> that holds a <a>QuantityDict</a> and maybe
--   constraints.
inputs :: HasInputs c => Lens' c [(QuantityDict, Maybe (RealInterval Expr Expr))]

-- | Members of this class may have outputs.
class HasOutput c

-- | Provides a <tt>Lens</tt> that holds a <a>QuantityDict</a> for output.
output :: HasOutput c => Lens' c QuantityDict

-- | Provides a <tt>Lens</tt> that holds constraints on the output.
out_constraints :: HasOutput c => Lens' c [RealInterval Expr Expr]

-- | <a>ConstraintSet</a>s are sets of invariants that always hold for
--   underlying domains.
data ConstraintSet

-- | Smart constructor for building ConstraintSets
mkConstraintSet :: ConceptChunk -> NonEmpty Relation -> ConstraintSet

-- | A data definition is a <a>QDefinition</a> that may have additional
--   notes: the scope, any references, maybe a derivation, a label
--   (<a>ShortName</a>), a reference address, and other notes
--   (<a>Sentence</a>s).
data DataDefinition

-- | Smart constructor for data definitions.
dd :: QDefinition -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions with no references.
ddNoRefs :: QDefinition -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Extracts the <a>QDefinition</a> from a <a>DataDefinition</a>.
qdFromDD :: DataDefinition -> QDefinition

-- | A general definition is a <a>ModelKind</a> that may have units, a
--   derivation, references, a shortname, a reference address, and notes.
data GenDefn

-- | Smart constructor for general definitions.
gd :: IsUnit u => ModelKind -> Maybe u -> Maybe Derivation -> [Reference] -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions with no references.
gdNoRefs :: IsUnit u => ModelKind -> Maybe u -> Maybe Derivation -> String -> [Sentence] -> GenDefn

-- | Grab all related <tt>QDefinitions</tt> from a list of general
--   definitions.
getEqModQdsFromGd :: [GenDefn] -> [QDefinition]

-- | <a>MultiDefn</a>s are QDefinition factories, used for showing one or
--   more ways we can define a QDefinition.
data MultiDefn

-- | <a>DefiningExpr</a> are the data that make up a (quantity) definition,
--   namely the description, the defining (rhs) expression and the context
--   domain(s). These are meant to be <tt>alternate</tt> but equivalent
--   definitions for a single concept.
data DefiningExpr

-- | Smart constructor for MultiDefns, does nothing special at the moment
mkMultiDefn :: UID -> QuantityDict -> Sentence -> NonEmpty DefiningExpr -> MultiDefn

-- | Smart constructor for MultiDefns defining UIDs using that of the
--   QuantityDict
mkMultiDefnForQuant :: QuantityDict -> Sentence -> NonEmpty DefiningExpr -> MultiDefn

-- | Smart constructor for DefiningExprs
mkDefiningExpr :: UID -> [UID] -> Sentence -> Expr -> DefiningExpr

-- | Convert MultiDefns into QDefinitions via a specific DefiningExpr
multiDefnGenQD :: MultiDefn -> DefiningExpr -> QDefinition

-- | Convert MultiDefns into QDefinitions via a specific DefiningExpr (by
--   UID)
multiDefnGenQDByUID :: MultiDefn -> UID -> QDefinition

-- | <a>ModelKinds</a> carrier, used to carry commonly overwritten
--   information from the IMs<i>TMs</i>GDs.
data ModelKind
MK :: ModelKinds -> UID -> NP -> ModelKind
[_mk] :: ModelKind -> ModelKinds
[_mkUid] :: ModelKind -> UID
[_mkTerm] :: ModelKind -> NP

-- | Smart constructor for <a>DEModel</a>s
deModel :: UID -> NP -> RelationConcept -> ModelKind

-- | Smart constructor for <a>EquationalConstraints</a>
equationalConstraints :: UID -> NP -> ConstraintSet -> ModelKind

-- | Smart constructor for <a>EquationalModel</a>s
equationalModel :: UID -> NP -> QDefinition -> ModelKind

-- | Smart constructor for <a>EquationalRealm</a>s
equationalRealm :: UID -> NP -> MultiDefn -> ModelKind

-- | Smart constructor for <a>OthModel</a>s
othModel :: UID -> NP -> RelationConcept -> ModelKind

-- | Smart constructor for <a>DEModel</a>s, deriving UID+Term from the
--   <a>RelationConcept</a>
deModel' :: RelationConcept -> ModelKind

-- | Smart constructor for <a>EquationalConstraints</a>, deriving UID+Term
--   from the <a>ConstraintSet</a>
equationalConstraints' :: ConstraintSet -> ModelKind

-- | Smart constructor for <a>EquationalModel</a>s, deriving UID+Term from
--   the <a>QDefinition</a>
equationalModel' :: QDefinition -> ModelKind

-- | Smart constructor for <a>EquationalRealm</a>s
equationalRealm' :: MultiDefn -> ModelKind

-- | Smart constructor for <a>OthModel</a>s, deriving UID+Term from the
--   <a>RelationConcept</a>
othModel' :: RelationConcept -> ModelKind

-- | Smart constructor for <a>EquationalModel</a>s, deriving Term from the
--   <a>QDefinition</a>
equationalModelU :: UID -> QDefinition -> ModelKind

-- | Smart constructor for <a>EquationalModel</a>s, deriving UID from the
--   <a>QDefinition</a>
equationalModelN :: NP -> QDefinition -> ModelKind

-- | Smart constructor for <a>EquationalRealm</a>s
equationalRealmU :: UID -> MultiDefn -> ModelKind

-- | Smart constructor for <a>EquationalRealm</a>s, deriving UID from the
--   <a>MultiDefn</a>
equationalRealmN :: NP -> MultiDefn -> ModelKind

-- | An instance model is a ModelKind that may have specific inputs,
--   outputs, and output constraints. It also has attributes like
--   references, derivation, labels (<a>ShortName</a>), reference address,
--   and notes.
data InstanceModel

-- | Smart constructor for instance models with everything defined.
im :: ModelKind -> Inputs -> Output -> OutputConstraints -> [Reference] -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with a custom term, and no
--   derivation.
imNoDeriv :: ModelKind -> Inputs -> Output -> OutputConstraints -> [Reference] -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with a custom term, and no
--   references.
imNoRefs :: ModelKind -> Inputs -> Output -> OutputConstraints -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with a custom term, and no
--   derivations or references.
imNoDerivNoRefs :: ModelKind -> Inputs -> Output -> OutputConstraints -> String -> [Sentence] -> InstanceModel

-- | For building a quantity with no constraint.
qwUC :: (Quantity q, MayHaveUnit q) => q -> Input

-- | For building a quantity with a constraint.
qwC :: (Quantity q, MayHaveUnit q) => q -> RealInterval Expr Expr -> Input

-- | Grab all related <a>QDefinition</a>s from a list of instance models.
getEqModQdsFromIm :: [InstanceModel] -> [QDefinition]

-- | Theories are the basis for building models with context, spaces,
--   quantities, operations, invariants, etc.
class Theory t
valid_context :: Theory t => Lens' t [TheoryModel]
spaces :: Theory t => Lens' t [SpaceDefn]
quantities :: Theory t => Lens' t [QuantityDict]
operations :: Theory t => Lens' t [ConceptChunk]
defined_quant :: Theory t => Lens' t [QDefinition]
invariants :: Theory t => Lens' t [DisplayExpr]
defined_fun :: Theory t => Lens' t [QDefinition]

-- | A TheoryModel is a collection of:
--   
--   <ul>
--   <li>tUid - a UID,</li>
--   <li>con - a ConceptChunk,</li>
--   <li>vctx - definition context (<a>TheoryModel</a>s),</li>
--   <li>spc - type definitions (<a>SpaceDefn</a>s),</li>
--   <li>quan - quantities (<a>QuantityDict</a>s),</li>
--   <li>ops - operations (<a>ConceptChunk</a>s),</li>
--   <li>defq - definitions (<a>QDefinition</a>s),</li>
--   <li>invs - invariants (<a>DisplayExpr</a>s),</li>
--   <li>dfun - defined functions (<a>QDefinition</a>s),</li>
--   <li>ref - accompanying references (<a>Reference</a>s),</li>
--   <li>lb - a label (<a>SpaceDefn</a>),</li>
--   <li>ra - reference address (<a>SpaceDefn</a>),</li>
--   <li>notes - additional notes (<a>Sentence</a>s).</li>
--   </ul>
--   
--   Right now, neither the definition context (vctx) nor the spaces (spc)
--   are ever defined.
data TheoryModel

-- | Constructor for theory models. Must have a source. Uses the shortname
--   of the reference address.
tm :: (Quantity q, MayHaveUnit q, Concept c) => ModelKind -> [q] -> [c] -> [QDefinition] -> [DisplayExpr] -> [QDefinition] -> [Reference] -> String -> [Sentence] -> TheoryModel

-- | Constructor for theory models. Uses the shortname of the reference
--   address.
tmNoRefs :: (Quantity q, MayHaveUnit q, Concept c) => ModelKind -> [q] -> [c] -> [QDefinition] -> [DisplayExpr] -> [QDefinition] -> String -> [Sentence] -> TheoryModel
