-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Database SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-database
@version 0.1.1.0

module Database.Drasil

-- | Our chunk databases. Must contain all maps needed in an example. In
--   turn, these maps must contain every chunk definition or concept used
--   in its respective example, else an error is thrown.
data ChunkDB
CDB :: SymbolMap -> TermMap -> ConceptMap -> UnitMap -> TraceMap -> RefbyMap -> DatadefnMap -> InsModelMap -> GendefMap -> TheoryModelMap -> ConceptInstanceMap -> SectionMap -> LabelledContentMap -> ReferenceMap -> ChunkDB

-- | A reference map, used to hold a <a>UID</a> and where it is referenced
--   (<a>UID</a>s).
type RefbyMap = Map UID [UID]

-- | A traceability map, used to hold the relation between one <a>UID</a>
--   and a list of other <a>UID</a>s.
type TraceMap = Map UID [UID]

-- | The misnomers below (for the following Map types) are not actually a
--   bad thing. We want to ensure data can't be added to a map if it's not
--   coming from a chunk, and there's no point confusing what the map is
--   for. One is for symbols + their units, and the others are for what
--   they state.
type UMap a = Map UID (a, Int)

-- | Gets an ordered list of <tt>a</tt> from any <tt>a</tt> that is of type
--   <a>UMap</a>.
asOrderedList :: UMap a -> [a]

-- | Smart constructor for chunk databases. Takes in the following:
--   
--   <ul>
--   <li>[<a>Quantity</a>] (for <a>SymbolMap</a>),</li>
--   <li><a>NamedIdea</a>s (for <a>TermMap</a>),</li>
--   <li><a>Concept</a>s (for <a>ConceptMap</a>),</li>
--   <li>Units (something that <a>IsUnit</a> for <a>UnitMap</a>),</li>
--   <li><a>DataDefinition</a>s (for <a>DatadefnMap</a>),</li>
--   <li><a>InstanceModel</a>s (for <a>InsModelMap</a>),</li>
--   <li><a>GenDefn</a>s (for <a>GendefMap</a>),</li>
--   <li><a>TheoryModel</a>s (for <a>TheoryModelMap</a>),</li>
--   <li><a>ConceptInstance</a>s (for <a>ConceptInstanceMap</a>),</li>
--   <li><a>Section</a>s (for <a>SectionMap</a>),</li>
--   <li><a>LabelledContent</a>s (for <a>LabelledContentMap</a>).</li>
--   </ul>
cdb :: (Quantity q, MayHaveUnit q, Idea t, Concept c, IsUnit u) => [q] -> [t] -> [c] -> [u] -> [DataDefinition] -> [InstanceModel] -> [GenDefn] -> [TheoryModel] -> [ConceptInstance] -> [Section] -> [LabelledContent] -> [Reference] -> ChunkDB

-- | Gets the units of a <a>Quantity</a> as <a>UnitDefn</a>s.
collectUnits :: Quantity c => ChunkDB -> [c] -> [UnitDefn]

-- | Smart constructor for a <a>ConceptMap</a>.
conceptMap :: Concept c => [c] -> ConceptMap

-- | Looks up a <a>UID</a> in the concept instance table. If nothing is
--   found, an error is thrown.
conceptinsLookup :: UID -> ConceptInstanceMap -> ConceptInstance
conceptinsTable :: Lens' ChunkDB ConceptInstanceMap
dataDefnTable :: Lens' ChunkDB DatadefnMap

-- | Looks up a <a>UID</a> in the datadefinition table. If nothing is
--   found, an error is thrown.
datadefnLookup :: UID -> DatadefnMap -> DataDefinition

-- | Looks up a <a>UID</a> in the definition table from the <a>ChunkDB</a>.
--   If nothing is found, an error is thrown.
defResolve :: ChunkDB -> UID -> ConceptChunk

-- | Looks up a <a>UID</a> in the general definition table. If nothing is
--   found, an error is thrown.
gendefLookup :: UID -> GendefMap -> GenDefn
gendefTable :: Lens' ChunkDB GendefMap

-- | Translates a traceability map into a reference map.
generateRefbyMap :: TraceMap -> RefbyMap

-- | Looks up a <a>UID</a> in the reference table from the <a>ChunkDB</a>.
--   If nothing is found, an error is thrown.
refResolve :: UID -> ReferenceMap -> Reference
refTable :: Lens' ChunkDB ReferenceMap

-- | General smart constructor for making a <a>UMap</a> out of anything
--   that has a <a>UID</a>.
idMap :: HasUID a => [a] -> Map UID (a, Int)

-- | Smart constructor for a <a>TermMap</a>.
termMap :: Idea c => [c] -> TermMap

-- | Looks up a <a>UID</a> in the instance model table. If nothing is
--   found, an error is thrown.
insmodelLookup :: UID -> InsModelMap -> InstanceModel
insmodelTable :: Lens' ChunkDB InsModelMap

-- | Looks up a <a>UID</a> in the labelled content table. If nothing is
--   found, an error is thrown.
labelledconLookup :: UID -> LabelledContentMap -> LabelledContent
labelledcontentTable :: Lens' ChunkDB LabelledContentMap

-- | Trace a <a>UID</a> to referenced <a>UID</a>s.
refbyLookup :: UID -> RefbyMap -> [UID]
refbyTable :: Lens' ChunkDB RefbyMap

-- | Looks up a <a>UID</a> in the section table. If nothing is found, an
--   error is thrown.
sectionLookup :: UID -> SectionMap -> Section
sectionTable :: Lens' ChunkDB SectionMap

-- | Looks up a <a>UID</a> in the symbol table from the <a>ChunkDB</a>. If
--   nothing is found, an error is thrown.
symbResolve :: ChunkDB -> UID -> QuantityDict

-- | Looks up a <a>UID</a> in the term table from the <a>ChunkDB</a>. If
--   nothing is found, an error is thrown.
termResolve :: ChunkDB -> UID -> IdeaDict
termTable :: ChunkDB -> TermMap

-- | Looks up a <a>UID</a> in the theory model table. If nothing is found,
--   an error is thrown.
theoryModelLookup :: UID -> TheoryModelMap -> TheoryModel
theoryModelTable :: Lens' ChunkDB TheoryModelMap

-- | Trace a <a>UID</a> to related <a>UID</a>s.
traceLookup :: UID -> TraceMap -> [UID]

-- | Smart constructor for a <a>TraceMap</a> given a traceability matrix.
traceMap :: [(UID, [UID])] -> TraceMap
traceTable :: Lens' ChunkDB TraceMap

-- | Gets a list of defined quantities (<a>DefinedQuantityDict</a>s) from
--   <a>Sentence</a>s and expressions that are contained in the database
--   (<a>ChunkDB</a>).
ccss :: [Sentence] -> [DisplayExpr] -> ChunkDB -> [DefinedQuantityDict]

-- | Gets a list of quantities (<a>QuantityDict</a>s) from <a>Sentence</a>s
--   and expressions that are contained in the database (<a>ChunkDB</a>).
ccss' :: [Sentence] -> [DisplayExpr] -> ChunkDB -> [QuantityDict]

-- | Combines the functions of <a>vars</a> and <a>concpt</a> to create a
--   list of <a>DefinedQuantityDict</a>s from a <a>Sentence</a>.
combine :: Sentence -> ChunkDB -> [DefinedQuantityDict]

-- | Gets a list of ideas (<a>IdeaDict</a>) from a <a>Sentence</a> in order
--   to print.
getIdeaDict :: Sentence -> ChunkDB -> [IdeaDict]

-- | Gets a list of quantities (<a>QuantityDict</a>) from an equation in
--   order to print.
vars :: DisplayExpr -> ChunkDB -> [QuantityDict]

-- | for listing <a>QDefinition</a>s in <a>SystemInformation</a>.
data Block a
Parallel :: a -> [a] -> Block a

-- | Database for maintaining references. The Int is that reference's
--   number. Maintains access to both num and chunk for easy reference
--   swapping between number and shortname/refname when necessary (or use
--   of number if no shortname exists).
type RefMap a = Map UID (a, Int)

-- | Database for internal references. Contains citations and referrable
--   concepts.
data ReferenceDB

-- | Data structure for holding all of the requisite information about a
--   system to be used in artifact generation.
data SystemInformation
[SI] :: (CommonIdea a, Idea a, Idea b, HasName c, Quantity e, Eq e, MayHaveUnit e, Quantity f, MayHaveUnit f, Concept f, Eq f, Quantity h, MayHaveUnit h, Quantity i, MayHaveUnit i, HasUID j, Constrained j) => {_sys :: a, _kind :: b, _authors :: [c], _purpose :: d, _quants :: [e], _concepts :: [f], _instModels :: [InstanceModel], _datadefs :: [DataDefinition], _configFiles :: [String], _folderPath :: FilePath, _inputs :: [h], _outputs :: [i], _defSequence :: [Block QDefinition], _constraints :: [j], _constants :: [QDefinition], _sysinfodb :: ChunkDB, _usedinfodb :: ChunkDB, refdb :: ReferenceDB} -> SystemInformation

-- | Helper for extracting a bibliography from the system information.
citeDB :: SystemInformation -> BibRef

-- | Smart constructor for creating a reference database from a
--   bibliography and concept instances.
rdb :: BibRef -> [ConceptInstance] -> ReferenceDB

-- | Constructor that makes a <a>RefMap</a> from things that have a
--   <a>UID</a>.
simpleMap :: HasUID a => [a] -> RefMap a
citationDB :: Lens' ReferenceDB BibMap
conceptDB :: Lens' ReferenceDB ConceptMap
sysinfodb :: Lens' SystemInformation ChunkDB
folderPath :: Lens' SystemInformation FilePath
