-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Code SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-code
@version 0.1.9.0


-- | re-export smart constructors for external code writing
module Language.Drasil.Code

-- | Takes code
makeCode :: [FileData] -> [AuxData] -> Code

-- | Creates the requested <a>Code</a> by producing files
createCodeFiles :: Code -> IO ()

-- | Initializes the generator's <a>DrasilState</a>. <a>String</a>
--   parameter is a string representing the date. &lt;math&gt; parameter is
--   the sample input values provided by the user.
generator :: Lang -> String -> [Expr] -> Choices -> CodeSpec -> DrasilState

-- | Generates a package with the given <a>DrasilState</a>. The passed
--   un-representation functions determine which target language the
--   package will be generated in.
generateCode :: (OOProg progRepr, PackageSym packRepr) => Lang -> (progRepr (Program progRepr) -> ProgData) -> (packRepr (Package packRepr) -> PackData) -> DrasilState -> IO ()

-- | Reads data from a file and converts the values to <a>Expr</a>s. The
--   file must be formatted according to the <a>DataDesc'</a> passed as a
--   parameter.
readWithDataDesc :: FilePath -> DataDesc' -> IO [Expr]

-- | Defines the DataDesc for the file containing a sample data set, which
--   a user must supply if they want to generate a sample input file.
sampleInputDD :: [CodeVarChunk] -> DataDesc'
data Choices
Choices :: [Lang] -> Modularity -> Structure -> ConstantStructure -> ConstantRepr -> ConceptMatchMap -> SpaceMatch -> ImplementationType -> [ODELibPckg] -> [ODEInfo] -> ConstraintBehaviour -> ConstraintBehaviour -> [Comments] -> Verbosity -> Visibility -> [Logging] -> FilePath -> [AuxFile] -> Choices
[lang] :: Choices -> [Lang]
[modularity] :: Choices -> Modularity
[inputStructure] :: Choices -> Structure
[constStructure] :: Choices -> ConstantStructure
[constRepr] :: Choices -> ConstantRepr
[conceptMatch] :: Choices -> ConceptMatchMap
[spaceMatch] :: Choices -> SpaceMatch
[impType] :: Choices -> ImplementationType
[odeLib] :: Choices -> [ODELibPckg]
[odes] :: Choices -> [ODEInfo]
[onSfwrConstraint] :: Choices -> ConstraintBehaviour
[onPhysConstraint] :: Choices -> ConstraintBehaviour
[comments] :: Choices -> [Comments]
[doxVerbosity] :: Choices -> Verbosity
[dates] :: Choices -> Visibility
[logging] :: Choices -> [Logging]
[logFile] :: Choices -> FilePath
[auxFiles] :: Choices -> [AuxFile]
data Comments
CommentFunc :: Comments
CommentClass :: Comments
CommentMod :: Comments
data Verbosity
Verbose :: Verbosity
Quiet :: Verbosity
data ConstraintBehaviour
Warning :: ConstraintBehaviour
Exception :: ConstraintBehaviour
data ImplementationType
Library :: ImplementationType
Program :: ImplementationType
data Logging
LogFunc :: Logging
LogVar :: Logging
data Modularity
Modular :: InputModule -> Modularity
Unmodular :: Modularity
data Structure
Unbundled :: Structure
Bundled :: Structure
data ConstantStructure
Inline :: ConstantStructure
WithInputs :: ConstantStructure
Store :: Structure -> ConstantStructure
data ConstantRepr
Var :: ConstantRepr
Const :: ConstantRepr
data InputModule
Combined :: InputModule
Separated :: InputModule
data CodeConcept
Pi :: CodeConcept

-- | Builds a ConceptMatchMap from an association list of chunks and
--   CodeConcepts
matchConcepts :: HasUID c => [(c, [CodeConcept])] -> ConceptMatchMap

-- | Specifies which CodeType should be used to represent each mathematical
--   Space. [CodeType] is preferentially-ordered, first CodeType that does
--   not conflict with other choices will be selected.
type SpaceMatch = Space -> [CodeType]

-- | Builds a SpaceMatch from an association list of Spaces and CodeTypes.
matchSpaces :: [(Space, [CodeType])] -> SpaceMatch
data AuxFile
SampleInput :: FilePath -> AuxFile
ReadME :: AuxFile
getSampleData :: Choices -> Maybe FilePath
data Visibility
Show :: Visibility
Hide :: Visibility

-- | Default choices to be used as the base from which design
--   specifications can be built.
defaultChoices :: Choices
data CodeSpec
[CodeSpec] :: HasName a => {pName :: Name, authors :: [a], inputs :: [Input], extInputs :: [Input], derivedInputs :: [Derived], outputs :: [Output], configFiles :: [FilePath], execOrder :: [Def], cMap :: ConstraintCEMap, constants :: [Const], constMap :: ConstantMap, mods :: [Mod], sysinfodb :: ChunkDB} -> CodeSpec

-- | Get a UID of a chunk corresponding to a Func
funcUID :: Func -> UID

-- | FIXME: hack. Use for implementation-stage functions that need to be
--   displayed in the SRS.
funcUID' :: Func -> UID

-- | Convert a Func to an implementation-stage QuantityDict representing
--   the function.
asVC :: Func -> QuantityDict

-- | FIXME: Part of above hack
asVC' :: Func -> QuantityDict

-- | Defines a CodeSpec based on the SystemInformation, Choices, and Mods
--   defined by the user.
codeSpec :: SystemInformation -> Choices -> [Mod] -> CodeSpec

-- | Define an assignment statement
($:=) :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt
data Mod
Mod :: Name -> Description -> [Import] -> [Class] -> [Func] -> Mod
data StateVariable
data Func
data FuncStmt
[FAsg] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FAsgIndex] :: CodeVarChunk -> Integer -> CodeExpr -> FuncStmt

-- | For-loop; Variable, Start, Stop, Step, Body
[FFor] :: CodeVarChunk -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt
[FForEach] :: CodeVarChunk -> CodeExpr -> [FuncStmt] -> FuncStmt
[FWhile] :: CodeExpr -> [FuncStmt] -> FuncStmt
[FCond] :: CodeExpr -> [FuncStmt] -> [FuncStmt] -> FuncStmt
[FRet] :: CodeExpr -> FuncStmt
[FThrow] :: String -> FuncStmt
[FTry] :: [FuncStmt] -> [FuncStmt] -> FuncStmt
[FContinue] :: FuncStmt
[FDecDef] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FFuncDef] :: CodeFuncChunk -> [ParameterChunk] -> [FuncStmt] -> FuncStmt
[FVal] :: CodeExpr -> FuncStmt
[FMulti] :: [FuncStmt] -> FuncStmt
[FAppend] :: CodeExpr -> CodeExpr -> FuncStmt

-- | Define a public state variable based on the given CodeVarChunk
pubStateVar :: CodeVarChunk -> StateVariable

-- | Define a private state variable based on the given CodeVarChunk
privStateVar :: CodeVarChunk -> StateVariable

-- | Define a declare-define statement.
fDecDef :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt

-- | Define a for-loop. Quantity is for the iteration variable, Expr is the
--   upper bound at that variable (the variable will start with a value of
--   0). [FuncStmt] is for the loop body.
ffor :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a for-loop. Quantity is for the iteration variable, and 3
--   CodeExprs for the start, stop, step numbers. [FuncStmt] is for the
--   loop body.
fforRange :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a function that reads data from a file, according to the given
--   DataDesc.
funcData :: Name -> Description -> DataDesc -> Func

-- | Define a function by providing the FuncStmts for its body. Other
--   parameters are function name, description, list of parameters, space
--   of the returned value, and description of the returned value.
funcDef :: (Quantity c, MayHaveUnit c) => Name -> Description -> [c] -> Space -> Maybe Description -> [FuncStmt] -> Func

-- | Define a Mod with the given Name, Description, Classes, and Functions.
packmod :: Name -> Description -> [Class] -> [Func] -> Mod
junkLine :: Data
multiLine :: LinePattern -> Delim -> Data
repeated :: [DataItem] -> LinePattern
singleLine :: LinePattern -> Delim -> Data
singleton :: DataItem -> Data
type ExternalLibrary = [StepGroup]

-- | A step can be a call to an external library function or method.
data Step

-- | The first item in the requires list should be where the function being
--   called is defined
data FunctionInterface
data Argument

-- | Specifies an external library
externalLib :: [StepGroup] -> ExternalLibrary

-- | To be used when there are multiple options for a group of consecutive
--   steps, where a single use-case-specific factor decides which step
--   group to use
choiceSteps :: [[Step]] -> StepGroup

-- | To be used when there are multiple options for a single step, where a
--   use-case-specific factor decides which step to use.
choiceStep :: [Step] -> StepGroup

-- | Specifies a step which must exist in some form in every use case.
mandatoryStep :: Step -> StepGroup

-- | Specifies multiple consecutive steps that all must exist in some form
--   in every use case.
mandatorySteps :: [Step] -> StepGroup
callStep :: FunctionInterface -> Step

-- | Specifies a call to an external library function.
libFunction :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library method.
libMethod :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library function, where the result is
--   assigned to a variable.
libFunctionWithResult :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library method, where the result is
--   assigned to a variable.
libMethodWithResult :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is assigned to a variable.
libConstructor :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library function, where multiple
--   modules from the external library are required, and the result is
--   assigned to a variable.
libConstructorMultiReqs :: [Requires] -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is returned.
constructAndReturn :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies an argument that is not use-case-dependent.
lockedArg :: CodeExpr -> Argument

-- | Specifies a named argument that is not use-case-dependent.
lockedNamedArg :: NamedArgument -> CodeExpr -> Argument

-- | Specifies a use-case-dependent argument whose value can be inlined in
--   the call.
inlineArg :: Space -> Argument

-- | Specifies a use-case-dependent named argument whose value can be
--   inlined in the call.
inlineNamedArg :: NamedArgument -> Space -> Argument

-- | Specifies use-case-dependent argument whose value must be assigned to
--   a variable before being passed in the call.
preDefinedArg :: CodeVarChunk -> Argument

-- | Specifies use-case-dependent named argument whose value must be
--   assigned to a variable before being passed in the call.
preDefinedNamedArg :: NamedArgument -> CodeVarChunk -> Argument

-- | Specifies a function type argument, where the body consists of a
--   single step.
functionArg :: CodeFuncChunk -> [Parameter] -> Step -> Argument

-- | Specifies an argument that is an object of a class that must be
--   defined in the calling program.
customObjArg :: [Requires] -> Description -> CodeVarChunk -> CodeFuncChunk -> ClassInfo -> Argument

-- | Specifies an argument that is an object of a class from the external
--   library. The list of [CodeVarChunk] represents fields of the object
--   that must be set in the calling program.
recordArg :: Requires -> CodeFuncChunk -> CodeVarChunk -> [CodeVarChunk] -> Argument

-- | Specifies a use-case-independent parameter
lockedParam :: CodeVarChunk -> Parameter

-- | Specifies a parameter whose name depends on the use case.
unnamedParam :: Space -> Parameter

-- | Specifies a class that must be implemented in the calling program.
customClass :: [MethodInfo] -> ClassInfo

-- | Specifies an implementation of an interface from the external library.
implementation :: String -> [MethodInfo] -> ClassInfo

-- | Specifies a constructor.
constructorInfo :: CodeFuncChunk -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a method.
methodInfo :: CodeFuncChunk -> Description -> [Parameter] -> Description -> [Step] -> MethodInfo

-- | Specifies a method that does not return anything.
methodInfoNoReturn :: CodeFuncChunk -> Description -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a statement where a current solution is appended to a
--   solution list.
appendCurrSol :: CodeExpr -> Step

-- | Specifies a statement where a solution list is populated by iterating
--   through a solution array.
populateSolList :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk -> [Step]

-- | Specifies statements where every index of an array is assigned a
--   value.
assignArrayIndex :: Step

-- | Specifies a statement where a solution is assigned from the field of
--   an object.
assignSolFromObj :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with the
--   first element of an array.
initSolListFromArray :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with a
--   value.
initSolListWithVal :: Step

-- | FunctionInterface for loop condition, CodeChunk for solution object,
--   CodeChunk for independent var, FunctionInterface for solving,
--   CodeChunk for soln array to populate with
solveAndPopulateWhile :: FunctionInterface -> CodeVarChunk -> CodeVarChunk -> FunctionInterface -> CodeVarChunk -> Step

-- | Specifies a statement where a list is returned, where each value of
--   the list -- is explicitly defined.
returnExprList :: Step

-- | Specifies a use-case-independent statement that returns a value.
fixedReturn :: CodeExpr -> Step

-- | Specifies a statement where a single solution is initialized with a
--   value.
initSolWithVal :: Step
type ExternalLibraryCall = [StepGroupFill]
data StepGroupFill
SGF :: Int -> [StepFill] -> StepGroupFill
data StepFill
CallF :: FunctionIntFill -> StepFill
LoopF :: NonEmpty FunctionIntFill -> [CodeExpr] -> NonEmpty StepFill -> StepFill
StatementF :: [CodeVarChunk] -> [CodeExpr] -> StepFill
newtype FunctionIntFill
FIF :: [ArgumentFill] -> FunctionIntFill
data ArgumentFill
UserDefinedArgF :: Maybe NamedArgument -> CodeExpr -> ArgumentFill
BasicF :: CodeExpr -> ArgumentFill
FnF :: [ParameterFill] -> StepFill -> ArgumentFill
ClassF :: [StateVariable] -> ClassInfoFill -> ArgumentFill
RecordF :: [CodeExpr] -> ArgumentFill
data ParameterFill
NameableParamF :: ParameterChunk -> ParameterFill
UserDefined :: ParameterChunk -> ParameterFill
data ClassInfoFill
RegularF :: [MethodInfoFill] -> ClassInfoFill
ImplementsF :: [MethodInfoFill] -> ClassInfoFill
data MethodInfoFill
CIF :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill
MIF :: [ParameterFill] -> NonEmpty StepFill -> MethodInfoFill
externalLibCall :: [StepGroupFill] -> ExternalLibraryCall
choiceStepsFill :: Int -> [StepFill] -> StepGroupFill
choiceStepFill :: Int -> StepFill -> StepGroupFill
mandatoryStepFill :: StepFill -> StepGroupFill
mandatoryStepsFill :: [StepFill] -> StepGroupFill
callStepFill :: FunctionIntFill -> StepFill
libCallFill :: [ArgumentFill] -> FunctionIntFill
userDefinedArgFill :: CodeExpr -> ArgumentFill
basicArgFill :: CodeExpr -> ArgumentFill
functionArgFill :: [ParameterFill] -> StepFill -> ArgumentFill
customObjArgFill :: [StateVariable] -> ClassInfoFill -> ArgumentFill
recordArgFill :: [CodeExpr] -> ArgumentFill
unnamedParamFill :: CodeVarChunk -> ParameterFill
unnamedParamPBVFill :: CodeVarChunk -> ParameterFill
userDefinedParamFill :: CodeVarChunk -> ParameterFill
customClassFill :: [MethodInfoFill] -> ClassInfoFill
implementationFill :: [MethodInfoFill] -> ClassInfoFill
constructorInfoFill :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill
methodInfoFill :: [ParameterFill] -> [StepFill] -> MethodInfoFill
appendCurrSolFill :: CodeVarChunk -> StepFill
populateSolListFill :: CodeVarChunk -> [StepFill]
assignArrayIndexFill :: CodeVarChunk -> [CodeExpr] -> StepFill
assignSolFromObjFill :: CodeVarChunk -> StepFill
initSolListFromArrayFill :: CodeVarChunk -> StepFill
initSolListWithValFill :: CodeVarChunk -> CodeExpr -> StepFill
solveAndPopulateWhileFill :: FunctionIntFill -> CodeExpr -> FunctionIntFill -> CodeVarChunk -> StepFill
returnExprListFill :: [CodeExpr] -> StepFill
fixedStatementFill :: StepFill
initSolWithValFill :: CodeVarChunk -> CodeExpr -> StepFill
data Lang
Cpp :: Lang
CSharp :: Lang
Java :: Lang
Python :: Lang
Swift :: Lang

-- | Members of this class must have all the information necessary for the
--   <a>AuxiliarySym</a> in addition to information necessary to create a
--   package.
class (AuxiliarySym r) => PackageSym r where {
    type family Package r;
}
package :: PackageSym r => ProgData -> [r (Auxiliary r)] -> r (Package r)

-- | Members of this class must have a doxygen configuration, ReadMe file,
--   sample input, omptimize doxygen document, information necessary for a
--   makefile, auxiliary helper documents, and auxiliary from data
--   documents.
class AuxiliarySym r where {
    type family Auxiliary r;
    type family AuxHelper r;
}
doxConfig :: AuxiliarySym r => String -> GOOLState -> Verbosity -> r (Auxiliary r)
readMe :: AuxiliarySym r => ReadMeInfo -> r (Auxiliary r)
sampleInput :: AuxiliarySym r => ChunkDB -> DataDesc -> [Expr] -> r (Auxiliary r)
optimizeDox :: AuxiliarySym r => r (AuxHelper r)
makefile :: AuxiliarySym r => [FilePath] -> ImplementationType -> [Comments] -> GOOLState -> ProgData -> r (Auxiliary r)
auxHelperDoc :: AuxiliarySym r => r (AuxHelper r) -> Doc
auxFromData :: AuxiliarySym r => FilePath -> Doc -> r (Auxiliary r)

-- | The underlying data type for auxiliary files in all renderers.
data AuxData

-- | The underlying data type for packages in all renderers.
data PackData

-- | Basic chunk representation in the code generation context. Contains a
--   QuantityDict and the kind of code (variable or function).
data CodeChunk

-- | Chunk representing a variable. The <tt>obv</tt> field represents the
--   object containing this variable, if it is an object field.
data CodeVarChunk

-- | Chunk representing a function.
data CodeFuncChunk

-- | Construct a <a>CodeVarChunk</a> from a <a>Quantity</a>.
quantvar :: (Quantity c, MayHaveUnit c) => c -> CodeVarChunk

-- | Construct a <a>CodeFuncChunk</a> from a <a>Quantity</a>.
quantfunc :: (Quantity c, MayHaveUnit c) => c -> CodeFuncChunk

-- | Combine an Object-type <a>CodeChunk</a> with another <a>CodeChunk</a>
--   to create a new <a>CodeChunk</a> which represents a field of the
--   first. ex. <tt>ccObjVar obj f = obj.f</tt>.
ccObjVar :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk
listToArray :: CodeVarChunk -> CodeVarChunk

-- | Constructs a CodeExpr representing the field of an actor
field :: CodeVarChunk -> CodeVarChunk -> CodeExpr
data ODEInfo
ODEInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> CodeExpr -> [CodeExpr] -> ODEOptions -> ODEInfo
[indepVar] :: ODEInfo -> CodeVarChunk
[depVar] :: ODEInfo -> CodeVarChunk
[otherVars] :: ODEInfo -> [CodeVarChunk]
[tInit] :: ODEInfo -> CodeExpr
[tFinal] :: ODEInfo -> CodeExpr
[initVal] :: ODEInfo -> CodeExpr
[odeSyst] :: ODEInfo -> [CodeExpr]
[odeOpts] :: ODEInfo -> ODEOptions
odeInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> CodeExpr -> [CodeExpr] -> ODEOptions -> ODEInfo
data ODEOptions
ODEOpts :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions
[solveMethod] :: ODEOptions -> ODEMethod
[absTol] :: ODEOptions -> CodeExpr
[relTol] :: ODEOptions -> CodeExpr
[stepSize] :: ODEOptions -> CodeExpr
[initValFstOrd] :: ODEOptions -> CodeExpr
odeOptions :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions
data ODEMethod
RK45 :: ODEMethod
BDF :: ODEMethod
Adams :: ODEMethod
data ODELibPckg
ODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> Maybe FilePath -> [Lang] -> ODELibPckg
[libName] :: ODELibPckg -> Name
[libVers] :: ODELibPckg -> Version
[libSpec] :: ODELibPckg -> ExternalLibrary
[libCall] :: ODELibPckg -> ODEInfo -> ExternalLibraryCall
[libPath] :: ODELibPckg -> Maybe FilePath
[compatibleLangs] :: ODELibPckg -> [Lang]

-- | Makes an ODELibPckg with the given name, ExternalLibrary
--   specification, ExternalLibraryCall specification parameterized by an
--   ODEInfo, local file path to the library, and list of compatible
--   languages.
mkODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> FilePath -> [Lang] -> ODELibPckg

-- | Makes an ODELibPckg with the given name, ExternalLibrary
--   specification, ExternalLibraryCall specification parameterized by an
--   ODEInfo, and list of compatible languages.
mkODELibNoPath :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> [Lang] -> ODELibPckg
unPP :: PythonProject a -> a
unJP :: JavaProject a -> a
unCSP :: CSharpProject a -> a
unCPPP :: CppProject a -> a
unSP :: SwiftProject a -> a

module Data.Drasil.ExternalLibraries.ODELibraries
scipyODEPckg :: ODELibPckg
scipyODESymbols :: [QuantityDict]
osloPckg :: ODELibPckg
osloSymbols :: [QuantityDict]
arrayVecDepVar :: ODEInfo -> CodeVarChunk
apacheODEPckg :: ODELibPckg
apacheODESymbols :: [QuantityDict]
odeintPckg :: ODELibPckg
odeintSymbols :: [QuantityDict]
scipyODELSodaPkg :: ODELibPckg
