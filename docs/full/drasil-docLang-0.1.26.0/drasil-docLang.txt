-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Document Language SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-docLang
@version 0.1.26.0

module Drasil.DocLang.SRS

-- | Table of Contents section.
--   
--   Standard SRS section builders.
tOfCont :: [Contents] -> [Section] -> Section

-- | Reference Material section.
--   
--   Standard SRS section builders.
refMat :: [Contents] -> [Section] -> Section

-- | Table of Units section.
--   
--   Standard SRS section builders.
tOfUnit :: [Contents] -> [Section] -> Section

-- | Table of Symbols section.
--   
--   Standard SRS section builders.
tOfSymb :: [Contents] -> [Section] -> Section

-- | Table of Abbreviations and Acronyms section.
--   
--   Standard SRS section builders.
tOfAbbAcc :: [Contents] -> [Section] -> Section

-- | Introduction section.
--   
--   Standard SRS section builders.
intro :: [Contents] -> [Section] -> Section

-- | Purpose of Document section.
--   
--   Standard SRS section builders.
prpsOfDoc :: [Contents] -> [Section] -> Section

-- | Scope of Requirements section.
--   
--   Standard SRS section builders.
scpOfReq :: [Contents] -> [Section] -> Section

-- | Characteristics of Intended Reader section.
--   
--   Standard SRS section builders.
charOfIR :: [Contents] -> [Section] -> Section

-- | Organization of Document section.
--   
--   Standard SRS section builders.
orgOfDoc :: [Contents] -> [Section] -> Section

-- | Stakeholders section.
--   
--   Standard SRS section builders.
stakeholder :: [Contents] -> [Section] -> Section

-- | The Customer section.
--   
--   Standard SRS section builders.
theCustomer :: [Contents] -> [Section] -> Section

-- | The Client section.
--   
--   Standard SRS section builders.
theClient :: [Contents] -> [Section] -> Section

-- | General System Description section.
--   
--   Standard SRS section builders.
genSysDes :: [Contents] -> [Section] -> Section

-- | System Context section.
--   
--   Standard SRS section builders.
sysCont :: [Contents] -> [Section] -> Section

-- | User Characteristics section.
--   
--   Standard SRS section builders.
userChar :: [Contents] -> [Section] -> Section

-- | System Constraints section.
--   
--   Standard SRS section builders.
sysCon :: [Contents] -> [Section] -> Section

-- | Specific System Description section.
--   
--   Standard SRS section builders.
specSysDes :: [Contents] -> [Section] -> Section

-- | Problem Description section.
--   
--   Standard SRS section builders.
probDesc :: [Contents] -> [Section] -> Section

-- | Terminology and Definitions section.
--   
--   Standard SRS section builders.
termAndDefn :: [Contents] -> [Section] -> Section

-- | Physical System Description section.
--   
--   Standard SRS section builders.
physSyst :: [Contents] -> [Section] -> Section

-- | Goal Statement section.
--   
--   Standard SRS section builders.
goalStmt :: [Contents] -> [Section] -> Section

-- | Solution Characteristics Specification section.
--   
--   Standard SRS section builders.
solCharSpec :: [Contents] -> [Section] -> Section

-- | Assumptions section.
--   
--   Standard SRS section builders.
assumpt :: [Contents] -> [Section] -> Section

-- | Theoretical Models section.
--   
--   Standard SRS section builders.
thModel :: [Contents] -> [Section] -> Section

-- | General Definitions section.
--   
--   Standard SRS section builders.
genDefn :: [Contents] -> [Section] -> Section

-- | Data Definitions section.
--   
--   Standard SRS section builders.
dataDefn :: [Contents] -> [Section] -> Section

-- | Instance Models section.
--   
--   Standard SRS section builders.
inModel :: [Contents] -> [Section] -> Section

-- | Data Constraints section.
--   
--   Standard SRS section builders.
datCon :: [Contents] -> [Section] -> Section

-- | Properties of a Correct Solution section.
--   
--   Standard SRS section builders.
propCorSol :: [Contents] -> [Section] -> Section

-- | Requirements section.
--   
--   Standard SRS section builders.
require :: [Contents] -> [Section] -> Section

-- | Non-Functional Requirements section.
--   
--   Standard SRS section builders.
nonfuncReq :: [Contents] -> [Section] -> Section

-- | Functional Requirements section.
--   
--   Standard SRS section builders.
funcReq :: [Contents] -> [Section] -> Section

-- | Likely Changes section.
--   
--   Standard SRS section builders.
likeChg :: [Contents] -> [Section] -> Section

-- | Unlikely Changes section.
--   
--   Standard SRS section builders.
unlikeChg :: [Contents] -> [Section] -> Section

-- | Traceablilty Matrices and Graphs section.
--   
--   Standard SRS section builders.
traceyMandG :: [Contents] -> [Section] -> Section

-- | Values of Auxiliary Constants section.
--   
--   Standard SRS section builders.
valsOfAuxCons :: [Contents] -> [Section] -> Section

-- | References section.
--   
--   Standard SRS section builders.
reference :: [Contents] -> [Section] -> Section

-- | Appendix section.
--   
--   Standard SRS section builders.
appendix :: [Contents] -> [Section] -> Section

-- | Off-the-Shelf Solutions section.
--   
--   Standard SRS section builders.
offShelfSol :: [Contents] -> [Section] -> Section

-- | Scope of the Project section.
--   
--   Standard SRS section builders.
scpOfTheProj :: [Contents] -> [Section] -> Section

-- | Product Use Case Table section.
--   
--   Standard SRS section builders.
prodUCTable :: [Contents] -> [Section] -> Section

-- | Individual Product Use Case section.
--   
--   Standard SRS section builders.
indPRCase :: [Contents] -> [Section] -> Section

-- | Terminology section.
--   
--   Standard SRS section builders.
termogy :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
tOfContLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
refMatLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
tOfUnitLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
tOfSymbLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
tOfAbbAccLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
introLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
docPurposeLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
reqsScopeLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
readerCharsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
docOrgLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
stakeholderLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
clientLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
customerLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
genSysDescLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
sysContextLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
userCharsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
sysConstraintsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
specSystDescLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
physSystLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
probDescLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
termDefsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
goalStmtLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
solCharSpecLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
assumptLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
thModelLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
genDefnLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
dataDefnLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
inModelLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
datConLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
corSolPropsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
requirementsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
funcReqLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
nonfuncReqLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
likeChgLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
unlikeChgLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
traceMatricesLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
valsOfAuxConsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
referenceLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
appendixLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
offShelfSolnsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
indPRCaseLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
projScopeLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
useCaseTableLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
terminologyLabel :: Reference

-- | Collections all <a>Section</a> <a>Reference</a>s.
sectionReferences :: [Reference]

module Drasil.DocumentLanguage.RefHelpers

-- | A database that contains <a>TheoryModel</a>s, <a>GenDefn</a>s,
--   <a>DataDefinition</a>s, and <a>InstanceModel</a>s.
data ModelDB
tmRefDB :: ModelDB -> RefMap TheoryModel
gdRefDB :: ModelDB -> RefMap GenDefn
ddRefDB :: ModelDB -> RefMap DataDefinition
imRefDB :: ModelDB -> RefMap InstanceModel

-- | Constructor for creating a <a>ModelDB</a>.
mdb :: [TheoryModel] -> [GenDefn] -> [DataDefinition] -> [InstanceModel] -> ModelDB

-- | Get all the models out of a database.
modelsFromDB :: RefMap a -> [a]

module Drasil.DocumentLanguage.Units

-- | Get the units, if they exist, and wrap them as a <a>Sentence</a>.
--   Default value is "--".
toSentence :: MayHaveUnit u => u -> Sentence

-- | Similar to <a>toSentence</a>, except default value is "Unitless".
toSentenceUnitless :: MayHaveUnit u => u -> Sentence

module Drasil.DocumentLanguage.Definitions

-- | Fields that should be displayed in definitions.
data Field
Label :: Field
Symbol :: Field
Units :: Field
DefiningEquation :: Field
Description :: Verbosity -> InclUnits -> Field
Input :: Field
Output :: Field
InConstraints :: Field
OutConstraints :: Field
Notes :: Field
Source :: Field
RefBy :: Field

-- | Synonym for a list of <a>Field</a>s.
type Fields = [Field]

-- | Determines whether to include or ignore units.
data InclUnits

-- | In description field (for other symbols).
IncludeUnits :: InclUnits
IgnoreUnits :: InclUnits

-- | Refers to the verbosity of statements.
data Verbosity

-- | Full Descriptions.
Verbose :: Verbosity

-- | Simple Description (do not redefine other symbols).
Succinct :: Verbosity

-- | Create a data definition using a list of fields, a database of
--   symbols, and a <a>QDefinition</a> (called automatically by
--   <tt>SCSSub</tt> program).
ddefn :: Fields -> SystemInformation -> DataDefinition -> LabelledContent

-- | Create a derivation from a chunk's attributes. This follows the TM,
--   DD, GD, or IM definition automatically (called automatically by
--   <tt>SCSSub</tt> program).
derivation :: (HasDerivation c, HasShortName c, Referable c) => c -> Contents

-- | Create a general definition using a list of fields, database of
--   symbols, and a <a>GenDefn</a> (general definition) chunk (called
--   automatically by <tt>SCSSub</tt> program).
gdefn :: Fields -> SystemInformation -> GenDefn -> LabelledContent

-- | Helper function to make a list of <a>Sentence</a>s from the current
--   system information and something that has a <a>UID</a>.
helperRefs :: HasUID t => t -> SystemInformation -> Sentence

-- | Creates a reference as a <a>Sentence</a> by finding if the <a>UID</a>
--   is in one of the possible data sets contained in the
--   <a>SystemInformation</a> database.
helpToRefField :: UID -> SystemInformation -> Sentence

-- | Create an instance model using a list of fields, database of symbols,
--   and an <a>InstanceModel</a> chunk (called automatically by
--   <tt>SCSSub</tt> program).
instanceModel :: Fields -> SystemInformation -> InstanceModel -> LabelledContent

-- | Create a theoretical model using a list of fields to be displayed, a
--   database of symbols, and a <a>RelationConcept</a> (called
--   automatically by <tt>SCSSub</tt> program).
tmodel :: Fields -> SystemInformation -> TheoryModel -> LabelledContent
instance GHC.Show.Show Drasil.DocumentLanguage.Definitions.Field

module Drasil.DocumentLanguage.TraceabilityMatrix

-- | Helper type that takes two sets of <a>UID</a>s and a <a>ChunkDB</a>.
type TraceViewCat = [UID] -> ChunkDB -> [UID]

-- | Generalized traceability matrix introduction: appends references to
--   the traceability matrices in <a>Sentence</a> form and wraps in
--   <a>Contents</a>. Usually references the four tables generally found in
--   this section (in order of being mentioned).
traceMIntro :: [LabelledContent] -> [Sentence] -> Contents

-- | Helper that finds the traceability matrix references (things being
--   referenced).
traceMReferees :: ([UID] -> [UID]) -> ChunkDB -> [UID]

-- | Helper that finds the traceability matrix references (things that are
--   referring to other things).
traceMReferrers :: ([UID] -> [UID]) -> ChunkDB -> [UID]

-- | Helper that finds the header of a traceability matrix.
traceMHeader :: (ChunkDB -> [UID]) -> SystemInformation -> [Sentence]

-- | Helper that finds the headers of the traceability matrix columns.
traceMColHeader :: ([UID] -> [UID]) -> SystemInformation -> [Sentence]

-- | Helper that finds the headers of the traceability matrix rows.
traceMRowHeader :: ([UID] -> [UID]) -> SystemInformation -> [Sentence]

-- | Helper that makes the columns of a traceability matrix.
traceMColumns :: ([UID] -> [UID]) -> ([UID] -> [UID]) -> ChunkDB -> [[UID]]

-- | Helper that makes references of the form "<tt>reference</tt> shows the
--   dependencies of <tt>something</tt>".
tableShows :: (Referable a, HasShortName a) => a -> Sentence -> Sentence

-- | Generates a traceability table. Takes a <a>UID</a> for the table, a
--   description (<a>Sentence</a>), columns (<a>TraceViewCat</a>), rows
--   (<a>TraceViewCat</a>), and <a>SystemInformation</a>.
generateTraceTableView :: UID -> Sentence -> [TraceViewCat] -> [TraceViewCat] -> SystemInformation -> LabelledContent

-- | Helper that makes sure the rows and columns of a traceability matrix
--   have substance.
ensureItems :: UID -> [a] -> [a]

-- | Helper that finds the layout <a>UID</a>s of a traceability matrix.
layoutUIDs :: [TraceViewCat] -> ChunkDB -> [UID] -> [UID]

-- | Helper that filters a traceability matrix given a function.
traceViewFilt :: HasUID a => (a -> Bool) -> Getting (UMap a) ChunkDB (UMap a) -> TraceViewCat

-- | Helper that is similar to <a>traceViewFilt</a>, but the filter is
--   always <a>True</a>.
traceView :: HasUID a => Getting (UMap a) ChunkDB (UMap a) -> TraceViewCat

-- | Turns a <a>Concept</a> into a <a>TraceViewCat</a> via its domain.
traceViewCC :: Concept c => c -> TraceViewCat

module Drasil.DocumentLanguage.Core

-- | Type synonym for clarity.
type System = Sentence

-- | Type synonym for clarity.
type DocKind = Sentence

-- | A document description is made up of document sections.
type DocDesc = [DocSection]

-- | Document sections are either Reference, Introduction, or Specific
--   System Description sections (for now!).
data DocSection
TableOfContents :: DocSection
RefSec :: RefSec -> DocSection
IntroSec :: IntroSec -> DocSection
StkhldrSec :: StkhldrSec -> DocSection
GSDSec :: GSDSec -> DocSection
SSDSec :: SSDSec -> DocSection
ReqrmntSec :: ReqrmntSec -> DocSection
LCsSec :: LCsSec -> DocSection
UCsSec :: UCsSec -> DocSection
TraceabilitySec :: TraceabilitySec -> DocSection
AuxConstntSec :: AuxConstntSec -> DocSection
Bibliography :: DocSection
AppndxSec :: AppndxSec -> DocSection
OffShelfSolnsSec :: OffShelfSolnsSec -> DocSection

-- | Reference section. Contents are top level followed by a list of
--   subsections.
data RefSec
RefProg :: Contents -> [RefTab] -> RefSec

-- | Reference subsections (tables) made out of units or symbols (can be
--   customized).
data RefTab

-- | Default table of units.
[TUnits] :: RefTab

-- | Customized introduction.
[TUnits'] :: [TUIntro] -> ([UnitDefn] -> LabelledContent) -> RefTab

-- | Adds an introduction for a table of symbols.
[TSymb] :: [TSIntro] -> RefTab

-- | Allows Lens functions in addition to an introduction for a table of
--   symbols.
[TSymb'] :: LFunc -> [TSIntro] -> RefTab

-- | Default.
[TAandA] :: RefTab

-- | For creating a table of symbols introduction
data TSIntro

-- | Typographic conventions used.
TypogConvention :: [TConvention] -> TSIntro

-- | Symbol ordering (defaults to alphabetical).
SymbOrder :: TSIntro

-- | Symbol conventions match specified literature.
SymbConvention :: [Literature] -> TSIntro

-- | Purpose of the Table of Symbols.
TSPurpose :: TSIntro

-- | Definition of vector components.
VectorUnits :: TSIntro

-- | Possible typographic conventions.
data TConvention

-- | How vectors are emphasized.
Vector :: Emphasis -> TConvention

-- | Verbatim for specialized conventions.
Verb :: Sentence -> TConvention

-- | How to handle emphasis of words.
data Emphasis
Bold :: Emphasis
Italics :: Emphasis

-- | Types of literature.
data Literature

-- | Literature (with a Topic).
Lit :: Topic -> Literature

-- | Existing documentation for (singular topic).
Doc :: Topic -> Literature

-- | Existing documentation for (plural version of topic).
Doc' :: Topic -> Literature

-- | Manual.
Manual :: Topic -> Literature

-- | Type synonym for clarity.
type Topic = IdeaDict

-- | For creating the table of units introduction.
data TUIntro

-- | System of units (defaults to SI).
System :: TUIntro

-- | Sentence about derived units being used alongside SI.
Derived :: TUIntro

-- | Purpose of the table of units.
TUPurpose :: TUIntro

-- | Lens (lookup) functions (currently for TSymb).
data LFunc
[Term] :: LFunc
[Defn] :: LFunc
[TermExcept] :: [DefinedQuantityDict] -> LFunc
[DefnExcept] :: [DefinedQuantityDict] -> LFunc
[TAD] :: LFunc

-- | Introduction section. Contents are top level followed by a list of
--   subsections.
data IntroSec

-- | Temporary, will be modified once we've figured out more about the
--   section.
IntroProg :: Sentence -> Sentence -> [IntroSub] -> IntroSec

-- | Introduction subsections.
data IntroSub

-- | Describes purpose of the system.
[IPurpose] :: [Sentence] -> IntroSub

-- | Describes scope of the system.
[IScope] :: Sentence -> IntroSub

-- | Describes characteristics of the system.
[IChar] :: [Sentence] -> [Sentence] -> [Sentence] -> IntroSub

-- | Organises the section.
[IOrgSec] :: Sentence -> CI -> Section -> Sentence -> IntroSub

-- | Stakeholders section (wraps stakeholders subsections
--   <a>StkhldrSub</a>).
newtype StkhldrSec
StkhldrProg :: [StkhldrSub] -> StkhldrSec

-- | Stakeholders subsections.
data StkhldrSub

-- | May have a client.
[Client] :: CI -> Sentence -> StkhldrSub

-- | May have a customer.
[Cstmr] :: CI -> StkhldrSub

-- | General System Description section (wraps <a>GSDSub</a> subsections).
newtype GSDSec
GSDProg :: [GSDSub] -> GSDSec

-- | General System Description subsections.
data GSDSub

-- | System context.
[SysCntxt] :: [Contents] -> GSDSub

-- | User characteristics.
[UsrChars] :: [Contents] -> GSDSub

-- | System constraints.
[SystCons] :: [Contents] -> [Section] -> GSDSub

-- | Specific System Description section. Contains a list of subsections
--   (<a>SSDSub</a>).
newtype SSDSec
SSDProg :: [SSDSub] -> SSDSec

-- | Specific System Description subsections.
data SSDSub

-- | System description problems.
[SSDProblem] :: ProblemDescription -> SSDSub

-- | Solution characteristics specification.
[SSDSolChSpec] :: SolChSpec -> SSDSub

-- | Problem Description section. Contains an intro or title,
--   <a>Section</a>s, and problem description subsections (<a>PDSub</a>).
data ProblemDescription
[PDProg] :: Sentence -> [Section] -> [PDSub] -> ProblemDescription

-- | Problem Description subsections.
data PDSub

-- | Terms and definitions.
[TermsAndDefs] :: Concept c => Maybe Sentence -> [c] -> PDSub

-- | Physical system description.
[PhySysDesc] :: Idea a => a -> [Sentence] -> LabelledContent -> [Contents] -> PDSub

-- | Goals.
[Goals] :: [Sentence] -> [ConceptInstance] -> PDSub

-- | Solution Characteristics Specification section. Contains a list of
--   subsections (<a>SCSSub</a>).
data SolChSpec
[SCSProg] :: [SCSSub] -> SolChSpec

-- | Solution Characteristics Specification subsections.
data SCSSub

-- | Assumptions.
[Assumptions] :: [ConceptInstance] -> SCSSub

-- | Theory Models.
[TMs] :: [Sentence] -> Fields -> [TheoryModel] -> SCSSub

-- | General Definitions.
[GDs] :: [Sentence] -> Fields -> [GenDefn] -> DerivationDisplay -> SCSSub

-- | Data Definitions.
[DDs] :: [Sentence] -> Fields -> [DataDefinition] -> DerivationDisplay -> SCSSub

-- | Instance Models.
[IMs] :: [Sentence] -> Fields -> [InstanceModel] -> DerivationDisplay -> SCSSub

-- | Constraints.
[Constraints] :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => Sentence -> [c] -> SCSSub

-- | Properties of a correct solution.
[CorrSolnPpties] :: (Quantity c, Constrained c) => [c] -> [Contents] -> SCSSub

-- | Choose whether to show or hide the derivation of an expression.
data DerivationDisplay
ShowDerivation :: DerivationDisplay
HideDerivation :: DerivationDisplay

-- | Requirements section. Contains a list of subsections (<a>ReqsSub</a>).
newtype ReqrmntSec
ReqsProg :: [ReqsSub] -> ReqrmntSec

-- | Requirements subsections.
data ReqsSub

-- | Functional requirements. LabelledContent needed for tables.
[FReqsSub'] :: [ConceptInstance] -> [LabelledContent] -> ReqsSub

-- | Functional requirements. LabelledContent needed for tables.
[FReqsSub] :: [ConceptInstance] -> [LabelledContent] -> ReqsSub

-- | Non-functional requirements.
[NonFReqsSub] :: [ConceptInstance] -> ReqsSub

-- | Likely Changes section.
newtype LCsSec
LCsProg :: [ConceptInstance] -> LCsSec

-- | Unlikely Changes section.
newtype UCsSec
UCsProg :: [ConceptInstance] -> UCsSec

-- | Traceability Matices and Graphs section. Contains configurations
--   (<a>TraceConfig</a>).
newtype TraceabilitySec
TraceabilityProg :: [TraceConfig] -> TraceabilitySec

-- | Traceability Matices and Graphs configurations.
data TraceConfig
TraceConfig :: UID -> [Sentence] -> Sentence -> [TraceViewCat] -> [TraceViewCat] -> TraceConfig
getTraceConfigUID :: TraceConfig -> UID

-- | Off-The-Shelf Solutions section.
newtype OffShelfSolnsSec
OffShelfSolnsProg :: [Contents] -> OffShelfSolnsSec

-- | Values of Auxiliary Constants section.
data AuxConstntSec
AuxConsProg :: CI -> [QDefinition] -> AuxConstntSec

-- | Appendix section.
newtype AppndxSec
AppndxProg :: [Contents] -> AppndxSec

-- | Holds all of the different kinds of sections. Defines as a plate with
--   an applicative functor.
data DLPlate f
DLPlate :: (DocSection -> f DocSection) -> (RefSec -> f RefSec) -> (IntroSec -> f IntroSec) -> (IntroSub -> f IntroSub) -> (StkhldrSec -> f StkhldrSec) -> (StkhldrSub -> f StkhldrSub) -> (GSDSec -> f GSDSec) -> (GSDSub -> f GSDSub) -> (SSDSec -> f SSDSec) -> (SSDSub -> f SSDSub) -> (ProblemDescription -> f ProblemDescription) -> (PDSub -> f PDSub) -> (SCSSub -> f SCSSub) -> (ReqrmntSec -> f ReqrmntSec) -> (ReqsSub -> f ReqsSub) -> (LCsSec -> f LCsSec) -> (UCsSec -> f UCsSec) -> (TraceabilitySec -> f TraceabilitySec) -> (OffShelfSolnsSec -> f OffShelfSolnsSec) -> (AuxConstntSec -> f AuxConstntSec) -> (AppndxSec -> f AppndxSec) -> DLPlate f
[docSec] :: DLPlate f -> DocSection -> f DocSection
[refSec] :: DLPlate f -> RefSec -> f RefSec
[introSec] :: DLPlate f -> IntroSec -> f IntroSec
[introSub] :: DLPlate f -> IntroSub -> f IntroSub
[stkSec] :: DLPlate f -> StkhldrSec -> f StkhldrSec
[stkSub] :: DLPlate f -> StkhldrSub -> f StkhldrSub
[gsdSec] :: DLPlate f -> GSDSec -> f GSDSec
[gsdSub] :: DLPlate f -> GSDSub -> f GSDSub
[ssdSec] :: DLPlate f -> SSDSec -> f SSDSec
[ssdSub] :: DLPlate f -> SSDSub -> f SSDSub
[pdSec] :: DLPlate f -> ProblemDescription -> f ProblemDescription
[pdSub] :: DLPlate f -> PDSub -> f PDSub
[scsSub] :: DLPlate f -> SCSSub -> f SCSSub
[reqSec] :: DLPlate f -> ReqrmntSec -> f ReqrmntSec
[reqSub] :: DLPlate f -> ReqsSub -> f ReqsSub
[lcsSec] :: DLPlate f -> LCsSec -> f LCsSec
[ucsSec] :: DLPlate f -> UCsSec -> f UCsSec
[traceSec] :: DLPlate f -> TraceabilitySec -> f TraceabilitySec
[offShelfSec] :: DLPlate f -> OffShelfSolnsSec -> f OffShelfSolnsSec
[auxConsSec] :: DLPlate f -> AuxConstntSec -> f AuxConstntSec
[appendSec] :: DLPlate f -> AppndxSec -> f AppndxSec
instance Data.Generics.Multiplate.Multiplate Drasil.DocumentLanguage.Core.DLPlate
instance GHC.Show.Show Drasil.DocumentLanguage.Core.Emphasis

module Drasil.Sections.AuxiliaryConstants

-- | Gets the auxiliary constant values given an introductory <a>Idea</a>
--   and a <a>QDefinition</a>.
valsOfAuxConstantsF :: Idea a => a -> [QDefinition] -> Section

-- | Helper that gets a table of constants from a <a>QDefinition</a>.
tableOfConstants :: [QDefinition] -> LabelledContent
tableOfConstantsRef :: Reference

module Drasil.Sections.GeneralSystDesc

-- | Default General System Description introduction.
genSysIntro :: Contents

-- | User Characeristics.
usrCharsF :: [Contents] -> Section

-- | System Constraints. Generalized if no constraints, but if there are,
--   they can be passed through.
systCon :: [Contents] -> [Section] -> Section

-- | System Context.
sysContxt :: [Contents] -> Section

module Drasil.Sections.Introduction

-- | Constructor for the Organization of the Document section. Parameters
--   should be an introduction (<a>Sentence</a>), a resource for a bottom
--   up approach (<a>NamedIdea</a>), reference to that resource
--   (<a>Section</a>), and any other relevant information
--   (<a>Sentence</a>).
orgSec :: NamedIdea c => Sentence -> c -> Section -> Sentence -> Section

-- | Constructor for the Introduction section. In order, the parameters
--   are:
--   
--   <ul>
--   <li>problemIntroduction - <a>Sentence</a> introducing the specific
--   example problem.</li>
--   <li>programDefinition - <a>Sentence</a> definition of the specific
--   example.</li>
--   <li>subSections - List of subsections for this section.</li>
--   </ul>
introductionSection :: Sentence -> Sentence -> [Section] -> Section

-- | Constructor for Purpose of Document subsection. Takes a list of
--   <a>Sentence</a>s that:
--   
--   <ul>
--   <li>Given one element: explains the purpose of the specific
--   example.</li>
--   <li>Given two elements: explains the purpose of the specific example
--   and the development process.</li>
--   <li>Otherwise: Uses the default
--   <a>developmentProcessParagraph</a>.</li>
--   </ul>
purposeOfDoc :: [Sentence] -> Section

-- | Constructor for the Scope of Requirements subsection. Takes in the
--   main requirement for the program.
scopeOfRequirements :: Sentence -> Section

-- | Constructor for characteristics of the intended reader subsection.
--   Takes the program name (<a>Idea</a>), assumed knowledge
--   (<a>Sentence</a>s), topic-related subjects (<a>Sentence</a>s),
--   knowledge assets (<a>Sentence</a>s), and references (<a>Section</a>).
charIntRdrF :: Idea a => a -> [Sentence] -> [Sentence] -> [Sentence] -> Section -> Section

-- | Combines <a>purpDocPara1</a> and <a>developmentProcessParagraph</a>.
--   Verbosity controls if the <a>developmentProcessParagraph</a> is added
--   or not.
purpDoc :: CI -> Verbosity -> [Sentence]

module Drasil.Sections.ReferenceMaterial

-- | Default Reference section introduction.
intro :: Contents

module Drasil.Sections.Requirements

-- | Adds a generalized introduction for a Non-Fucntional Requirements
--   section. Takes in the contents of that section.
fReqF :: [Contents] -> Section

-- | Prepends a <a>ConceptInstance</a> referencing an input-value table to
--   a list of other <a>ConceptInstance</a>s.
fullReqs :: (Quantity i, MayHaveUnit i) => [i] -> Sentence -> [ConceptInstance] -> [ConceptInstance]

-- | Prepends given LabelledContent to an input-value table.
fullTables :: (Quantity i, MayHaveUnit i) => [i] -> [LabelledContent] -> [LabelledContent]

-- | Creates a <a>ConceptInstance</a> of input values.
inReq :: Sentence -> ConceptInstance

-- | Creates a generalized input-value table for the Requirements section.
inTable :: (Quantity i, MayHaveUnit i) => [i] -> LabelledContent

-- | Creates an Input Data Table for use in the Functional Requirments
--   section. Takes a list of wrapped variables and something that is
--   <a>Referable</a>.
mkInputPropsTable :: (Quantity i, MayHaveUnit i, HasShortName r, Referable r) => [i] -> r -> LabelledContent
mkQRTuple :: (Quantity i, MayHaveUnit i, HasShortName i, Referable i) => [i] -> [(QuantityDict, Sentence)]
mkQRTupleRef :: (Quantity i, MayHaveUnit i, HasShortName r, Referable r) => [i] -> [r] -> [(QuantityDict, Sentence)]

-- | Creates a table for use in the Functional Requirments section. Takes a
--   list of tuples containing variables and sources, a label, and a
--   caption.
mkValsSourceTable :: (Quantity i, MayHaveUnit i) => [(i, Sentence)] -> String -> Sentence -> LabelledContent

-- | Adds a generalized introduction for a Non-Fucntional Requirements
--   section. Takes in the contents of that section.
nfReqF :: [Contents] -> Section

-- | Wrapper for <a>reqIntro</a>.
reqF :: [Section] -> Section

-- | Reference for the Required Inputs table.
reqInputsRef :: Reference

module Drasil.DocDecl

-- | A Software Requirements Specification Declaration is made up of all
--   necessary sections (<a>DocSection</a>s).
type SRSDecl = [DocSection]

-- | Contains all the different sections needed for a full SRS
--   (<a>SRSDecl</a>).
data DocSection

-- | Table of Contents
TableOfContents :: DocSection

-- | Reference.
RefSec :: RefSec -> DocSection

-- | Introduction.
IntroSec :: IntroSec -> DocSection

-- | Stakeholders.
StkhldrSec :: StkhldrSec -> DocSection

-- | General System Description.
GSDSec :: GSDSec -> DocSection

-- | Specific System Description.
SSDSec :: SSDSec -> DocSection

-- | Requirements.
ReqrmntSec :: ReqrmntSec -> DocSection

-- | Likely Changes.
LCsSec :: DocSection

-- | Unlikely Changes.
UCsSec :: DocSection

-- | Traceability.
TraceabilitySec :: TraceabilitySec -> DocSection

-- | Auxiliary Constants.
AuxConstntSec :: AuxConstntSec -> DocSection

-- | Bibliography.
Bibliography :: DocSection

-- | Appendix.
AppndxSec :: AppndxSec -> DocSection

-- | Off the Shelf Solutions.
OffShelfSolnsSec :: OffShelfSolnsSec -> DocSection

-- | Specific System Description section (wraps <a>SSDSub</a> subsections).
newtype SSDSec
SSDProg :: [SSDSub] -> SSDSec

-- | Specific System Description subsections.
data SSDSub

-- | Problem description.
[SSDProblem] :: ProblemDescription -> SSDSub

-- | Solution characteristics.
[SSDSolChSpec] :: SolChSpec -> SSDSub

-- | Problem Description section.
data ProblemDescription
[PDProg] :: Sentence -> [Section] -> [PDSub] -> ProblemDescription

-- | Problem Description subsections.
data PDSub

-- | Terms and Definitions.
[TermsAndDefs] :: Concept c => Maybe Sentence -> [c] -> PDSub

-- | Physical System Description.
[PhySysDesc] :: Idea a => a -> [Sentence] -> LabelledContent -> [Contents] -> PDSub

-- | Goals.
[Goals] :: [Sentence] -> PDSub

-- | Solution Characteristics Specification section (wraps <a>SCSSub</a>
--   subsections).
data SolChSpec
[SCSProg] :: [SCSSub] -> SolChSpec

-- | Solution Characteristics Specification subsections.
data SCSSub

-- | Assumptions.
[Assumptions] :: SCSSub

-- | Theory models.
[TMs] :: [Sentence] -> Fields -> SCSSub

-- | General definitions.
[GDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Data definitions.
[DDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Instance models.
[IMs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Constraints.
[Constraints] :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => Sentence -> [c] -> SCSSub

-- | Properties of a correct solution.
[CorrSolnPpties] :: (Quantity c, Constrained c) => [c] -> [Contents] -> SCSSub

-- | Requirements section (wraps <a>ReqsSub</a> subsections).
newtype ReqrmntSec
ReqsProg :: [ReqsSub] -> ReqrmntSec

-- | Requirements subsections.
data ReqsSub

-- | Functional requirements. <a>LabelledContent</a> for tables (includes
--   input values).
[FReqsSub] :: Sentence -> [LabelledContent] -> ReqsSub

-- | Functional requirements. <a>LabelledContent</a> for tables (no input
--   values).
[FReqsSub'] :: [LabelledContent] -> ReqsSub

-- | Non-Functional requirements.
[NonFReqsSub] :: ReqsSub

-- | Creates the document description (translates <a>SRSDecl</a> into a
--   more usable form for generating documents).
mkDocDesc :: SystemInformation -> SRSDecl -> DocDesc

module Drasil.Sections.SpecificSystemDescription

-- | Specific System Description section builder.
specSysDescr :: [Section] -> Section

-- | Describes a problem the system is needed to accomplish.
probDescF :: Sentence -> [Section] -> Section

-- | Creates the Terms and Definitions section. Can take a (<a>Just</a>
--   <a>Sentence</a>) if needed or <a>Nothing</a> if not. Also takes
--   <a>Concept</a>s that contain the definitions.
termDefnF :: Concept c => Maybe Sentence -> [c] -> Section

-- | Similar to <a>termDefnF</a>, except does not take definitions from the
--   list of terms.
termDefnF' :: Maybe Sentence -> [Contents] -> Section

-- | General introduction for the Physical System Description section.
physSystDesc :: Idea a => a -> [Sentence] -> LabelledContent -> [Contents] -> Section

-- | General constructor for the Goal Statement section. Takes the given
--   inputs (<a>Sentence</a>s) and the descriptions (<a>Contents</a>).
goalStmtF :: [Sentence] -> [Contents] -> Section

-- | General introduction for the Solution Characteristics Specification
--   section. Takes the program name and a section of instance models.
solutionCharSpecIntro :: Idea a => a -> Section -> Contents

-- | Creates an Assumptions section by prepending a general introduction to
--   other related <a>Contents</a>.
assumpF :: [Contents] -> Section

-- | Wrapper for <tt>thModelIntro</tt>. Takes the program name and other
--   <a>Contents</a>.
thModF :: Idea a => a -> [Contents] -> Section

-- | Creates a General Definitions section with a general introduction.
--   Takes in relevant general definitions (<a>Contents</a>). Use empty
--   list if none are needed.
genDefnF :: [Contents] -> Section
dataDefnF :: Sentence -> [Contents] -> Section

-- | Constructor for Instance Models. Takes the problem description, data
--   definition, theoretical model, general definition, and any other
--   relevant contents.
inModelF :: Section -> Section -> Section -> Section -> [Contents] -> Section

-- | Constructor for Data Constraints section. Takes a trailing
--   <a>Sentence</a> (use <a>EmptyS</a> if none) and data constraints.
datConF :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => Sentence -> [c] -> Section

-- | Creates the input Data Constraints Table.
inDataConstTbl :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => [c] -> LabelledContent

-- | Creates the output Data Constraints Table.
outDataConstTbl :: (Quantity c, Constrained c) => [c] -> LabelledContent

-- | Creates the Properties of a Correct Solution section.
propCorSolF :: (Quantity c, Constrained c) => [c] -> [Contents] -> Section

-- | General <a>Sentence</a> that describes some auxiliary specifications
--   of the system.
auxSpecSent :: Sentence

-- | Input/Output Data Constraint Table references.
tInDataCstRef :: Reference

-- | Input/Output Data Constraint Table references.
tOutDataCstRef :: Reference

-- | Helper for making a <a>ConceptInstance</a> with a reference to the
--   system information. Used to find where a particular assumption is
--   referenced.
helperCI :: ConceptInstance -> SystemInformation -> ConceptInstance

-- | Section stubs for implicit referencing of different models and
--   definitions.
tmStub :: Section

-- | Section stubs for implicit referencing of different models and
--   definitions.
ddStub :: Section

-- | Section stubs for implicit referencing of different models and
--   definitions.
imStub :: Section

-- | Section stubs for implicit referencing of different models and
--   definitions.
pdStub :: Section

module Drasil.ExtractDocDesc

-- | Extracts <a>Sentence</a>s from a document description.
getDocDesc :: DocDesc -> [Sentence]

-- | Extracts expressions from the document description (<a>DocDesc</a>)
--   and default <a>DLPlate</a>.
egetDocDesc :: DocDesc -> [DisplayExpr]

-- | Creates a <a>Sentence</a> plate.
sentencePlate :: Monoid a => ([Sentence] -> a) -> DLPlate (Constant a)

module Drasil.Sections.Stakeholders

-- | General stakeholders introduction.
stakeholderIntro :: Contents

-- | Constructor for making a client. Takes in the system name and details
--   regarding the client for the specific program.
tClientF :: Idea a => a -> Sentence -> Section

-- | Constructor for making a customer. Takes in the system name.
tCustomerF :: Idea a => a -> Section


-- | Standard code to make a table of symbols.
module Drasil.Sections.TableOfAbbAndAcronyms

-- | The actual table creation function.
tableAbbAccGen :: Idea s => [s] -> LabelledContent

-- | Table of abbreviations and acronyms reference.
tableAbbAccRef :: Reference

module Drasil.Sections.TableOfContents

-- | Finds all possible sections and subsections to make a Table of
--   Contents.
toToC :: DocSection -> ItemType

-- | Finds whether the Table of Contents is in a SRSDecl.
findToC :: [DocSection] -> ShowTableOfContents

module Drasil.Sections.TableOfSymbols

-- | Table of Symbols creation function. Takes in a <a>Stage</a>,
--   <a>Symbol</a>s, and something that turns the symbols into a
--   <a>Sentence</a>. Filters non-symbol chunks and checks for duplicate
--   symbol error.
table :: (Quantity s, MayHaveUnit s) => Stage -> [s] -> (s -> Sentence) -> LabelledContent

-- | Makes a reference to the Table of Symbols.
symbTableRef :: Reference

-- | Default is term and given introduction.
--   
--   Table of symbols constructor.
tsymb :: [TSIntro] -> RefTab

-- | Similar to <a>tsymb</a>, but has a default Defn for the LFunc type.
--   Still has a given introduction.
--   
--   Table of symbols constructor.
tsymb' :: [TSIntro] -> RefTab

-- | Table of symbols constructor. Takes a custom function and
--   introduction.
tsymb'' :: [TSIntro] -> LFunc -> RefTab

-- | Table of symbols introduction builder. Used by <tt>mkRefSec</tt>.
tsIntro :: [TSIntro] -> Contents

module Drasil.Sections.TableOfUnits

-- | Creates the Table of Units with SI name in the <a>Description</a>
--   column.
tOfUnitDesc :: IsUnit s => [s] -> LabelledContent

-- | Creates the Table of Units with an "SI Name" column.
tOfUnitSIName :: IsUnit s => [s] -> LabelledContent

-- | Makes a reference to the Table of Units.
unitTableRef :: Reference

-- | Table of units with an SI Name.
--   
--   Table of units constructors.
tunit :: [TUIntro] -> RefTab

-- | Table of units with SI name in the description column.
--   
--   Table of units constructors.
tunit' :: [TUIntro] -> RefTab

-- | Table of units introduction builder. Used by <tt>mkRefSec</tt>.
tuIntro :: [TUIntro] -> Contents

-- | Default table of units intro that contains the system, derivation, and
--   purpose.
defaultTUI :: [TUIntro]

module Drasil.Sections.TraceabilityMandGs

-- | Makes a Traceability Table/Matrix that contains Items of Different
--   Sections.
generateTraceTable :: SystemInformation -> LabelledContent

-- | Traceabiliy viewing assumptions. Takes a <a>UID</a> and a
--   <tt>ChunkDB</tt>. Returns a list of <a>UID</a>s.
tvAssumps :: TraceViewCat

-- | Traceabiliy viewing data definitions. Takes a <a>UID</a> and a
--   <tt>ChunkDB</tt>. Returns a list of <a>UID</a>s.
tvDataDefns :: TraceViewCat

-- | Traceabiliy viewing general definitions. Takes a <a>UID</a> and a
--   <tt>ChunkDB</tt>. Returns a list of <a>UID</a>s.
tvGenDefns :: TraceViewCat

-- | Traceabiliy viewing theory models. Takes a <a>UID</a> and a
--   <tt>ChunkDB</tt>. Returns a list of <a>UID</a>s.
tvTheoryModels :: TraceViewCat

-- | Traceabiliy viewing instance models. Takes a <a>UID</a> and a
--   <tt>ChunkDB</tt>. Returns a list of <a>UID</a>s.
tvInsModels :: TraceViewCat

-- | Traceabiliy viewing goals. Takes a <a>UID</a> and a <tt>ChunkDB</tt>.
--   Returns a list of <a>UID</a>s.
tvGoals :: TraceViewCat

-- | Traceabiliy viewing requirements. Takes a <a>UID</a> and a
--   <tt>ChunkDB</tt>. Returns a list of <a>UID</a>s.
tvReqs :: TraceViewCat

-- | Traceabiliy viewing changes. Takes a <a>UID</a> and a
--   <tt>ChunkDB</tt>. Returns a list of <a>UID</a>s.
tvChanges :: TraceViewCat

-- | Assumptions on the assumptions of a traceabiliy matrix.
traceMatAssumpAssump :: TraceConfig

-- | Other assumptions of the traceability matrix
traceMatAssumpOther :: TraceConfig

-- | Refinement of the traceability matrix.
traceMatRefinement :: TraceConfig

-- | Records other requirements. Converts the <a>SystemInformation</a> into
--   a <a>TraceConfig</a>.
traceMatOtherReq :: SystemInformation -> TraceConfig

-- | Contains traceability matrix assumptions, other assumptions,
--   refinement, and other requirements.
traceMatStandard :: SystemInformation -> [TraceConfig]

module Drasil.DocumentLanguage.TraceabilityGraph

-- | Wrapper for <a>traceMIntro</a> and <a>traceGIntro</a>. Turns
--   references (<a>LabelledContent</a>s), trailing notes
--   (<a>Sentence</a>s), and any other needed contents to create a
--   Traceability <a>Section</a>. Traceability graphs generate as both a
--   link and a figure for convenience.
traceMGF :: [LabelledContent] -> [Sentence] -> [Contents] -> String -> [Section] -> Section

-- | Generalized traceability graph introduction: appends references to the
--   traceability graphs in <a>Sentence</a> form and wraps in
--   <a>Contents</a>. Usually references the five graphs as defined in
--   <a>GraphInfo</a>.
traceGIntro :: [UID] -> [Sentence] -> [UnlabelledContent]

-- | Extracts traceability graph inforomation from filled-in
--   <a>SystemInformation</a>.
mkGraphInfo :: SystemInformation -> GraphInfo

-- | Gets the node family of a graph based on the given section and system
--   information. Also applies a given colour to the node family.
mkGraphNodes :: TraceViewCat -> SystemInformation -> String -> NodeFamily

-- | Creates the graph edges based on the relation of the first list of
--   sections to the second. Also needs the system information. Return
--   value is of the form (Section, [Dependencies]).
mkGraphEdges :: [TraceViewCat] -> [TraceViewCat] -> SystemInformation -> [(UID, [UID])]

-- | Helper for making graph edges. Taken from Utils.Drasil's traceability
--   matrix relation finder. But, instead of marking <a>X</a> on two
--   related ideas, it makes them an edge.
makeTGraph :: [String] -> [[String]] -> [String] -> [(String, [String])]

-- | Checker for uids by finding if the <a>UID</a> is in one of the
--   possible data sets contained in the <a>SystemInformation</a> database.
checkUID :: UID -> SystemInformation -> UID

-- | Similar to <a>checkUID</a> but prepends domain for labelling.
checkUIDAbbrev :: SystemInformation -> UID -> String

-- | Similar to <a>checkUID</a> but gets reference addresses for display.
checkUIDRefAdd :: SystemInformation -> UID -> String

-- | Helper that finds the header of a traceability matrix. However, here
--   we use this to get a list of <a>UID</a>s for a traceability graph
--   instead.
traceGHeader :: (ChunkDB -> [UID]) -> SystemInformation -> [UID]

-- | Helper that finds the headers of the traceability matrix rows.
--   However, here we use this to get a list of <a>UID</a>s for a
--   traceability graph instead. This is then used to create the graph
--   edges.
traceGRowHeader :: ([UID] -> [UID]) -> SystemInformation -> [UID]

-- | Helper that makes references of the form "<tt>reference</tt> shows the
--   dependencies of <tt>something</tt>". Only takes a reference <a>UID</a>
--   instead of a <a>Reference</a>.
graphShows :: UID -> Sentence -> Sentence

-- | Description of the <tt>AllvsAll</tt> traceability graph.
allvsallDesc :: Sentence

-- | Create a list of traceability graph references.
traceGLst :: Contents

-- | The Traceability Graph contents.
traceGCon :: String -> [Contents]

-- | Generates traceability graphs as figures on an SRS document.
traceGraphLC :: String -> FilePath -> UID -> LabelledContent

-- | Traceability graph file names.
traceGFiles :: [String]

-- | Traceabiliy graph reference <a>UID</a>s.
traceGUIDs :: [UID]

-- | Create reference paths to traceability graphs given an example name.
--   For <tt>.pdf</tt> links
traceyGraphPaths :: String -> [String]

-- | Create references to traceability graphs given an example name.
--   Primarily used for reference database in examples.
traceyGraphGetRefs :: String -> [Reference]

-- | Gets the path of a traceability graph given an example folder name and
--   the graph name. For <tt>.png</tt> files
traceyGraphPath :: String -> String -> String

-- | Traceability graphs reference path.
resourcePath :: String

-- | Helper to create a list of traceability graph references.
folderList' :: [ItemType]

module Drasil.DocLang.References

-- | All section references used in creating a Software Requirements
--   Specification (SRS).
secRefs :: [Reference]

module Drasil.TraceTable

-- | Creates a dependency plate for <a>UID</a>s.
dependencyPlate :: DLPlate (Constant [(UID, [UID])])

-- | Creates a traceability map from document sections.
generateTraceMap :: [DocSection] -> TraceMap


-- | Start the process of moving away from Document as the main internal
--   representation of information, to something more informative. Over
--   time, we'll want to have a cleaner separation, but doing that all at
--   once would break too much for too long. So we start here instead.
module Drasil.DocumentLanguage

-- | Creates a document from a document description, a title combinator
--   function, and system information.
mkDoc :: SRSDecl -> (IdeaDict -> IdeaDict -> Sentence) -> SystemInformation -> Document
fillcdbSRS :: SRSDecl -> SystemInformation -> SystemInformation

-- | Takes in existing information from the Chunk database to construct a
--   database of references.
fillReferences :: SRSDecl -> SystemInformation -> SystemInformation

-- | Helper that gets references from definitions and models.
dRefToRef :: HasDecRef a => a -> [Reference]

-- | Recursively find all references in a section (meant for getting at
--   <a>LabelledContent</a>).
findAllRefs :: Section -> [Reference]

-- | Helper for filling in the traceability matrix and graph information
--   into the system.
fillTraceSI :: SRSDecl -> SystemInformation -> SystemInformation

-- | Fills in the traceabiliy matrix and graphs section of the system
--   information using the document description.
fillTraceMaps :: DocDesc -> SystemInformation -> SystemInformation

-- | Fills in the requirements section of the system information using the
--   document description.
fillReqs :: DocDesc -> SystemInformation -> SystemInformation

-- | Constructs the unit definitions (<a>UnitDefn</a>s) found in the
--   document description (<a>DocDesc</a>) from a database
--   (<a>ChunkDB</a>).
extractUnits :: DocDesc -> ChunkDB -> [UnitDefn]

-- | Helper for creating the different document sections.
mkSections :: SystemInformation -> DocDesc -> [Section]

-- | Helper for making the Table of Contents section.
mkToC :: DocDesc -> Section

-- | Helper for creating the reference section and subsections. Includes
--   Table of Symbols, Units and Abbreviations and Acronyms.
mkRefSec :: SystemInformation -> DocDesc -> RefSec -> Section

-- | Helper for creating the table of symbols.
mkTSymb :: (Quantity e, Concept e, Eq e, MayHaveUnit e) => [e] -> LFunc -> [TSIntro] -> Section

-- | Makes the Introduction section into a <a>Section</a>.
mkIntroSec :: SystemInformation -> IntroSec -> Section

-- | Helper for making the Stakeholders section.
mkStkhldrSec :: StkhldrSec -> Section

-- | Helper for making the General System Description section.
mkGSDSec :: GSDSec -> Section

-- | Helper for making the Specific System Description section.
mkSSDSec :: SystemInformation -> SSDSec -> Section

-- | Helper for making the Specific System Description Problem section.
mkSSDProb :: SystemInformation -> ProblemDescription -> Section

-- | Helper for making the Solution Characteristics Specification section.
mkSolChSpec :: SystemInformation -> SolChSpec -> Section

-- | Helper for making the Requirements section.
mkReqrmntSec :: ReqrmntSec -> Section

-- | Helper for making the Likely Changes section.
mkLCsSec :: LCsSec -> Section

-- | Helper for making the Unikely Changes section.
mkUCsSec :: UCsSec -> Section

-- | Helper for making the Traceability Matrices and Graphs section.
mkTraceabilitySec :: TraceabilitySec -> SystemInformation -> Section

-- | Helper for making the Off-the-Shelf Solutions section.
mkOffShelfSolnSec :: OffShelfSolnsSec -> Section

-- | Helper for making the Values of Auxiliary Constants section.
mkAuxConsSec :: AuxConstntSec -> Section

-- | Helper for making the References section.
mkBib :: BibRef -> Section

-- | Helper for making the Appendix section.
mkAppndxSec :: AppndxSec -> Section

module Drasil.DocLang

-- | A Software Requirements Specification Declaration is made up of all
--   necessary sections (<a>DocSection</a>s).
type SRSDecl = [DocSection]

-- | Contains all the different sections needed for a full SRS
--   (<a>SRSDecl</a>).
data DocSection

-- | Table of Contents
TableOfContents :: DocSection

-- | Reference.
RefSec :: RefSec -> DocSection

-- | Introduction.
IntroSec :: IntroSec -> DocSection

-- | Stakeholders.
StkhldrSec :: StkhldrSec -> DocSection

-- | General System Description.
GSDSec :: GSDSec -> DocSection

-- | Specific System Description.
SSDSec :: SSDSec -> DocSection

-- | Requirements.
ReqrmntSec :: ReqrmntSec -> DocSection

-- | Likely Changes.
LCsSec :: DocSection

-- | Unlikely Changes.
UCsSec :: DocSection

-- | Traceability.
TraceabilitySec :: TraceabilitySec -> DocSection

-- | Auxiliary Constants.
AuxConstntSec :: AuxConstntSec -> DocSection

-- | Bibliography.
Bibliography :: DocSection

-- | Appendix.
AppndxSec :: AppndxSec -> DocSection

-- | Off the Shelf Solutions.
OffShelfSolnsSec :: OffShelfSolnsSec -> DocSection

-- | Requirements section (wraps <a>ReqsSub</a> subsections).
newtype ReqrmntSec
ReqsProg :: [ReqsSub] -> ReqrmntSec

-- | Requirements subsections.
data ReqsSub

-- | Functional requirements. <a>LabelledContent</a> for tables (includes
--   input values).
[FReqsSub] :: Sentence -> [LabelledContent] -> ReqsSub

-- | Functional requirements. <a>LabelledContent</a> for tables (no input
--   values).
[FReqsSub'] :: [LabelledContent] -> ReqsSub

-- | Non-Functional requirements.
[NonFReqsSub] :: ReqsSub

-- | Problem Description subsections.
data PDSub

-- | Terms and Definitions.
[TermsAndDefs] :: Concept c => Maybe Sentence -> [c] -> PDSub

-- | Physical System Description.
[PhySysDesc] :: Idea a => a -> [Sentence] -> LabelledContent -> [Contents] -> PDSub

-- | Goals.
[Goals] :: [Sentence] -> PDSub

-- | Problem Description section.
data ProblemDescription
[PDProg] :: Sentence -> [Section] -> [PDSub] -> ProblemDescription

-- | Specific System Description section (wraps <a>SSDSub</a> subsections).
newtype SSDSec
SSDProg :: [SSDSub] -> SSDSec

-- | Specific System Description subsections.
data SSDSub

-- | Problem description.
[SSDProblem] :: ProblemDescription -> SSDSub

-- | Solution characteristics.
[SSDSolChSpec] :: SolChSpec -> SSDSub

-- | Solution Characteristics Specification subsections.
data SCSSub

-- | Assumptions.
[Assumptions] :: SCSSub

-- | Theory models.
[TMs] :: [Sentence] -> Fields -> SCSSub

-- | General definitions.
[GDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Data definitions.
[DDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Instance models.
[IMs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Constraints.
[Constraints] :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => Sentence -> [c] -> SCSSub

-- | Properties of a correct solution.
[CorrSolnPpties] :: (Quantity c, Constrained c) => [c] -> [Contents] -> SCSSub

-- | Solution Characteristics Specification section (wraps <a>SCSSub</a>
--   subsections).
data SolChSpec
[SCSProg] :: [SCSSub] -> SolChSpec

-- | Creates a document from a document description, a title combinator
--   function, and system information.
mkDoc :: SRSDecl -> (IdeaDict -> IdeaDict -> Sentence) -> SystemInformation -> Document

-- | Helper for filling in the traceability matrix and graph information
--   into the system.
fillTraceSI :: SRSDecl -> SystemInformation -> SystemInformation
fillcdbSRS :: SRSDecl -> SystemInformation -> SystemInformation

-- | Recursively find all references in a section (meant for getting at
--   <a>LabelledContent</a>).
findAllRefs :: Section -> [Reference]

-- | Appendix section.
newtype AppndxSec
AppndxProg :: [Contents] -> AppndxSec

-- | Values of Auxiliary Constants section.
data AuxConstntSec
AuxConsProg :: CI -> [QDefinition] -> AuxConstntSec

-- | Choose whether to show or hide the derivation of an expression.
data DerivationDisplay
ShowDerivation :: DerivationDisplay
HideDerivation :: DerivationDisplay

-- | How to handle emphasis of words.
data Emphasis
Bold :: Emphasis
Italics :: Emphasis

-- | Off-The-Shelf Solutions section.
newtype OffShelfSolnsSec
OffShelfSolnsProg :: [Contents] -> OffShelfSolnsSec

-- | General System Description section (wraps <a>GSDSub</a> subsections).
newtype GSDSec
GSDProg :: [GSDSub] -> GSDSec

-- | General System Description subsections.
data GSDSub

-- | System context.
[SysCntxt] :: [Contents] -> GSDSub

-- | User characteristics.
[UsrChars] :: [Contents] -> GSDSub

-- | System constraints.
[SystCons] :: [Contents] -> [Section] -> GSDSub

-- | Introduction section. Contents are top level followed by a list of
--   subsections.
data IntroSec

-- | Temporary, will be modified once we've figured out more about the
--   section.
IntroProg :: Sentence -> Sentence -> [IntroSub] -> IntroSec

-- | Introduction subsections.
data IntroSub

-- | Describes purpose of the system.
[IPurpose] :: [Sentence] -> IntroSub

-- | Describes scope of the system.
[IScope] :: Sentence -> IntroSub

-- | Describes characteristics of the system.
[IChar] :: [Sentence] -> [Sentence] -> [Sentence] -> IntroSub

-- | Organises the section.
[IOrgSec] :: Sentence -> CI -> Section -> Sentence -> IntroSub

-- | Lens (lookup) functions (currently for TSymb).
data LFunc
[Term] :: LFunc
[Defn] :: LFunc
[TermExcept] :: [DefinedQuantityDict] -> LFunc
[DefnExcept] :: [DefinedQuantityDict] -> LFunc
[TAD] :: LFunc

-- | Types of literature.
data Literature

-- | Literature (with a Topic).
Lit :: Topic -> Literature

-- | Existing documentation for (plural version of topic).
Doc' :: Topic -> Literature

-- | Manual.
Manual :: Topic -> Literature

-- | Reference section. Contents are top level followed by a list of
--   subsections.
data RefSec
RefProg :: Contents -> [RefTab] -> RefSec

-- | Reference subsections (tables) made out of units or symbols (can be
--   customized).
data RefTab

-- | Default table of units.
[TUnits] :: RefTab

-- | Customized introduction.
[TUnits'] :: [TUIntro] -> ([UnitDefn] -> LabelledContent) -> RefTab

-- | Adds an introduction for a table of symbols.
[TSymb] :: [TSIntro] -> RefTab

-- | Allows Lens functions in addition to an introduction for a table of
--   symbols.
[TSymb'] :: LFunc -> [TSIntro] -> RefTab

-- | Default.
[TAandA] :: RefTab

-- | Stakeholders section (wraps stakeholders subsections
--   <a>StkhldrSub</a>).
newtype StkhldrSec
StkhldrProg :: [StkhldrSub] -> StkhldrSec

-- | Stakeholders subsections.
data StkhldrSub

-- | May have a client.
[Client] :: CI -> Sentence -> StkhldrSub

-- | May have a customer.
[Cstmr] :: CI -> StkhldrSub

-- | Possible typographic conventions.
data TConvention

-- | How vectors are emphasized.
Vector :: Emphasis -> TConvention

-- | Verbatim for specialized conventions.
Verb :: Sentence -> TConvention

-- | Traceability Matices and Graphs section. Contains configurations
--   (<a>TraceConfig</a>).
newtype TraceabilitySec
TraceabilityProg :: [TraceConfig] -> TraceabilitySec

-- | For creating a table of symbols introduction
data TSIntro

-- | Typographic conventions used.
TypogConvention :: [TConvention] -> TSIntro

-- | Symbol ordering (defaults to alphabetical).
SymbOrder :: TSIntro

-- | Symbol conventions match specified literature.
SymbConvention :: [Literature] -> TSIntro

-- | Purpose of the Table of Symbols.
TSPurpose :: TSIntro

-- | Definition of vector components.
VectorUnits :: TSIntro

-- | For creating the table of units introduction.
data TUIntro

-- | System of units (defaults to SI).
System :: TUIntro

-- | Sentence about derived units being used alongside SI.
Derived :: TUIntro

-- | Purpose of the table of units.
TUPurpose :: TUIntro
getTraceConfigUID :: TraceConfig -> UID

-- | Fields that should be displayed in definitions.
data Field
Label :: Field
Symbol :: Field
Units :: Field
DefiningEquation :: Field
Description :: Verbosity -> InclUnits -> Field
Input :: Field
Output :: Field
InConstraints :: Field
OutConstraints :: Field
Notes :: Field
Source :: Field
RefBy :: Field

-- | Synonym for a list of <a>Field</a>s.
type Fields = [Field]

-- | Determines whether to include or ignore units.
data InclUnits

-- | In description field (for other symbols).
IncludeUnits :: InclUnits

-- | Refers to the verbosity of statements.
data Verbosity

-- | Full Descriptions.
Verbose :: Verbosity

-- | Simple Description (do not redefine other symbols).
Succinct :: Verbosity

-- | Create a data definition using a list of fields, a database of
--   symbols, and a <a>QDefinition</a> (called automatically by
--   <tt>SCSSub</tt> program).
ddefn :: Fields -> SystemInformation -> DataDefinition -> LabelledContent

-- | A database that contains <a>TheoryModel</a>s, <a>GenDefn</a>s,
--   <a>DataDefinition</a>s, and <a>InstanceModel</a>s.
data ModelDB
ddRefDB :: ModelDB -> RefMap DataDefinition

-- | Constructor for creating a <a>ModelDB</a>.
mdb :: [TheoryModel] -> [GenDefn] -> [DataDefinition] -> [InstanceModel] -> ModelDB

-- | Extracts traceability graph inforomation from filled-in
--   <a>SystemInformation</a>.
mkGraphInfo :: SystemInformation -> GraphInfo

-- | Create references to traceability graphs given an example name.
--   Primarily used for reference database in examples.
traceyGraphGetRefs :: String -> [Reference]

-- | Helper that gets a table of constants from a <a>QDefinition</a>.
tableOfConstants :: [QDefinition] -> LabelledContent

-- | Combines <a>purpDocPara1</a> and <a>developmentProcessParagraph</a>.
--   Verbosity controls if the <a>developmentProcessParagraph</a> is added
--   or not.
purpDoc :: CI -> Verbosity -> [Sentence]

-- | Default Reference section introduction.
intro :: Contents

-- | Creates a <a>ConceptInstance</a> of input values.
inReq :: Sentence -> ConceptInstance

-- | Creates a generalized input-value table for the Requirements section.
inTable :: (Quantity i, MayHaveUnit i) => [i] -> LabelledContent

-- | Creates an Input Data Table for use in the Functional Requirments
--   section. Takes a list of wrapped variables and something that is
--   <a>Referable</a>.
mkInputPropsTable :: (Quantity i, MayHaveUnit i, HasShortName r, Referable r) => [i] -> r -> LabelledContent
mkQRTuple :: (Quantity i, MayHaveUnit i, HasShortName i, Referable i) => [i] -> [(QuantityDict, Sentence)]
mkQRTupleRef :: (Quantity i, MayHaveUnit i, HasShortName r, Referable r) => [i] -> [r] -> [(QuantityDict, Sentence)]

-- | Creates a table for use in the Functional Requirments section. Takes a
--   list of tuples containing variables and sources, a label, and a
--   caption.
mkValsSourceTable :: (Quantity i, MayHaveUnit i) => [(i, Sentence)] -> String -> Sentence -> LabelledContent

-- | Reference for the Required Inputs table.
reqInputsRef :: Reference

-- | General <a>Sentence</a> that describes some auxiliary specifications
--   of the system.
auxSpecSent :: Sentence

-- | Similar to <a>termDefnF</a>, except does not take definitions from the
--   list of terms.
termDefnF' :: Maybe Sentence -> [Contents] -> Section

-- | Creates the input Data Constraints Table.
inDataConstTbl :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => [c] -> LabelledContent

-- | Creates the output Data Constraints Table.
outDataConstTbl :: (Quantity c, Constrained c) => [c] -> LabelledContent

-- | Table of abbreviations and acronyms reference.
tableAbbAccRef :: Reference

-- | Makes a reference to the Table of Symbols.
symbTableRef :: Reference

-- | Default is term and given introduction.
--   
--   Table of symbols constructor.
tsymb :: [TSIntro] -> RefTab

-- | Table of symbols constructor. Takes a custom function and
--   introduction.
tsymb'' :: [TSIntro] -> LFunc -> RefTab

-- | Makes a reference to the Table of Units.
unitTableRef :: Reference

-- | Table of units with an SI Name.
--   
--   Table of units constructors.
tunit :: [TUIntro] -> RefTab

-- | Table of units with SI name in the description column.
--   
--   Table of units constructors.
tunit' :: [TUIntro] -> RefTab

-- | Contains traceability matrix assumptions, other assumptions,
--   refinement, and other requirements.
traceMatStandard :: SystemInformation -> [TraceConfig]

-- | Records other requirements. Converts the <a>SystemInformation</a> into
--   a <a>TraceConfig</a>.
traceMatOtherReq :: SystemInformation -> TraceConfig

-- | Extracts <a>Sentence</a>s from a document description.
getDocDesc :: DocDesc -> [Sentence]

-- | Extracts expressions from the document description (<a>DocDesc</a>)
--   and default <a>DLPlate</a>.
egetDocDesc :: DocDesc -> [DisplayExpr]

-- | Creates a traceability map from document sections.
generateTraceMap :: [DocSection] -> TraceMap

-- | All section references used in creating a Software Requirements
--   Specification (SRS).
secRefs :: [Reference]
