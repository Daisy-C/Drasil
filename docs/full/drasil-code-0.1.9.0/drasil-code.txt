-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Code SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-code
@version 0.1.9.0


-- | Defines chunk types for use in code generation.
module Language.Drasil.Chunk.Code

-- | A <a>CodeIdea</a> must include some code and its name.
class CodeIdea c

-- | Name of the idea.
codeName :: CodeIdea c => c -> String

-- | Code chunk associated with the idea.
codeChunk :: CodeIdea c => c -> CodeChunk

-- | Basic chunk representation in the code generation context. Contains a
--   QuantityDict and the kind of code (variable or function).
data CodeChunk
CodeC :: QuantityDict -> VarOrFunc -> CodeChunk
[_qc] :: CodeChunk -> QuantityDict
[kind] :: CodeChunk -> VarOrFunc

-- | Chunk representing a variable. The <tt>obv</tt> field represents the
--   object containing this variable, if it is an object field.
data CodeVarChunk
CodeVC :: CodeChunk -> Maybe CodeChunk -> CodeVarChunk
[_ccv] :: CodeVarChunk -> CodeChunk
[_obv] :: CodeVarChunk -> Maybe CodeChunk

-- | Chunk representing a function.
newtype CodeFuncChunk
CodeFC :: CodeChunk -> CodeFuncChunk
[_ccf] :: CodeFuncChunk -> CodeChunk

-- | Details if a piece of code is meant to be a variable or a function.
data VarOrFunc
Var :: VarOrFunc
Func :: VarOrFunc
obv :: Lens' CodeVarChunk (Maybe CodeChunk)

-- | Construct a <a>CodeVarChunk</a> from a <a>Quantity</a>.
quantvar :: (Quantity c, MayHaveUnit c) => c -> CodeVarChunk

-- | Construct a <a>CodeFuncChunk</a> from a <a>Quantity</a>.
quantfunc :: (Quantity c, MayHaveUnit c) => c -> CodeFuncChunk

-- | Combine an Object-type <a>CodeChunk</a> with another <a>CodeChunk</a>
--   to create a new <a>CodeChunk</a> which represents a field of the
--   first. ex. <tt>ccObjVar obj f = obj.f</tt>.
ccObjVar :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk

-- | Get a list of <a>CodeChunk</a>s from an equation.
codevars :: CodeExpr -> ChunkDB -> [CodeVarChunk]

-- | Get a list of <a>CodeChunk</a>s from an equation (no functions).
codevars' :: CodeExpr -> ChunkDB -> [CodeVarChunk]

-- | Make a <a>CodeFuncChunk</a> from a <a>UID</a> in the <a>ChunkDB</a>.
funcResolve :: ChunkDB -> UID -> CodeFuncChunk

-- | Make a <a>CodeVarChunk</a> from a <a>UID</a> in the <a>ChunkDB</a>.
varResolve :: ChunkDB -> UID -> CodeVarChunk
listToArray :: CodeVarChunk -> CodeVarChunk

-- | Convert the program name to an abbreviated <a>String</a> without any
--   special characters.
programName :: CommonIdea c => c -> String

-- | Used when a function name needs to be distinguishable from a variable
--   name.
funcPrefix :: String

-- | A <a>DefiningCodeExpr</a> must have it's underlying chunk defined in
--   the CodeExpr language.
class CodeIdea c => DefiningCodeExpr c
codeExpr :: DefiningCodeExpr c => Lens' c CodeExpr
instance Language.Drasil.Chunk.CodeBase.CodeIdea Language.Drasil.Chunk.CodeBase.CodeChunk
instance Language.Drasil.Chunk.CodeBase.CodeIdea Language.Drasil.Chunk.CodeBase.CodeVarChunk
instance Language.Drasil.Chunk.CodeBase.CodeIdea Language.Drasil.Chunk.CodeBase.CodeFuncChunk

module Language.Drasil.Chunk.ConstraintMap

-- | Constraints map. Contains all <a>Constraint</a>s.
type ConstraintCEMap = Map UID [ConstraintCE]

-- | Type synonym for 'Constraint CodeExpr'
type ConstraintCE = Constraint CodeExpr

-- | Creates a map from <a>UID</a> to <a>Constraint</a>s for constrained
--   chunks.
constraintMap :: (HasUID c, Constrained c) => [c] -> ConstraintCEMap

-- | Returns a pair of a chunk and its physical constraints.
physLookup :: HasUID q => ConstraintCEMap -> q -> (q, [ConstraintCE])

-- | Returns a pair of a chunk and its software constraints.
sfwrLookup :: HasUID q => ConstraintCEMap -> q -> (q, [ConstraintCE])

module Language.Drasil.Chunk.Parameter

-- | Determines whether a parameter is passed by value or by reference.
data PassBy
Val :: PassBy
Ref :: PassBy

-- | Chunk representing a parameter.
data ParameterChunk
PC :: CodeChunk -> PassBy -> ParameterChunk
[_pcc] :: ParameterChunk -> CodeChunk
[passBy] :: ParameterChunk -> PassBy

-- | Automatically chooses <a>PassBy</a> based on <a>Space</a>
--   (<a>Vect</a>ors and <a>Actor</a>s passed by reference).
pcAuto :: CodeIdea c => c -> ParameterChunk

-- | Constructs a pass-by-value parameter.
pcVal :: CodeIdea c => c -> ParameterChunk
instance Language.Drasil.Classes.Core.HasUID Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Classes.NamedIdea Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Classes.Idea Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Classes.HasSpace Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Classes.Core.HasSymbol Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Classes.Quantity Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Chunk.CodeBase.CodeIdea Language.Drasil.Chunk.Parameter.ParameterChunk
instance GHC.Classes.Eq Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Language.Drasil.Chunk.Parameter.ParameterChunk


-- | Defines the <a>Code</a> data type
module Language.Drasil.Code.Code

-- | Represents the generated code as a list of file names and rendered
--   code pairs
newtype Code
Code :: [(FilePath, Doc)] -> Code
[unCode] :: Code -> [(FilePath, Doc)]
spaceToCodeType :: Space -> [CodeType]


-- | Defines QuantityDicts needed in the code generation stage.
module Language.Drasil.Code.CodeQuantityDicts
inFileName :: QuantityDict
inParams :: QuantityDict
consts :: QuantityDict

module Language.Drasil.Code.DataDesc
type DataItem = CodeVarChunk
data DataDesc'
DD :: Data' -> Delimiter -> DataDesc' -> DataDesc'
End :: Data' -> DataDesc'
data Data'
Datum :: DataItem' -> Data'
Data :: NonEmpty DataItem' -> Integer -> Delimiter -> Data'
Junk :: Data'
data DataItem'
DI :: CodeVarChunk -> [Delimiter] -> DataItem'
type Delimiter = String
dataDesc :: [Data'] -> Delimiter -> DataDesc'
singleton' :: CodeVarChunk -> Data'
list :: CodeVarChunk -> [Delimiter] -> Data'
interwovenLists :: [DataItem'] -> Integer -> Delimiter -> Data'
junk :: Data'
type DataDesc = [Data]
type Delim = Char
data Data
Singleton :: DataItem -> Data
JunkData :: Data
Line :: LinePattern -> Delim -> Data
Lines :: LinePattern -> Maybe Integer -> Delim -> Data
data LinePattern
Straight :: [DataItem] -> LinePattern
Repeat :: [DataItem] -> LinePattern
singleton :: DataItem -> Data
junkLine :: Data
singleLine :: LinePattern -> Delim -> Data
multiLine :: LinePattern -> Delim -> Data
multiLine' :: LinePattern -> Integer -> Delim -> Data
straight :: [DataItem] -> LinePattern
repeated :: [DataItem] -> LinePattern
isJunk :: Data -> Bool
isLine :: Data -> Bool
isLines :: Data -> Bool
getInputs :: DataDesc -> [DataItem]
getDataInputs :: Data -> [DataItem]
getPatternInputs :: LinePattern -> [DataItem]

module Language.Drasil.Code.Imperative.Build.AST

-- | Used to build commands. Type synonym of a <a>MakeString</a> for
--   clarity.
type CommandFragment = MakeString

-- | Type for holding the build name.
data BuildName
BMain :: BuildName
BPackName :: BuildName
BPack :: BuildName -> BuildName
BWithExt :: BuildName -> Ext -> BuildName

-- | File extentions.
data Ext
CodeExt :: Ext
OtherExt :: MakeString -> Ext

-- | Builds may only require themselves or have a dependency.
data BuildDependencies
BcSource :: BuildDependencies
BcSingle :: BuildName -> BuildDependencies

-- | Build configuration. In the function parameter, the first parameter is
--   the list of inputs, 2nd parameter is the output file, 3rd parameter is
--   additional name if needed. The two <a>Maybe</a> <a>BuildName</a>s are
--   the output file and the additional name. Also holds the build
--   dependencies.
data BuildConfig
BuildConfig :: ([CommandFragment] -> CommandFragment -> CommandFragment -> [BuildCommand]) -> Maybe BuildName -> Maybe BuildName -> BuildDependencies -> BuildConfig

-- | Run commands as they are or through an interpreter.
data RunType
Standalone :: RunType
Interpreter :: [CommandFragment] -> RunType

-- | Contains all the information needed to run a command.
data Runnable
Runnable :: BuildName -> NameOpts -> RunType -> Runnable

-- | Configures a document based on dependencies and commands.
data DocConfig
DocConfig :: Dependencies -> [Command] -> DocConfig

-- | Naming options. Includes a package separator and an option for
--   including extensions.
data NameOpts
NameOpts :: String -> Bool -> NameOpts
[packSep] :: NameOpts -> String
[includeExt] :: NameOpts -> Bool

-- | Default name options. Packages separately by "/" and includes
--   extension.
nameOpts :: NameOpts

-- | Build commands. Made up of <a>CommandFragment</a>s.
type BuildCommand = [CommandFragment]

-- | Interpreter commands are made up of a <a>String</a>.
type InterpreterCommand = String

-- | Interpreter options are made up of a <a>String</a>.
type InterpreterOption = String

-- | Translates a <a>String</a> into a command fragment.
asFragment :: String -> CommandFragment

-- | OS default variable (Windows). Calls <a>mkWindowsVar</a>.
osClassDefault :: String -> String -> String -> CommandFragment

-- | Constructor for a build configuration. No additional name included.
buildAll :: ([CommandFragment] -> CommandFragment -> [BuildCommand]) -> BuildName -> Maybe BuildConfig

-- | Constructor for a build configuration with an additional name
--   included.
buildAllAdditionalName :: ([CommandFragment] -> CommandFragment -> CommandFragment -> [BuildCommand]) -> BuildName -> BuildName -> Maybe BuildConfig

-- | Constructor for a build configuration. No additional name included,
--   but takes in a single dependency.
buildSingle :: ([CommandFragment] -> CommandFragment -> [BuildCommand]) -> BuildName -> BuildName -> Maybe BuildConfig

-- | Default runnable information.
nativeBinary :: Maybe Runnable

-- | Default target extension is ".exe".
executable :: BuildName

-- | Default library has the extentions ".dll, .dylib, .so".
sharedLibrary :: BuildName

-- | Constructor for a runnable command that goes through an interpreter.
interp :: BuildName -> NameOpts -> InterpreterCommand -> [InterpreterOption] -> Maybe Runnable

-- | Constructs a runnable command that goes through an interpreter (for
--   main module file).
interpMM :: InterpreterCommand -> Maybe Runnable

-- | Main module.
mainModule :: BuildName

-- | Main module with a default code extension.
mainModuleFile :: BuildName

-- | Module for an in-code package.
inCodePackage :: BuildName -> BuildName

-- | Adds an extension to a <a>BuildName</a>.
withExt :: BuildName -> String -> BuildName

-- | C compiler command fragment.
cCompiler :: CommandFragment

-- | C++ compiler command fragment.
cppCompiler :: CommandFragment

-- | Helper for configuring doxygen documentation.
doxygenDocConfig :: FilePath -> DocConfig

module Language.Drasil.Code.Imperative.Build.Import

-- | Creates a Makefile.
makeBuild :: Maybe DocConfig -> Maybe BuildConfig -> Maybe Runnable -> GOOLState -> ProgData -> Doc
instance Build.Drasil.Make.Import.RuleTransformer Language.Drasil.Code.Imperative.Build.Import.CodeHarness


-- | Defines the underlying data types used in the package extension.
module Language.Drasil.Code.Imperative.GOOL.Data

-- | The underlying data type for auxiliary files in all renderers.
data AuxData

-- | Constructor for auxiliary files.
ad :: FilePath -> Doc -> AuxData

-- | The underlying data type for packages in all renderers.
data PackData

-- | Constructor for package data.
packD :: ProgData -> [AuxData] -> PackData


-- | Contains the high-level functionality to create <a>Code</a> and then
--   produce the actual generated code files
module Language.Drasil.Code.CodeGeneration

-- | Takes code
makeCode :: [FileData] -> [AuxData] -> Code

-- | Creates the requested <a>Code</a> by producing files
createCodeFiles :: Code -> IO ()

module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer

-- | "doxConfig".
--   
--   Common syntax for several renderers.
doxConfigName :: String

-- | "Makefile".
--   
--   Common syntax for several renderers.
makefileName :: String

-- | "input.txt".
--   
--   Common syntax for several renderers.
sampleInputName :: String

-- | "README.md".
--   
--   Common syntax for several renderers.
readMeName :: String


-- | Defines functions for reading values from a file corresponding to a
--   DataDesc
module Language.Drasil.Code.Imperative.ReadInput

-- | Defines the DataDesc for the file containing a sample data set, which
--   a user must supply if they want to generate a sample input file.
sampleInputDD :: [CodeVarChunk] -> DataDesc'

-- | Reads data from a file and converts the values to <a>Expr</a>s. The
--   file must be formatted according to the <a>DataDesc'</a> passed as a
--   parameter.
readWithDataDesc :: FilePath -> DataDesc' -> IO [Expr]

module Language.Drasil.Code.Imperative.WriteInput

-- | Generate a sample input file.
makeInputFile :: ChunkDB -> DataDesc -> [Expr] -> Doc


-- | Defines an enumerated type of target languages for code generation.
module Language.Drasil.Code.Lang
data Lang
Cpp :: Lang
CSharp :: Lang
Java :: Lang
Python :: Lang
Swift :: Lang
instance GHC.Show.Show Language.Drasil.Code.Lang.Lang
instance GHC.Classes.Eq Language.Drasil.Code.Lang.Lang


-- | Defines a structure to contain scientifically-relevant information
--   about an ODE.
module Language.Drasil.Data.ODEInfo
data ODEInfo
ODEInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> CodeExpr -> [CodeExpr] -> ODEOptions -> ODEInfo
[indepVar] :: ODEInfo -> CodeVarChunk
[depVar] :: ODEInfo -> CodeVarChunk
[otherVars] :: ODEInfo -> [CodeVarChunk]
[tInit] :: ODEInfo -> CodeExpr
[tFinal] :: ODEInfo -> CodeExpr
[initVal] :: ODEInfo -> CodeExpr
[odeSyst] :: ODEInfo -> [CodeExpr]
[odeOpts] :: ODEInfo -> ODEOptions
odeInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> CodeExpr -> [CodeExpr] -> ODEOptions -> ODEInfo
data ODEOptions
ODEOpts :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions
[solveMethod] :: ODEOptions -> ODEMethod
[absTol] :: ODEOptions -> CodeExpr
[relTol] :: ODEOptions -> CodeExpr
[stepSize] :: ODEOptions -> CodeExpr
[initValFstOrd] :: ODEOptions -> CodeExpr
odeOptions :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions
data ODEMethod
RK45 :: ODEMethod
BDF :: ODEMethod
Adams :: ODEMethod

module Language.Drasil.Chunk.CodeDefinition

-- | A chunk for pairing a mathematical definition with a <a>CodeChunk</a>.
data CodeDefinition

-- | The definition may be specialized to use ODEs.
data DefinitionType
Definition :: DefinitionType
ODE :: DefinitionType

-- | Constructs a <a>CodeDefinition</a> where the underlying
--   <a>CodeChunk</a> is for a function.
qtoc :: (Quantity q, DefiningExpr q, MayHaveUnit q) => q -> CodeDefinition

-- | Constructs a <a>CodeDefinition</a> where the underlying
--   <a>CodeChunk</a> is for a variable.
qtov :: QDefinition -> CodeDefinition

-- | Constructs a <a>CodeDefinition</a> for an ODE.
odeDef :: ODEInfo -> CodeDefinition
auxExprs :: Lens' CodeDefinition [CodeExpr]
defType :: Lens' CodeDefinition DefinitionType
instance Language.Drasil.Classes.Core.HasUID Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Classes.NamedIdea Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Classes.Idea Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Classes.HasSpace Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Classes.Core.HasSymbol Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Classes.Quantity Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Chunk.CodeBase.CodeIdea Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance GHC.Classes.Eq Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Chunk.CodeBase.DefiningCodeExpr Language.Drasil.Chunk.CodeDefinition.CodeDefinition


-- | Defines an AST for defining Modules
module Language.Drasil.Mod
data Class
ClassDef :: Name -> Maybe Name -> Description -> [StateVariable] -> [Func] -> Class
[className] :: Class -> Name
[implements] :: Class -> Maybe Name
[classDesc] :: Class -> Description
[stateVars] :: Class -> [StateVariable]
[methods] :: Class -> [Func]
data StateVariable
SV :: ScopeTag -> CodeVarChunk -> StateVariable
[svScope] :: StateVariable -> ScopeTag
[stVar] :: StateVariable -> CodeVarChunk
data Func
FDef :: FuncDef -> Func
FData :: FuncData -> Func
data FuncData
[FuncData] :: Name -> Description -> DataDesc -> FuncData
data FuncDef
[FuncDef] :: Name -> Description -> [ParameterChunk] -> Space -> Maybe Description -> [FuncStmt] -> FuncDef
[CtorDef] :: Name -> Description -> [ParameterChunk] -> [Initializer] -> [FuncStmt] -> FuncDef
data FuncStmt
[FAsg] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FAsgIndex] :: CodeVarChunk -> Integer -> CodeExpr -> FuncStmt

-- | For-loop; Variable, Start, Stop, Step, Body
[FFor] :: CodeVarChunk -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt
[FForEach] :: CodeVarChunk -> CodeExpr -> [FuncStmt] -> FuncStmt
[FWhile] :: CodeExpr -> [FuncStmt] -> FuncStmt
[FCond] :: CodeExpr -> [FuncStmt] -> [FuncStmt] -> FuncStmt
[FRet] :: CodeExpr -> FuncStmt
[FThrow] :: String -> FuncStmt
[FTry] :: [FuncStmt] -> [FuncStmt] -> FuncStmt
[FContinue] :: FuncStmt
[FDecDef] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FFuncDef] :: CodeFuncChunk -> [ParameterChunk] -> [FuncStmt] -> FuncStmt
[FVal] :: CodeExpr -> FuncStmt
[FMulti] :: [FuncStmt] -> FuncStmt
[FAppend] :: CodeExpr -> CodeExpr -> FuncStmt
type Initializer = (CodeVarChunk, CodeExpr)
data Mod
Mod :: Name -> Description -> [Import] -> [Class] -> [Func] -> Mod
type Name = String
type Version = String
type Description = String
type Import = String

-- | Define an assignment statement
($:=) :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt

-- | Define a public state variable based on the given CodeVarChunk
pubStateVar :: CodeVarChunk -> StateVariable

-- | Define a private state variable based on the given CodeVarChunk
privStateVar :: CodeVarChunk -> StateVariable

-- | Define a class with the given Name, Description, state variables, and
--   methods.
classDef :: Name -> Description -> [StateVariable] -> [Func] -> Class

-- | Define a class that implements an interface. 1st Name is class name,
--   2nd is interface name.
classImplements :: Name -> Name -> Description -> [StateVariable] -> [Func] -> Class

-- | Define a constructor, with the given name, description, parameters,
--   initializers (variable-value pairs), and FuncStmts for the body.
ctorDef :: Name -> Description -> [ParameterChunk] -> [Initializer] -> [FuncStmt] -> Func

-- | Define a for-loop. Quantity is for the iteration variable, Expr is the
--   upper bound at that variable (the variable will start with a value of
--   0). [FuncStmt] is for the loop body.
ffor :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a for-loop. Quantity is for the iteration variable, and 3
--   CodeExprs for the start, stop, step numbers. [FuncStmt] is for the
--   loop body.
fforRange :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a declare-define statement.
fDecDef :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt

-- | Get the name of a function.
fname :: Func -> Name

-- | Returns the list of CodeVarChunks that are used in the list of
--   FuncStmts but are not declared in any of the FuncStmts.
fstdecl :: ChunkDB -> [FuncStmt] -> [CodeVarChunk]

-- | Define a function that reads data from a file, according to the given
--   DataDesc.
funcData :: Name -> Description -> DataDesc -> Func

-- | Define a function by providing the FuncStmts for its body. Other
--   parameters are function name, description, list of parameters, space
--   of the returned value, and description of the returned value.
funcDef :: (Quantity c, MayHaveUnit c) => Name -> Description -> [c] -> Space -> Maybe Description -> [FuncStmt] -> Func

-- | Like funcDef but uses ParameterChunks to represent the parameters.
funcDefParams :: Name -> Description -> [ParameterChunk] -> Space -> Maybe Description -> [FuncStmt] -> Func

-- | Define a Mod with the given Name, Description, Classes, and Functions.
packmod :: Name -> Description -> [Class] -> [Func] -> Mod

-- | Define a Mod that requires some library imports, with the given Name,
--   Description, Classes, and Functions.
packmodRequires :: Name -> Description -> [Import] -> [Class] -> [Func] -> Mod


-- | Defines an AST to be paired with an ExternalLibrary for a specific
--   use-case
module Language.Drasil.Code.ExternalLibraryCall
type ExternalLibraryCall = [StepGroupFill]
data StepGroupFill
SGF :: Int -> [StepFill] -> StepGroupFill
data StepFill
CallF :: FunctionIntFill -> StepFill
LoopF :: NonEmpty FunctionIntFill -> [CodeExpr] -> NonEmpty StepFill -> StepFill
StatementF :: [CodeVarChunk] -> [CodeExpr] -> StepFill
newtype FunctionIntFill
FIF :: [ArgumentFill] -> FunctionIntFill
data ArgumentFill
UserDefinedArgF :: Maybe NamedArgument -> CodeExpr -> ArgumentFill
BasicF :: CodeExpr -> ArgumentFill
FnF :: [ParameterFill] -> StepFill -> ArgumentFill
ClassF :: [StateVariable] -> ClassInfoFill -> ArgumentFill
RecordF :: [CodeExpr] -> ArgumentFill
data ParameterFill
NameableParamF :: ParameterChunk -> ParameterFill
UserDefined :: ParameterChunk -> ParameterFill
data ClassInfoFill
RegularF :: [MethodInfoFill] -> ClassInfoFill
ImplementsF :: [MethodInfoFill] -> ClassInfoFill
data MethodInfoFill
CIF :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill
MIF :: [ParameterFill] -> NonEmpty StepFill -> MethodInfoFill
externalLibCall :: [StepGroupFill] -> ExternalLibraryCall
choiceStepsFill :: Int -> [StepFill] -> StepGroupFill
choiceStepFill :: Int -> StepFill -> StepGroupFill
mandatoryStepFill :: StepFill -> StepGroupFill
mandatoryStepsFill :: [StepFill] -> StepGroupFill
callStepFill :: FunctionIntFill -> StepFill
libCallFill :: [ArgumentFill] -> FunctionIntFill
userDefinedArgFill :: CodeExpr -> ArgumentFill
basicArgFill :: CodeExpr -> ArgumentFill
functionArgFill :: [ParameterFill] -> StepFill -> ArgumentFill
customObjArgFill :: [StateVariable] -> ClassInfoFill -> ArgumentFill
recordArgFill :: [CodeExpr] -> ArgumentFill
unnamedParamFill :: CodeVarChunk -> ParameterFill
unnamedParamPBVFill :: CodeVarChunk -> ParameterFill
userDefinedParamFill :: CodeVarChunk -> ParameterFill
customClassFill :: [MethodInfoFill] -> ClassInfoFill
implementationFill :: [MethodInfoFill] -> ClassInfoFill
constructorInfoFill :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill
methodInfoFill :: [ParameterFill] -> [StepFill] -> MethodInfoFill
appendCurrSolFill :: CodeVarChunk -> StepFill
populateSolListFill :: CodeVarChunk -> [StepFill]
assignArrayIndexFill :: CodeVarChunk -> [CodeExpr] -> StepFill
assignSolFromObjFill :: CodeVarChunk -> StepFill
initSolListFromArrayFill :: CodeVarChunk -> StepFill
initSolListWithValFill :: CodeVarChunk -> CodeExpr -> StepFill
solveAndPopulateWhileFill :: FunctionIntFill -> CodeExpr -> FunctionIntFill -> CodeVarChunk -> StepFill
returnExprListFill :: [CodeExpr] -> StepFill
fixedStatementFill :: StepFill
initSolWithValFill :: CodeVarChunk -> CodeExpr -> StepFill


-- | Defines a language for specifying external library use scenarios
module Language.Drasil.Code.ExternalLibrary
type ExternalLibrary = [StepGroup]

-- | A step can be a call to an external library function or method.
data Step
Call :: FunctionInterface -> Step

-- | A while loop -- function calls in the condition, other conditions,
--   steps for the body
Loop :: NonEmpty FunctionInterface -> ([CodeExpr] -> Condition) -> NonEmpty Step -> Step

-- | For when a statement is needed, but does not interface with the
--   external library
Statement :: ([CodeVarChunk] -> [CodeExpr] -> FuncStmt) -> Step

-- | The first item in the requires list should be where the function being
--   called is defined
data FunctionInterface
FI :: NonEmpty Requires -> FuncType -> CodeFuncChunk -> [Argument] -> Maybe Result -> FunctionInterface

-- | The result of a function call can be assigned to a variable or
--   returned
data Result
Assign :: CodeVarChunk -> Result
Return :: Result
data Argument
Arg :: Maybe NamedArgument -> ArgumentInfo -> Argument
data ArgumentInfo

-- | An argument not dependent on use case
LockedArg :: CodeExpr -> ArgumentInfo

-- | An argument dependent on the use case. Maybe is the variable if it
--   needs to be declared and defined prior to calling.
Basic :: Space -> Maybe CodeVarChunk -> ArgumentInfo

-- | A function-type argument, with a single Step for the body.
Fn :: CodeFuncChunk -> [Parameter] -> Step -> ArgumentInfo

-- | An argument that is an object of a class that must be implemented in
--   the calling program. Parameters: Requires, description, object,
--   constructor, class info
Class :: [Requires] -> Description -> CodeVarChunk -> CodeFuncChunk -> ClassInfo -> ArgumentInfo

-- | An argument that is an object of a record class defined by the
--   external library, where some fields need to be set by the calling
--   program. Parameters: Requires, constructor, object, fields. First
--   Require should be where the record type is defined.
Record :: NonEmpty Requires -> CodeFuncChunk -> CodeVarChunk -> [CodeVarChunk] -> ArgumentInfo
data Parameter
LockedParam :: ParameterChunk -> Parameter
NameableParam :: Space -> Parameter

-- | For classes that need to be generated in the calling program. May be a
--   regular class or a class that implements an interface from the
--   external library.
data ClassInfo
Regular :: [MethodInfo] -> ClassInfo
Implements :: String -> [MethodInfo] -> ClassInfo

-- | Constructor: description, known parameters, body. (CodeFuncChunk for
--   constructor is not here because it is higher up in the AST, at the
--   Class node)
data MethodInfo
CI :: Description -> [Parameter] -> [Step] -> MethodInfo

-- | Method, description, known parameters, maybe return description, body
MI :: CodeFuncChunk -> Description -> [Parameter] -> Maybe Description -> NonEmpty Step -> MethodInfo
data FuncType
Function :: FuncType
Method :: CodeVarChunk -> FuncType
Constructor :: FuncType

-- | Specifies an external library
externalLib :: [StepGroup] -> ExternalLibrary

-- | To be used when there are multiple options for a group of consecutive
--   steps, where a single use-case-specific factor decides which step
--   group to use
choiceSteps :: [[Step]] -> StepGroup

-- | To be used when there are multiple options for a single step, where a
--   use-case-specific factor decides which step to use.
choiceStep :: [Step] -> StepGroup

-- | Specifies a step which must exist in some form in every use case.
mandatoryStep :: Step -> StepGroup

-- | Specifies multiple consecutive steps that all must exist in some form
--   in every use case.
mandatorySteps :: [Step] -> StepGroup
callStep :: FunctionInterface -> Step

-- | Specifies a call to an external library function.
libFunction :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library method.
libMethod :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library function, where the result is
--   assigned to a variable.
libFunctionWithResult :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library method, where the result is
--   assigned to a variable.
libMethodWithResult :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is assigned to a variable.
libConstructor :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library function, where multiple
--   modules from the external library are required, and the result is
--   assigned to a variable.
libConstructorMultiReqs :: [Requires] -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is returned.
constructAndReturn :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies an argument that is not use-case-dependent.
lockedArg :: CodeExpr -> Argument

-- | Specifies a named argument that is not use-case-dependent.
lockedNamedArg :: NamedArgument -> CodeExpr -> Argument

-- | Specifies a use-case-dependent argument whose value can be inlined in
--   the call.
inlineArg :: Space -> Argument

-- | Specifies a use-case-dependent named argument whose value can be
--   inlined in the call.
inlineNamedArg :: NamedArgument -> Space -> Argument

-- | Specifies use-case-dependent argument whose value must be assigned to
--   a variable before being passed in the call.
preDefinedArg :: CodeVarChunk -> Argument

-- | Specifies use-case-dependent named argument whose value must be
--   assigned to a variable before being passed in the call.
preDefinedNamedArg :: NamedArgument -> CodeVarChunk -> Argument

-- | Specifies a function type argument, where the body consists of a
--   single step.
functionArg :: CodeFuncChunk -> [Parameter] -> Step -> Argument

-- | Specifies an argument that is an object of a class that must be
--   defined in the calling program.
customObjArg :: [Requires] -> Description -> CodeVarChunk -> CodeFuncChunk -> ClassInfo -> Argument

-- | Specifies an argument that is an object of a class from the external
--   library. The list of [CodeVarChunk] represents fields of the object
--   that must be set in the calling program.
recordArg :: Requires -> CodeFuncChunk -> CodeVarChunk -> [CodeVarChunk] -> Argument

-- | Specifies a use-case-independent parameter
lockedParam :: CodeVarChunk -> Parameter

-- | Specifies a parameter whose name depends on the use case.
unnamedParam :: Space -> Parameter

-- | Specifies a class that must be implemented in the calling program.
customClass :: [MethodInfo] -> ClassInfo

-- | Specifies an implementation of an interface from the external library.
implementation :: String -> [MethodInfo] -> ClassInfo

-- | Specifies a constructor.
constructorInfo :: CodeFuncChunk -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a method.
methodInfo :: CodeFuncChunk -> Description -> [Parameter] -> Description -> [Step] -> MethodInfo

-- | Specifies a method that does not return anything.
methodInfoNoReturn :: CodeFuncChunk -> Description -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a statement where a current solution is appended to a
--   solution list.
appendCurrSol :: CodeExpr -> Step

-- | Specifies a statement where a solution list is populated by iterating
--   through a solution array.
populateSolList :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk -> [Step]

-- | Specifies statements where every index of an array is assigned a
--   value.
assignArrayIndex :: Step

-- | Specifies a statement where a solution is assigned from the field of
--   an object.
assignSolFromObj :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with the
--   first element of an array.
initSolListFromArray :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with a
--   value.
initSolListWithVal :: Step

-- | FunctionInterface for loop condition, CodeChunk for solution object,
--   CodeChunk for independent var, FunctionInterface for solving,
--   CodeChunk for soln array to populate with
solveAndPopulateWhile :: FunctionInterface -> CodeVarChunk -> CodeVarChunk -> FunctionInterface -> CodeVarChunk -> Step

-- | Specifies a statement where a list is returned, where each value of
--   the list -- is explicitly defined.
returnExprList :: Step

-- | Specifies a use-case-independent statement that returns a value.
fixedReturn :: CodeExpr -> Step

-- | Specifies a statement where a single solution is initialized with a
--   value.
initSolWithVal :: Step


-- | Defines a type for representing ODE-solving external libraries.
module Language.Drasil.Data.ODELibPckg
data ODELibPckg
ODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> Maybe FilePath -> [Lang] -> ODELibPckg
[libName] :: ODELibPckg -> Name
[libVers] :: ODELibPckg -> Version
[libSpec] :: ODELibPckg -> ExternalLibrary
[libCall] :: ODELibPckg -> ODEInfo -> ExternalLibraryCall
[libPath] :: ODELibPckg -> Maybe FilePath
[compatibleLangs] :: ODELibPckg -> [Lang]

-- | Makes an ODELibPckg with the given name, ExternalLibrary
--   specification, ExternalLibraryCall specification parameterized by an
--   ODEInfo, local file path to the library, and list of compatible
--   languages.
mkODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> FilePath -> [Lang] -> ODELibPckg

-- | Makes an ODELibPckg with the given name, ExternalLibrary
--   specification, ExternalLibraryCall specification parameterized by an
--   ODEInfo, and list of compatible languages.
mkODELibNoPath :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> [Lang] -> ODELibPckg


-- | Defines the design language for SCS.
module Language.Drasil.Choices
data Choices
Choices :: [Lang] -> Modularity -> Structure -> ConstantStructure -> ConstantRepr -> ConceptMatchMap -> SpaceMatch -> ImplementationType -> [ODELibPckg] -> [ODEInfo] -> ConstraintBehaviour -> ConstraintBehaviour -> [Comments] -> Verbosity -> Visibility -> [Logging] -> FilePath -> [AuxFile] -> Choices
[lang] :: Choices -> [Lang]
[modularity] :: Choices -> Modularity
[inputStructure] :: Choices -> Structure
[constStructure] :: Choices -> ConstantStructure
[constRepr] :: Choices -> ConstantRepr
[conceptMatch] :: Choices -> ConceptMatchMap
[spaceMatch] :: Choices -> SpaceMatch
[impType] :: Choices -> ImplementationType
[odeLib] :: Choices -> [ODELibPckg]
[odes] :: Choices -> [ODEInfo]
[onSfwrConstraint] :: Choices -> ConstraintBehaviour
[onPhysConstraint] :: Choices -> ConstraintBehaviour
[comments] :: Choices -> [Comments]
[doxVerbosity] :: Choices -> Verbosity
[dates] :: Choices -> Visibility
[logging] :: Choices -> [Logging]
[logFile] :: Choices -> FilePath
[auxFiles] :: Choices -> [AuxFile]
data Modularity
Modular :: InputModule -> Modularity
Unmodular :: Modularity
data InputModule
Combined :: InputModule
Separated :: InputModule
inputModule :: Choices -> InputModule
data Structure
Unbundled :: Structure
Bundled :: Structure
data ConstantStructure
Inline :: ConstantStructure
WithInputs :: ConstantStructure
Store :: Structure -> ConstantStructure
data ConstantRepr
Var :: ConstantRepr
Const :: ConstantRepr

-- | Specifies matches between chunks and CodeConcepts, meaning the target
--   language's pre-existing definition of the concept should be used
--   instead of defining a new variable for the concept in the generated
--   code. [CodeConcept] is preferentially-ordered, generator concretizes a
--   ConceptMatchMap to a MatchedConceptMap by checking user's other
--   choices.
type ConceptMatchMap = Map UID [CodeConcept]
type MatchedConceptMap = Map UID CodeConcept
data CodeConcept
Pi :: CodeConcept

-- | Builds a ConceptMatchMap from an association list of chunks and
--   CodeConcepts
matchConcepts :: HasUID c => [(c, [CodeConcept])] -> ConceptMatchMap

-- | Specifies which CodeType should be used to represent each mathematical
--   Space. [CodeType] is preferentially-ordered, first CodeType that does
--   not conflict with other choices will be selected.
type SpaceMatch = Space -> [CodeType]

-- | Builds a SpaceMatch from an association list of Spaces and CodeTypes.
matchSpaces :: [(Space, [CodeType])] -> SpaceMatch
data ImplementationType
Library :: ImplementationType
Program :: ImplementationType
data ConstraintBehaviour
Warning :: ConstraintBehaviour
Exception :: ConstraintBehaviour
data Comments
CommentFunc :: Comments
CommentClass :: Comments
CommentMod :: Comments
data Verbosity
Verbose :: Verbosity
Quiet :: Verbosity
data Visibility
Show :: Visibility
Hide :: Visibility
data Logging
LogFunc :: Logging
LogVar :: Logging
data AuxFile
SampleInput :: FilePath -> AuxFile
ReadME :: AuxFile
getSampleData :: Choices -> Maybe FilePath
hasSampleInput :: [AuxFile] -> Bool

-- | Default choices to be used as the base from which design
--   specifications can be built.
defaultChoices :: Choices
choicesSent :: Choices -> [Sentence]
showChs :: RenderChoices a => a -> Sentence
instance GHC.Classes.Eq Language.Drasil.Choices.AuxFile
instance GHC.Classes.Eq Language.Drasil.Choices.Logging
instance GHC.Classes.Eq Language.Drasil.Choices.Comments
instance GHC.Classes.Eq Language.Drasil.Choices.CodeConcept
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.AuxFile
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Logging
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Visibility
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Verbosity
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Comments
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.ConstraintBehaviour
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.ImplementationType
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.CodeConcept
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.ConstantRepr
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.ConstantStructure
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Structure
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Modularity


-- | Defines the CodeSpec structure and related functions.
module Language.Drasil.CodeSpec
type Input = CodeVarChunk
type Output = CodeVarChunk
type Const = CodeDefinition
type Derived = CodeDefinition
type Def = CodeDefinition
data CodeSpec
[CodeSpec] :: HasName a => {pName :: Name, authors :: [a], inputs :: [Input], extInputs :: [Input], derivedInputs :: [Derived], outputs :: [Output], configFiles :: [FilePath], execOrder :: [Def], cMap :: ConstraintCEMap, constants :: [Const], constMap :: ConstantMap, mods :: [Mod], sysinfodb :: ChunkDB} -> CodeSpec
type ConstantMap = Map UID CodeDefinition
assocToMap :: HasUID a => [a] -> Map UID a

-- | Defines a CodeSpec based on the SystemInformation, Choices, and Mods
--   defined by the user.
codeSpec :: SystemInformation -> Choices -> [Mod] -> CodeSpec

-- | Convert a Func to an implementation-stage QuantityDict representing
--   the function.
asVC :: Func -> QuantityDict

-- | Get a UID of a chunk corresponding to a Func
funcUID :: Func -> UID

-- | FIXME: hack. Use for implementation-stage functions that need to be
--   displayed in the SRS.
funcUID' :: Func -> UID

-- | FIXME: Part of above hack
asVC' :: Func -> QuantityDict
getDerivedInputs :: [DataDefinition] -> [Input] -> [Const] -> ChunkDB -> [QDefinition]
type Known = CodeVarChunk
type Need = CodeVarChunk
getExecOrder :: [Def] -> [Known] -> [Need] -> ChunkDB -> [Def]

-- | Get a list of Constraints for a list of CodeChunks
getConstraints :: HasUID c => ConstraintCEMap -> [c] -> [ConstraintCE]

-- | Get a list of CodeChunks from a constraint
constraintvars :: ConstraintCE -> ChunkDB -> [CodeChunk]


-- | Defines a package extension for GOOL, with functions for pairing a
--   GOOL program with auxiliary, non-source-code files.
module Language.Drasil.Code.Imperative.GOOL.ClassInterface

-- | Holds all information needed to create a README file.
data ReadMeInfo
ReadMeInfo :: LangAbbrev -> LangVers -> Maybe String -> ImplementationType -> [(Name, Version)] -> [FilePath] -> [Contributor] -> [FilePath] -> CaseName -> ReadMeInfo
[langName] :: ReadMeInfo -> LangAbbrev
[langVersion] :: ReadMeInfo -> LangVers
[invalidOS] :: ReadMeInfo -> Maybe String
[implementType] :: ReadMeInfo -> ImplementationType
[extLibNV] :: ReadMeInfo -> [(Name, Version)]
[extLibFP] :: ReadMeInfo -> [FilePath]
[contributors] :: ReadMeInfo -> [Contributor]
[configFP] :: ReadMeInfo -> [FilePath]
[caseName] :: ReadMeInfo -> CaseName

-- | Members of this class must have all the information necessary for the
--   <a>AuxiliarySym</a> in addition to information necessary to create a
--   package.
class (AuxiliarySym r) => PackageSym r where {
    type family Package r;
}
package :: PackageSym r => ProgData -> [r (Auxiliary r)] -> r (Package r)

-- | Members of this class must have a doxygen configuration, ReadMe file,
--   sample input, omptimize doxygen document, information necessary for a
--   makefile, auxiliary helper documents, and auxiliary from data
--   documents.
class AuxiliarySym r where {
    type family Auxiliary r;
    type family AuxHelper r;
}
doxConfig :: AuxiliarySym r => String -> GOOLState -> Verbosity -> r (Auxiliary r)
readMe :: AuxiliarySym r => ReadMeInfo -> r (Auxiliary r)
sampleInput :: AuxiliarySym r => ChunkDB -> DataDesc -> [Expr] -> r (Auxiliary r)
optimizeDox :: AuxiliarySym r => r (AuxHelper r)
makefile :: AuxiliarySym r => [FilePath] -> ImplementationType -> [Comments] -> GOOLState -> ProgData -> r (Auxiliary r)
auxHelperDoc :: AuxiliarySym r => r (AuxHelper r) -> Doc
auxFromData :: AuxiliarySym r => FilePath -> Doc -> r (Auxiliary r)

module Language.Drasil.Code.Imperative.WriteReadMe

-- | Generates a README file.
makeReadMe :: ReadMeInfo -> Doc

module Language.Drasil.Code.Imperative.Doxygen.Import

-- | Renders a Doxygen configuration file.
--   
--   <ul>
--   <li>Sets the PROJECT_NAME field according to the given name.</li>
--   <li>Sets the INPUT field to the header files contained in the given
--   GOOLState.</li>
--   <li>Sets the OPTIMIZE_OUTPUT_JAVA field according to the
--   OptimizeChoice parameter.</li>
--   <li>Sets the QUIET field according to the given Verbosity.</li>
--   </ul>
makeDoxConfig :: ProjName -> GOOLState -> OptimizeChoice -> Verbosity -> Doc

-- | Renderings of values commonly used in the configuration file.
yes :: Doc

-- | Renderings of values commonly used in the configuration file.
no :: Doc

module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.LanguagePolymorphic

-- | Defines a Doxygen configuration file.
doxConfig :: AuxiliarySym r => r (AuxHelper r) -> String -> GOOLState -> Verbosity -> r (Auxiliary r)

-- | Defines a markdown file.
readMe :: AuxiliarySym r => ReadMeInfo -> r (Auxiliary r)

-- | Defines a sample input file.
sampleInput :: AuxiliarySym r => ChunkDB -> DataDesc -> [Expr] -> r (Auxiliary r)

-- | Defines a Makefile.
makefile :: AuxiliarySym r => Maybe BuildConfig -> Maybe Runnable -> Maybe DocConfig -> GOOLState -> ProgData -> r (Auxiliary r)

-- | Changes a <a>Runnable</a> to <a>Nothing</a> if the user chose
--   <a>Library</a> for the <a>ImplementationType</a>.
noRunIfLib :: ImplementationType -> Maybe Runnable -> Maybe Runnable

-- | A DocConfig for Doxygen documentation.
doxDocConfig :: DocConfig

-- | Returns Nothing if no comments are enabled.
docIfEnabled :: [Comments] -> DocConfig -> Maybe DocConfig


-- | The logic to render Swift auxiliary files is contained in this module
module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer

-- | Holds a Swift project.
newtype SwiftProject a
SP :: a -> SwiftProject a
[unSP] :: SwiftProject a -> a
instance GHC.Base.Functor Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer.SwiftProject
instance GHC.Base.Applicative Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer.SwiftProject
instance GHC.Base.Monad Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer.SwiftProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.PackageSym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer.SwiftProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.AuxiliarySym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer.SwiftProject


-- | The logic to render Python auxiliary files is contained in this module
module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer

-- | Holds a Python project.
newtype PythonProject a
PP :: a -> PythonProject a
[unPP] :: PythonProject a -> a
instance GHC.Base.Functor Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer.PythonProject
instance GHC.Base.Applicative Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer.PythonProject
instance GHC.Base.Monad Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer.PythonProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.PackageSym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer.PythonProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.AuxiliarySym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer.PythonProject


-- | The logic to render Java auxiliary files is contained in this module
module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer

-- | Holds a Java project.
newtype JavaProject a
JP :: a -> JavaProject a
[unJP] :: JavaProject a -> a
instance GHC.Base.Functor Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer.JavaProject
instance GHC.Base.Applicative Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer.JavaProject
instance GHC.Base.Monad Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer.JavaProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.PackageSym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer.JavaProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.AuxiliarySym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer.JavaProject


-- | The logic to render C++ auxiliary files is contained in this module
module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer

-- | Holds a C++ project.
newtype CppProject a
CPPP :: a -> CppProject a
[unCPPP] :: CppProject a -> a
instance GHC.Base.Functor Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer.CppProject
instance GHC.Base.Applicative Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer.CppProject
instance GHC.Base.Monad Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer.CppProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.PackageSym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer.CppProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.AuxiliarySym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer.CppProject


-- | The logic to render C# auxiliary files is contained in this module
module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer

-- | Holds a C# project.
newtype CSharpProject a
CSP :: a -> CSharpProject a
[unCSP] :: CSharpProject a -> a
instance GHC.Base.Functor Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer.CSharpProject
instance GHC.Base.Applicative Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer.CSharpProject
instance GHC.Base.Monad Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer.CSharpProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.PackageSym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer.CSharpProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.AuxiliarySym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer.CSharpProject


-- | Contains functions related to the choice of concept matches.
module Language.Drasil.Code.Imperative.ConceptMatch

-- | Concretizes the ConceptMatchMap in Choices to a
--   <a>MatchedConceptMap</a>. Currently we don't have any Choices that
--   would prevent a <a>CodeConcept</a> from being mapped, so we just take
--   the head of the list of <a>CodeConcept</a>s The ConceptMatchMap from
--   choices is passed to chooseConcept' internally, this way any
--   <a>CodeConcept</a> list can be matched to its appropiate <a>UID</a>.
chooseConcept :: Choices -> State [Sentence] MatchedConceptMap

-- | Translates a <a>CodeConcept</a> into GOOL.
conceptToGOOL :: OOProg r => CodeConcept -> SValue r


-- | Defines functions for simultaneous interpretation of ExternalLibrary
--   and ExternalLibraryCall.
module Language.Drasil.Code.ExtLibImport
data ExtLibState
ELS :: [Mod] -> [FuncStmt] -> [Name] -> [FuncStmt] -> [String] -> [(Name, Name)] -> ExtLibState
[_auxMods] :: ExtLibState -> [Mod]
[_defs] :: ExtLibState -> [FuncStmt]
[_defined] :: ExtLibState -> [Name]
[_steps] :: ExtLibState -> [FuncStmt]
[_imports] :: ExtLibState -> [String]
[_modExports] :: ExtLibState -> [(Name, Name)]
auxMods :: Lens' ExtLibState [Mod]
defs :: Lens' ExtLibState [FuncStmt]
imports :: Lens' ExtLibState [String]
modExports :: Lens' ExtLibState [(Name, Name)]
steps :: Lens' ExtLibState [FuncStmt]
genExternalLibraryCall :: ExternalLibrary -> ExternalLibraryCall -> ExtLibState

module Language.Drasil.Code.Imperative.GenODE

-- | Chooses the first <a>ODELibPckg</a> from the list specified by the
--   user that is compatible with the current target <a>Lang</a>.
--   Interprets the ExternalLibrary and ExternalLibraryCall for the
--   selected <a>ODELibPckg</a> by concretizing the ExternalLibraryCall
--   with each of the <a>ODEInfo</a>s The internal helper chooseODELib'
--   keeps a read only preference list and a currently considered
--   preference list (which can change), this facilitates the
--   <a>firstChoiceODELib</a> check.
chooseODELib :: Lang -> [ODELibPckg] -> [ODEInfo] -> State [Sentence] ODEGenInfo

module Language.Drasil.Code.Imperative.DrasilState

-- | Abbreviation used throughout generator.
type GenState = State DrasilState

-- | Private State, used to push these options around the generator.
data DrasilState
DrasilState :: CodeSpec -> Modularity -> ImplementationType -> Structure -> ConstantStructure -> ConstantRepr -> MatchedConceptMap -> MatchedSpaces -> ConstraintBehaviour -> ConstraintBehaviour -> [Comments] -> Verbosity -> String -> String -> [Logging] -> [AuxFile] -> [Expr] -> [Mod] -> [(Name, Version)] -> ExtLibMap -> [FilePath] -> ModExportMap -> ModExportMap -> ClassDefinitionMap -> [Name] -> String -> String -> Doc -> [(Space, CodeType)] -> DrasilState
[codeSpec] :: DrasilState -> CodeSpec
[modular] :: DrasilState -> Modularity
[implType] :: DrasilState -> ImplementationType
[inStruct] :: DrasilState -> Structure
[conStruct] :: DrasilState -> ConstantStructure
[conRepr] :: DrasilState -> ConstantRepr
[concMatches] :: DrasilState -> MatchedConceptMap
[spaceMatches] :: DrasilState -> MatchedSpaces
[onSfwrC] :: DrasilState -> ConstraintBehaviour
[onPhysC] :: DrasilState -> ConstraintBehaviour
[commented] :: DrasilState -> [Comments]
[doxOutput] :: DrasilState -> Verbosity
[date] :: DrasilState -> String
[logName] :: DrasilState -> String
[logKind] :: DrasilState -> [Logging]
[auxiliaries] :: DrasilState -> [AuxFile]
[sampleData] :: DrasilState -> [Expr]
[modules] :: DrasilState -> [Mod]
[extLibNames] :: DrasilState -> [(Name, Version)]
[extLibMap] :: DrasilState -> ExtLibMap
[libPaths] :: DrasilState -> [FilePath]
[eMap] :: DrasilState -> ModExportMap
[libEMap] :: DrasilState -> ModExportMap
[clsMap] :: DrasilState -> ClassDefinitionMap
[defList] :: DrasilState -> [Name]
[currentModule] :: DrasilState -> String
[currentClass] :: DrasilState -> String
[_designLog] :: DrasilState -> Doc
[_loggedSpaces] :: DrasilState -> [(Space, CodeType)]
designLog :: Lens' DrasilState Doc

-- | Determines whether input modules are <a>Combined</a> or
--   <a>Separated</a> based on the <a>Modularity</a> stored in
--   <a>DrasilState</a>.
inMod :: DrasilState -> InputModule

-- | Type for the mapping between <a>Space</a>s and <a>CodeType</a>s.
type MatchedSpaces = Space -> GenState CodeType

-- | Variable/function name maps to module name.
type ModExportMap = Map String String

-- | Variable/function name maps to class name.
type ClassDefinitionMap = Map String String

-- | Builds the module export map, mapping each function and state variable
--   name in the generated code to the name of the generated module that
--   exports it.
modExportMap :: CodeSpec -> Choices -> [Mod] -> ModExportMap

-- | Builds the class definition map, mapping each generated method and
--   state variable name to the name of the generated class where it is
--   defined.
clsDefMap :: CodeSpec -> Choices -> [Mod] -> ClassDefinitionMap

-- | Adds a message to the design log if the given
--   <a>Space</a>-<a>CodeType</a> match has not already been logged.
addToDesignLog :: Space -> CodeType -> Doc -> DrasilState -> DrasilState

-- | Adds a <a>Space</a>-<a>CodeType</a> pair to the loggedSpaces list in
--   <a>DrasilState</a> to prevent a duplicate log from being generated for
--   that <a>Space</a>-<a>CodeType</a> pair.
addLoggedSpace :: Space -> CodeType -> DrasilState -> DrasilState

module Language.Drasil.Code.Imperative.SpaceMatch

-- | Concretizes the <a>spaceMatch</a> in <a>Choices</a> to a
--   <tt>MatchedSpace</tt> based on target language.
chooseSpace :: Lang -> Choices -> MatchedSpaces

module Language.Drasil.Code.Imperative.Parameters

-- | Since the input constructor calls the three input-related methods, the
--   parameters to the constructor are the parameters to the three methods,
--   except excluding any of variables that are state variables in the
--   class, since they are already in scope. If InputParameters is not in
--   the definition list, then the default constructor is used, which takes
--   no parameters.
getInConstructorParams :: GenState [CodeVarChunk]

-- | The inputs to the function for reading inputs are the input file name,
--   and the <a>inParams</a> object if inputs are bundled and input
--   components are separated. The latter is needed because we want to
--   populate the object through state transitions, not by returning it.
getInputFormatIns :: GenState [CodeVarChunk]

-- | The outputs from the function for reading inputs are the inputs.
getInputFormatOuts :: GenState [CodeVarChunk]

-- | The inputs to the function for calculating derived inputs are any
--   variables used in the equations for the derived inputs.
getDerivedIns :: GenState [CodeVarChunk]

-- | The outputs from the function for calculating derived inputs are the
--   derived inputs.
getDerivedOuts :: GenState [CodeVarChunk]

-- | The parameters to the function for checking constraints on the inputs
--   are any inputs with constraints, and any variables used in the
--   expressions of the constraints.
getConstraintParams :: GenState [CodeVarChunk]

-- | The parameters to a calculation function are any variables used in the
--   expression representing the calculation.
getCalcParams :: CodeDefinition -> GenState [CodeVarChunk]

-- | The parameters to the function for printing outputs are the outputs.
getOutputParams :: GenState [CodeVarChunk]
instance GHC.Classes.Eq Language.Drasil.Code.Imperative.Parameters.ParamType

module Language.Drasil.Code.Imperative.Logging

-- | Generates a statement that logs the given variable's value, if the
--   user chose to turn on logging of variable assignments.
maybeLog :: OOProg r => SVariable r -> GenState [MSStatement r]

-- | Generates the body of a function with the given name, list of
--   parameters, and blocks to include in the body. If the user chose to
--   turn on logging of function calls, statements that log how the
--   function was called are added to the beginning of the body.
logBody :: OOProg r => Label -> [SVariable r] -> [MSBlock r] -> GenState (MSBody r)

-- | Generates a block that logs, to the given <a>FilePath</a>, the name of
--   a function, and the names and values of the passed list of variables.
--   Intended to be used as the first block in the function, to log that it
--   was called and what inputs it was called with.
loggedMethod :: OOProg r => FilePath -> Label -> [SVariable r] -> MSBlock r

-- | The variable representing the log file in write mode.
varLogFile :: OOProg r => SVariable r

module Language.Drasil.Code.Imperative.Helpers

-- | Puts a state-dependent value into a singleton list.
liftS :: State a b -> State a [b]

-- | Gets the <a>QuantityDict</a> corresponding to a <a>UID</a>.
lookupC :: DrasilState -> UID -> QuantityDict

module Language.Drasil.Code.Imperative.GenerateGOOL
data ClassType
Primary :: ClassType
Auxiliary :: ClassType

-- | Defines a GOOL module. If the user chose <a>CommentMod</a>, the module
--   will have Doxygen comments. If the user did not choose
--   <a>CommentMod</a> but did choose <a>CommentFunc</a>, a module-level
--   Doxygen comment is still created, though it only documents the file
--   name, because without this Doxygen will not find the function-level
--   comments in the file.
genModuleWithImports :: OOProg r => Name -> Description -> [Import] -> [GenState (Maybe (SMethod r))] -> [GenState (Maybe (SClass r))] -> GenState (SFile r)

-- | Generates a module for when imports do not need to be explicitly
--   stated.
genModule :: OOProg r => Name -> Description -> [GenState (Maybe (SMethod r))] -> [GenState (Maybe (SClass r))] -> GenState (SFile r)

-- | Generates a Doxygen configuration file if the user has comments
--   enabled.
genDoxConfig :: AuxiliarySym r => GOOLState -> GenState (Maybe (r (Auxiliary r)))

-- | Generates a README file.
genReadMe :: AuxiliarySym r => ReadMeInfo -> GenState (Maybe (r (Auxiliary r)))

-- | Generates a primary class.
primaryClass :: OOProg r => Name -> Maybe Name -> Description -> [CSStateVar r] -> GenState [SMethod r] -> GenState (SClass r)

-- | Generates an auxiliary class (for when a module contains multiple
--   classes).
auxClass :: OOProg r => Name -> Maybe Name -> Description -> [CSStateVar r] -> GenState [SMethod r] -> GenState (SClass r)

-- | Function call generator. The first parameter (<tt>m</tt>) is the
--   module where the function is defined. If <tt>m</tt> is not the current
--   module, use GOOL's function for calling functions from external
--   modules. If <tt>m</tt> is the current module and the function is in
--   export map, use GOOL's basic function for function applications. If
--   <tt>m</tt> is the current module and function is not exported, use
--   GOOL's function for calling a method on self. This assumes all private
--   methods are dynamic, which is true for this generator.
fApp :: OOProg r => Name -> Name -> VSType r -> [SValue r] -> NamedArgs r -> GenState (SValue r)

-- | Logic similar to <a>fApp</a>, but the self case is not required here
--   (because constructor will never be private). Calls
--   <a>newObjMixedArgs</a>.
ctorCall :: OOProg r => Name -> VSType r -> [SValue r] -> NamedArgs r -> GenState (SValue r)

-- | Logic similar to <a>fApp</a>, but for In/Out calls.
fAppInOut :: OOProg r => Name -> Name -> [SValue r] -> [SVariable r] -> [SVariable r] -> GenState (MSStatement r)


-- | Defines description generators for common SCS functions, classes, and
--   modules.
module Language.Drasil.Code.Imperative.Descriptions

-- | Returns a module description based on a list of descriptions of what
--   is contained in the module.
modDesc :: GenState [Description] -> GenState Description

-- | Returns description of what is contained in the module that is
--   generated when the user chooses an Unmodular design. Module is
--   described as either a program or library, depending on the user's
--   choice of implementation type.
unmodularDesc :: GenState Description

-- | Returns description of what is contained in the Input Parameters
--   module. If user chooses the <a>Bundled</a> input parameter, this
--   module will include the structure for holding the input values. Does
--   not include the structure if they choose <a>Unbundled</a>. If the user
--   chooses the <a>Combined</a> input parameter, this module includes the
--   input-related functions. Does not inlcude those functions if they
--   choose <a>Separated</a>.
inputParametersDesc :: GenState [Description]

-- | Returns a description of the input constructor, checking whether each
--   possible method that may be called by the constructor is defined, and
--   including it in the description if so.
inputConstructorDesc :: GenState Description

-- | Returns a description of what is contained in the Input Format module,
--   if it exists.
inputFormatDesc :: GenState Description

-- | Returns a description of what is contained in the Derived Values
--   module, if it exists.
derivedValuesDesc :: GenState Description

-- | Returns a description of what is contained in the Input Constraints
--   module, if it exists.
inputConstraintsDesc :: GenState Description

-- | Returns a description of what is contained in the Constants module, if
--   it exists.
constModDesc :: GenState Description

-- | Returns a description of what is contained in the Output Format
--   module, if it exists.
outputFormatDesc :: GenState Description

-- | Returns a description for the generated function that stores inputs,
--   if it exists. Checks whether explicit inputs, derived inputs, and
--   constants are defined in the InputParameters class and includes each
--   in the description if so.
inputClassDesc :: GenState Description

-- | Returns a description for the generated class that stores constants,
--   if it exists. If no constants are defined in the Constants class, then
--   it does not exist and an empty description is returned.
constClassDesc :: GenState Description

-- | Returns a description for the generated function that reads input from
--   a file, if it exists.
inFmtFuncDesc :: GenState Description

-- | Returns a description for the generated function that checks input
--   constraints, if it exists.
inConsFuncDesc :: GenState Description

-- | Returns a description for the generated function that calculates
--   derived inputs, if it exists.
dvFuncDesc :: GenState Description

-- | Description of the generated Calculations module.
calcModDesc :: Description

-- | Returns description for generated output-printing function, if it
--   exists.
woFuncDesc :: GenState Description


-- | Contains functions for generating code comments that describe a chunk.
module Language.Drasil.Code.Imperative.Comments

-- | Generates a comment string for a chunk, including the term, definition
--   (if applicable), and unit (if applicable).
getComment :: CodeIdea c => c -> GenState String

module Language.Drasil.Code.Imperative.Import

-- | Gets a chunk's <a>CodeType</a>, by checking which <a>CodeType</a> the
--   user has chosen to match the chunk's <a>Space</a> to.
codeType :: HasSpace c => c -> GenState CodeType

-- | Gets the <a>CodeType</a> for a <a>Space</a>, based on the user's
--   choice.
spaceCodeType :: Space -> GenState CodeType

-- | Generates a public function.
publicFunc :: OOProg r => Label -> VSType r -> Description -> [ParameterChunk] -> Maybe Description -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a private method.
privateMethod :: OOProg r => Label -> VSType r -> Description -> [ParameterChunk] -> Maybe Description -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a public function, defined by its inputs and outputs.
publicInOutFunc :: OOProg r => Label -> Description -> [CodeVarChunk] -> [CodeVarChunk] -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a private method, defined by its inputs and outputs.
privateInOutMethod :: OOProg r => Label -> Description -> [CodeVarChunk] -> [CodeVarChunk] -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a constructor.
genConstructor :: OOProg r => Label -> Description -> [ParameterChunk] -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a GOOL Variable for a variable represented by a
--   <a>CodeVarChunk</a>.
mkVar :: OOProg r => CodeVarChunk -> GenState (SVariable r)

-- | Generates a GOOL Value for a variable represented by a
--   <a>CodeVarChunk</a>.
mkVal :: OOProg r => CodeVarChunk -> GenState (SValue r)

-- | Converts an <tt>Expr</tt> to a GOOL Value.
convExpr :: OOProg r => CodeExpr -> GenState (SValue r)

-- | Converts a <a>FuncStmt</a> to a GOOL Statement.
convStmt :: OOProg r => FuncStmt -> GenState (MSStatement r)

-- | Converts a <a>Mod</a> to GOOL.
genModDef :: OOProg r => Mod -> GenState (SFile r)

-- | Converts a <a>Mod</a>'s functions to GOOL.
genModFuncs :: OOProg r => Mod -> [GenState (SMethod r)]

-- | Converts a <a>Mod</a>'s classes to GOOL.
genModClasses :: OOProg r => Mod -> [GenState (SClass r)]

-- | Read from a data description into a <a>MSBlock</a> of
--   <a>MSStatement</a>s.
readData :: OOProg r => DataDesc -> GenState [MSBlock r]

-- | Converts a <a>Constraint</a> to a <a>CodeExpr</a>.
renderC :: (HasUID c, HasSymbol c) => c -> Constraint CodeExpr -> CodeExpr

module Language.Drasil.Code.Imperative.FunctionCalls

-- | Generates calls to all of the input-related functions. First is the
--   call to the function for reading inputs, then the function for
--   calculating derived inputs, then the function for checking input
--   constraints.
getAllInputCalls :: OOProg r => GenState [MSStatement r]

-- | Generates a call to the function for reading inputs from a file.
getInputCall :: OOProg r => GenState (Maybe (MSStatement r))

-- | Generates a call to the function for calculating derived inputs.
getDerivedCall :: OOProg r => GenState (Maybe (MSStatement r))

-- | Generates a call to the function for checking constraints on the
--   input.
getConstraintCall :: OOProg r => GenState (Maybe (MSStatement r))

-- | Generates a call to a calculation function, given the
--   <a>CodeDefinition</a> for the value being calculated.
getCalcCall :: OOProg r => CodeDefinition -> GenState (Maybe (MSStatement r))

-- | Generates a call to the function for printing outputs.
getOutputCall :: OOProg r => GenState (Maybe (MSStatement r))

module Language.Drasil.Code.Imperative.Modules

-- | Generates a controller module.
genMain :: OOProg r => GenState (SFile r)

-- | Generates a main function, to act as the controller for an SCS
--   program. The controller declares input and constant variables, then
--   calls the functions for reading input values, calculating derived
--   inputs, checking constraints, calculating outputs, and printing
--   outputs. Returns Nothing if the user chose to generate a library.
genMainFunc :: OOProg r => GenState (Maybe (SMethod r))

-- | Generates either a single module containing all input-related
--   components, or separate modules for each input-related component,
--   depending on the user's modularity choice.
chooseInModule :: OOProg r => InputModule -> GenState [SFile r]

-- | Returns <a>Nothing</a> if no inputs or constants are mapped to
--   InputParameters in the class definition map. If any inputs or
--   constants are defined in InputParameters, this generates the
--   InputParameters class containing the inputs and constants as state
--   variables. If the InputParameters constructor is also exported, then
--   the generated class also contains the input-related functions as
--   private methods.
genInputClass :: OOProg r => ClassType -> GenState (Maybe (SClass r))

-- | Generates a function for calculating derived inputs.
genInputDerived :: OOProg r => ScopeTag -> GenState (Maybe (SMethod r))

-- | Generates function that checks constraints on the input.
genInputConstraints :: OOProg r => ScopeTag -> GenState (Maybe (SMethod r))

-- | | Generates a function for reading inputs from a file.
genInputFormat :: OOProg r => ScopeTag -> GenState (Maybe (SMethod r))

-- | Generates a module containing the class where constants are stored.
genConstMod :: OOProg r => GenState [SFile r]

-- | Generates a class to store constants, if constants are mapped to the
--   Constants class in the class definition map, otherwise returns
--   Nothing.
genConstClass :: OOProg r => ClassType -> GenState (Maybe (SClass r))

-- | Generates a module containing calculation functions.
genCalcMod :: OOProg r => GenState (SFile r)

-- | Generates a calculation function corresponding to the
--   <a>CodeDefinition</a>. For solving ODEs, the <tt>ExtLibState</tt>
--   containing the information needed to generate code is found by looking
--   it up in the external library map.
genCalcFunc :: OOProg r => CodeDefinition -> GenState (SMethod r)

-- | Generates a module containing the function for printing outputs.
genOutputMod :: OOProg r => GenState [SFile r]

-- | Generates a function for printing output values.
genOutputFormat :: OOProg r => GenState (Maybe (SMethod r))

-- | Generates a sample input file compatible with the generated program,
--   if the user chose to.
genSampleInput :: AuxiliarySym r => GenState (Maybe (r (Auxiliary r)))
instance GHC.Classes.Eq Language.Drasil.Code.Imperative.Modules.CalcType


-- | Defines generation functions for SCS code packages.
module Language.Drasil.Code.Imperative.Generator

-- | Initializes the generator's <a>DrasilState</a>. <a>String</a>
--   parameter is a string representing the date. &lt;math&gt; parameter is
--   the sample input values provided by the user.
generator :: Lang -> String -> [Expr] -> Choices -> CodeSpec -> DrasilState

-- | Generates a package with the given <a>DrasilState</a>. The passed
--   un-representation functions determine which target language the
--   package will be generated in.
generateCode :: (OOProg progRepr, PackageSym packRepr) => Lang -> (progRepr (Program progRepr) -> ProgData) -> (packRepr (Package packRepr) -> PackData) -> DrasilState -> IO ()


-- | re-export smart constructors for external code writing
module Language.Drasil.Code

-- | Takes code
makeCode :: [FileData] -> [AuxData] -> Code

-- | Creates the requested <a>Code</a> by producing files
createCodeFiles :: Code -> IO ()

-- | Initializes the generator's <a>DrasilState</a>. <a>String</a>
--   parameter is a string representing the date. &lt;math&gt; parameter is
--   the sample input values provided by the user.
generator :: Lang -> String -> [Expr] -> Choices -> CodeSpec -> DrasilState

-- | Generates a package with the given <a>DrasilState</a>. The passed
--   un-representation functions determine which target language the
--   package will be generated in.
generateCode :: (OOProg progRepr, PackageSym packRepr) => Lang -> (progRepr (Program progRepr) -> ProgData) -> (packRepr (Package packRepr) -> PackData) -> DrasilState -> IO ()

-- | Reads data from a file and converts the values to <a>Expr</a>s. The
--   file must be formatted according to the <a>DataDesc'</a> passed as a
--   parameter.
readWithDataDesc :: FilePath -> DataDesc' -> IO [Expr]

-- | Defines the DataDesc for the file containing a sample data set, which
--   a user must supply if they want to generate a sample input file.
sampleInputDD :: [CodeVarChunk] -> DataDesc'
data Choices
Choices :: [Lang] -> Modularity -> Structure -> ConstantStructure -> ConstantRepr -> ConceptMatchMap -> SpaceMatch -> ImplementationType -> [ODELibPckg] -> [ODEInfo] -> ConstraintBehaviour -> ConstraintBehaviour -> [Comments] -> Verbosity -> Visibility -> [Logging] -> FilePath -> [AuxFile] -> Choices
[lang] :: Choices -> [Lang]
[modularity] :: Choices -> Modularity
[inputStructure] :: Choices -> Structure
[constStructure] :: Choices -> ConstantStructure
[constRepr] :: Choices -> ConstantRepr
[conceptMatch] :: Choices -> ConceptMatchMap
[spaceMatch] :: Choices -> SpaceMatch
[impType] :: Choices -> ImplementationType
[odeLib] :: Choices -> [ODELibPckg]
[odes] :: Choices -> [ODEInfo]
[onSfwrConstraint] :: Choices -> ConstraintBehaviour
[onPhysConstraint] :: Choices -> ConstraintBehaviour
[comments] :: Choices -> [Comments]
[doxVerbosity] :: Choices -> Verbosity
[dates] :: Choices -> Visibility
[logging] :: Choices -> [Logging]
[logFile] :: Choices -> FilePath
[auxFiles] :: Choices -> [AuxFile]
data Comments
CommentFunc :: Comments
CommentClass :: Comments
CommentMod :: Comments
data Verbosity
Verbose :: Verbosity
Quiet :: Verbosity
data ConstraintBehaviour
Warning :: ConstraintBehaviour
Exception :: ConstraintBehaviour
data ImplementationType
Library :: ImplementationType
Program :: ImplementationType
data Logging
LogFunc :: Logging
LogVar :: Logging
data Modularity
Modular :: InputModule -> Modularity
Unmodular :: Modularity
data Structure
Unbundled :: Structure
Bundled :: Structure
data ConstantStructure
Inline :: ConstantStructure
WithInputs :: ConstantStructure
Store :: Structure -> ConstantStructure
data ConstantRepr
Var :: ConstantRepr
Const :: ConstantRepr
data InputModule
Combined :: InputModule
Separated :: InputModule
data CodeConcept
Pi :: CodeConcept

-- | Builds a ConceptMatchMap from an association list of chunks and
--   CodeConcepts
matchConcepts :: HasUID c => [(c, [CodeConcept])] -> ConceptMatchMap

-- | Specifies which CodeType should be used to represent each mathematical
--   Space. [CodeType] is preferentially-ordered, first CodeType that does
--   not conflict with other choices will be selected.
type SpaceMatch = Space -> [CodeType]

-- | Builds a SpaceMatch from an association list of Spaces and CodeTypes.
matchSpaces :: [(Space, [CodeType])] -> SpaceMatch
data AuxFile
SampleInput :: FilePath -> AuxFile
ReadME :: AuxFile
getSampleData :: Choices -> Maybe FilePath
data Visibility
Show :: Visibility
Hide :: Visibility

-- | Default choices to be used as the base from which design
--   specifications can be built.
defaultChoices :: Choices
data CodeSpec
[CodeSpec] :: HasName a => {pName :: Name, authors :: [a], inputs :: [Input], extInputs :: [Input], derivedInputs :: [Derived], outputs :: [Output], configFiles :: [FilePath], execOrder :: [Def], cMap :: ConstraintCEMap, constants :: [Const], constMap :: ConstantMap, mods :: [Mod], sysinfodb :: ChunkDB} -> CodeSpec

-- | Get a UID of a chunk corresponding to a Func
funcUID :: Func -> UID

-- | FIXME: hack. Use for implementation-stage functions that need to be
--   displayed in the SRS.
funcUID' :: Func -> UID

-- | Convert a Func to an implementation-stage QuantityDict representing
--   the function.
asVC :: Func -> QuantityDict

-- | FIXME: Part of above hack
asVC' :: Func -> QuantityDict

-- | Defines a CodeSpec based on the SystemInformation, Choices, and Mods
--   defined by the user.
codeSpec :: SystemInformation -> Choices -> [Mod] -> CodeSpec

-- | Define an assignment statement
($:=) :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt
data Mod
Mod :: Name -> Description -> [Import] -> [Class] -> [Func] -> Mod
data StateVariable
data Func
data FuncStmt
[FAsg] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FAsgIndex] :: CodeVarChunk -> Integer -> CodeExpr -> FuncStmt

-- | For-loop; Variable, Start, Stop, Step, Body
[FFor] :: CodeVarChunk -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt
[FForEach] :: CodeVarChunk -> CodeExpr -> [FuncStmt] -> FuncStmt
[FWhile] :: CodeExpr -> [FuncStmt] -> FuncStmt
[FCond] :: CodeExpr -> [FuncStmt] -> [FuncStmt] -> FuncStmt
[FRet] :: CodeExpr -> FuncStmt
[FThrow] :: String -> FuncStmt
[FTry] :: [FuncStmt] -> [FuncStmt] -> FuncStmt
[FContinue] :: FuncStmt
[FDecDef] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FFuncDef] :: CodeFuncChunk -> [ParameterChunk] -> [FuncStmt] -> FuncStmt
[FVal] :: CodeExpr -> FuncStmt
[FMulti] :: [FuncStmt] -> FuncStmt
[FAppend] :: CodeExpr -> CodeExpr -> FuncStmt

-- | Define a public state variable based on the given CodeVarChunk
pubStateVar :: CodeVarChunk -> StateVariable

-- | Define a private state variable based on the given CodeVarChunk
privStateVar :: CodeVarChunk -> StateVariable

-- | Define a declare-define statement.
fDecDef :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt

-- | Define a for-loop. Quantity is for the iteration variable, Expr is the
--   upper bound at that variable (the variable will start with a value of
--   0). [FuncStmt] is for the loop body.
ffor :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a for-loop. Quantity is for the iteration variable, and 3
--   CodeExprs for the start, stop, step numbers. [FuncStmt] is for the
--   loop body.
fforRange :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a function that reads data from a file, according to the given
--   DataDesc.
funcData :: Name -> Description -> DataDesc -> Func

-- | Define a function by providing the FuncStmts for its body. Other
--   parameters are function name, description, list of parameters, space
--   of the returned value, and description of the returned value.
funcDef :: (Quantity c, MayHaveUnit c) => Name -> Description -> [c] -> Space -> Maybe Description -> [FuncStmt] -> Func

-- | Define a Mod with the given Name, Description, Classes, and Functions.
packmod :: Name -> Description -> [Class] -> [Func] -> Mod
junkLine :: Data
multiLine :: LinePattern -> Delim -> Data
repeated :: [DataItem] -> LinePattern
singleLine :: LinePattern -> Delim -> Data
singleton :: DataItem -> Data
type ExternalLibrary = [StepGroup]

-- | A step can be a call to an external library function or method.
data Step

-- | The first item in the requires list should be where the function being
--   called is defined
data FunctionInterface
data Argument

-- | Specifies an external library
externalLib :: [StepGroup] -> ExternalLibrary

-- | To be used when there are multiple options for a group of consecutive
--   steps, where a single use-case-specific factor decides which step
--   group to use
choiceSteps :: [[Step]] -> StepGroup

-- | To be used when there are multiple options for a single step, where a
--   use-case-specific factor decides which step to use.
choiceStep :: [Step] -> StepGroup

-- | Specifies a step which must exist in some form in every use case.
mandatoryStep :: Step -> StepGroup

-- | Specifies multiple consecutive steps that all must exist in some form
--   in every use case.
mandatorySteps :: [Step] -> StepGroup
callStep :: FunctionInterface -> Step

-- | Specifies a call to an external library function.
libFunction :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library method.
libMethod :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library function, where the result is
--   assigned to a variable.
libFunctionWithResult :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library method, where the result is
--   assigned to a variable.
libMethodWithResult :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is assigned to a variable.
libConstructor :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library function, where multiple
--   modules from the external library are required, and the result is
--   assigned to a variable.
libConstructorMultiReqs :: [Requires] -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is returned.
constructAndReturn :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies an argument that is not use-case-dependent.
lockedArg :: CodeExpr -> Argument

-- | Specifies a named argument that is not use-case-dependent.
lockedNamedArg :: NamedArgument -> CodeExpr -> Argument

-- | Specifies a use-case-dependent argument whose value can be inlined in
--   the call.
inlineArg :: Space -> Argument

-- | Specifies a use-case-dependent named argument whose value can be
--   inlined in the call.
inlineNamedArg :: NamedArgument -> Space -> Argument

-- | Specifies use-case-dependent argument whose value must be assigned to
--   a variable before being passed in the call.
preDefinedArg :: CodeVarChunk -> Argument

-- | Specifies use-case-dependent named argument whose value must be
--   assigned to a variable before being passed in the call.
preDefinedNamedArg :: NamedArgument -> CodeVarChunk -> Argument

-- | Specifies a function type argument, where the body consists of a
--   single step.
functionArg :: CodeFuncChunk -> [Parameter] -> Step -> Argument

-- | Specifies an argument that is an object of a class that must be
--   defined in the calling program.
customObjArg :: [Requires] -> Description -> CodeVarChunk -> CodeFuncChunk -> ClassInfo -> Argument

-- | Specifies an argument that is an object of a class from the external
--   library. The list of [CodeVarChunk] represents fields of the object
--   that must be set in the calling program.
recordArg :: Requires -> CodeFuncChunk -> CodeVarChunk -> [CodeVarChunk] -> Argument

-- | Specifies a use-case-independent parameter
lockedParam :: CodeVarChunk -> Parameter

-- | Specifies a parameter whose name depends on the use case.
unnamedParam :: Space -> Parameter

-- | Specifies a class that must be implemented in the calling program.
customClass :: [MethodInfo] -> ClassInfo

-- | Specifies an implementation of an interface from the external library.
implementation :: String -> [MethodInfo] -> ClassInfo

-- | Specifies a constructor.
constructorInfo :: CodeFuncChunk -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a method.
methodInfo :: CodeFuncChunk -> Description -> [Parameter] -> Description -> [Step] -> MethodInfo

-- | Specifies a method that does not return anything.
methodInfoNoReturn :: CodeFuncChunk -> Description -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a statement where a current solution is appended to a
--   solution list.
appendCurrSol :: CodeExpr -> Step

-- | Specifies a statement where a solution list is populated by iterating
--   through a solution array.
populateSolList :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk -> [Step]

-- | Specifies statements where every index of an array is assigned a
--   value.
assignArrayIndex :: Step

-- | Specifies a statement where a solution is assigned from the field of
--   an object.
assignSolFromObj :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with the
--   first element of an array.
initSolListFromArray :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with a
--   value.
initSolListWithVal :: Step

-- | FunctionInterface for loop condition, CodeChunk for solution object,
--   CodeChunk for independent var, FunctionInterface for solving,
--   CodeChunk for soln array to populate with
solveAndPopulateWhile :: FunctionInterface -> CodeVarChunk -> CodeVarChunk -> FunctionInterface -> CodeVarChunk -> Step

-- | Specifies a statement where a list is returned, where each value of
--   the list -- is explicitly defined.
returnExprList :: Step

-- | Specifies a use-case-independent statement that returns a value.
fixedReturn :: CodeExpr -> Step

-- | Specifies a statement where a single solution is initialized with a
--   value.
initSolWithVal :: Step
type ExternalLibraryCall = [StepGroupFill]
data StepGroupFill
SGF :: Int -> [StepFill] -> StepGroupFill
data StepFill
CallF :: FunctionIntFill -> StepFill
LoopF :: NonEmpty FunctionIntFill -> [CodeExpr] -> NonEmpty StepFill -> StepFill
StatementF :: [CodeVarChunk] -> [CodeExpr] -> StepFill
newtype FunctionIntFill
FIF :: [ArgumentFill] -> FunctionIntFill
data ArgumentFill
UserDefinedArgF :: Maybe NamedArgument -> CodeExpr -> ArgumentFill
BasicF :: CodeExpr -> ArgumentFill
FnF :: [ParameterFill] -> StepFill -> ArgumentFill
ClassF :: [StateVariable] -> ClassInfoFill -> ArgumentFill
RecordF :: [CodeExpr] -> ArgumentFill
data ParameterFill
NameableParamF :: ParameterChunk -> ParameterFill
UserDefined :: ParameterChunk -> ParameterFill
data ClassInfoFill
RegularF :: [MethodInfoFill] -> ClassInfoFill
ImplementsF :: [MethodInfoFill] -> ClassInfoFill
data MethodInfoFill
CIF :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill
MIF :: [ParameterFill] -> NonEmpty StepFill -> MethodInfoFill
externalLibCall :: [StepGroupFill] -> ExternalLibraryCall
choiceStepsFill :: Int -> [StepFill] -> StepGroupFill
choiceStepFill :: Int -> StepFill -> StepGroupFill
mandatoryStepFill :: StepFill -> StepGroupFill
mandatoryStepsFill :: [StepFill] -> StepGroupFill
callStepFill :: FunctionIntFill -> StepFill
libCallFill :: [ArgumentFill] -> FunctionIntFill
userDefinedArgFill :: CodeExpr -> ArgumentFill
basicArgFill :: CodeExpr -> ArgumentFill
functionArgFill :: [ParameterFill] -> StepFill -> ArgumentFill
customObjArgFill :: [StateVariable] -> ClassInfoFill -> ArgumentFill
recordArgFill :: [CodeExpr] -> ArgumentFill
unnamedParamFill :: CodeVarChunk -> ParameterFill
unnamedParamPBVFill :: CodeVarChunk -> ParameterFill
userDefinedParamFill :: CodeVarChunk -> ParameterFill
customClassFill :: [MethodInfoFill] -> ClassInfoFill
implementationFill :: [MethodInfoFill] -> ClassInfoFill
constructorInfoFill :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill
methodInfoFill :: [ParameterFill] -> [StepFill] -> MethodInfoFill
appendCurrSolFill :: CodeVarChunk -> StepFill
populateSolListFill :: CodeVarChunk -> [StepFill]
assignArrayIndexFill :: CodeVarChunk -> [CodeExpr] -> StepFill
assignSolFromObjFill :: CodeVarChunk -> StepFill
initSolListFromArrayFill :: CodeVarChunk -> StepFill
initSolListWithValFill :: CodeVarChunk -> CodeExpr -> StepFill
solveAndPopulateWhileFill :: FunctionIntFill -> CodeExpr -> FunctionIntFill -> CodeVarChunk -> StepFill
returnExprListFill :: [CodeExpr] -> StepFill
fixedStatementFill :: StepFill
initSolWithValFill :: CodeVarChunk -> CodeExpr -> StepFill
data Lang
Cpp :: Lang
CSharp :: Lang
Java :: Lang
Python :: Lang
Swift :: Lang

-- | Members of this class must have all the information necessary for the
--   <a>AuxiliarySym</a> in addition to information necessary to create a
--   package.
class (AuxiliarySym r) => PackageSym r where {
    type family Package r;
}
package :: PackageSym r => ProgData -> [r (Auxiliary r)] -> r (Package r)

-- | Members of this class must have a doxygen configuration, ReadMe file,
--   sample input, omptimize doxygen document, information necessary for a
--   makefile, auxiliary helper documents, and auxiliary from data
--   documents.
class AuxiliarySym r where {
    type family Auxiliary r;
    type family AuxHelper r;
}
doxConfig :: AuxiliarySym r => String -> GOOLState -> Verbosity -> r (Auxiliary r)
readMe :: AuxiliarySym r => ReadMeInfo -> r (Auxiliary r)
sampleInput :: AuxiliarySym r => ChunkDB -> DataDesc -> [Expr] -> r (Auxiliary r)
optimizeDox :: AuxiliarySym r => r (AuxHelper r)
makefile :: AuxiliarySym r => [FilePath] -> ImplementationType -> [Comments] -> GOOLState -> ProgData -> r (Auxiliary r)
auxHelperDoc :: AuxiliarySym r => r (AuxHelper r) -> Doc
auxFromData :: AuxiliarySym r => FilePath -> Doc -> r (Auxiliary r)

-- | The underlying data type for auxiliary files in all renderers.
data AuxData

-- | The underlying data type for packages in all renderers.
data PackData

-- | Basic chunk representation in the code generation context. Contains a
--   QuantityDict and the kind of code (variable or function).
data CodeChunk

-- | Chunk representing a variable. The <tt>obv</tt> field represents the
--   object containing this variable, if it is an object field.
data CodeVarChunk

-- | Chunk representing a function.
data CodeFuncChunk

-- | Construct a <a>CodeVarChunk</a> from a <a>Quantity</a>.
quantvar :: (Quantity c, MayHaveUnit c) => c -> CodeVarChunk

-- | Construct a <a>CodeFuncChunk</a> from a <a>Quantity</a>.
quantfunc :: (Quantity c, MayHaveUnit c) => c -> CodeFuncChunk

-- | Combine an Object-type <a>CodeChunk</a> with another <a>CodeChunk</a>
--   to create a new <a>CodeChunk</a> which represents a field of the
--   first. ex. <tt>ccObjVar obj f = obj.f</tt>.
ccObjVar :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk
listToArray :: CodeVarChunk -> CodeVarChunk

-- | Constructs a CodeExpr representing the field of an actor
field :: CodeVarChunk -> CodeVarChunk -> CodeExpr
data ODEInfo
ODEInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> CodeExpr -> [CodeExpr] -> ODEOptions -> ODEInfo
[indepVar] :: ODEInfo -> CodeVarChunk
[depVar] :: ODEInfo -> CodeVarChunk
[otherVars] :: ODEInfo -> [CodeVarChunk]
[tInit] :: ODEInfo -> CodeExpr
[tFinal] :: ODEInfo -> CodeExpr
[initVal] :: ODEInfo -> CodeExpr
[odeSyst] :: ODEInfo -> [CodeExpr]
[odeOpts] :: ODEInfo -> ODEOptions
odeInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> CodeExpr -> [CodeExpr] -> ODEOptions -> ODEInfo
data ODEOptions
ODEOpts :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions
[solveMethod] :: ODEOptions -> ODEMethod
[absTol] :: ODEOptions -> CodeExpr
[relTol] :: ODEOptions -> CodeExpr
[stepSize] :: ODEOptions -> CodeExpr
[initValFstOrd] :: ODEOptions -> CodeExpr
odeOptions :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions
data ODEMethod
RK45 :: ODEMethod
BDF :: ODEMethod
Adams :: ODEMethod
data ODELibPckg
ODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> Maybe FilePath -> [Lang] -> ODELibPckg
[libName] :: ODELibPckg -> Name
[libVers] :: ODELibPckg -> Version
[libSpec] :: ODELibPckg -> ExternalLibrary
[libCall] :: ODELibPckg -> ODEInfo -> ExternalLibraryCall
[libPath] :: ODELibPckg -> Maybe FilePath
[compatibleLangs] :: ODELibPckg -> [Lang]

-- | Makes an ODELibPckg with the given name, ExternalLibrary
--   specification, ExternalLibraryCall specification parameterized by an
--   ODEInfo, local file path to the library, and list of compatible
--   languages.
mkODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> FilePath -> [Lang] -> ODELibPckg

-- | Makes an ODELibPckg with the given name, ExternalLibrary
--   specification, ExternalLibraryCall specification parameterized by an
--   ODEInfo, and list of compatible languages.
mkODELibNoPath :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> [Lang] -> ODELibPckg
unPP :: PythonProject a -> a
unJP :: JavaProject a -> a
unCSP :: CSharpProject a -> a
unCPPP :: CppProject a -> a
unSP :: SwiftProject a -> a

module Data.Drasil.ExternalLibraries.ODELibraries
scipyODEPckg :: ODELibPckg
scipyODESymbols :: [QuantityDict]
osloPckg :: ODELibPckg
osloSymbols :: [QuantityDict]
arrayVecDepVar :: ODEInfo -> CodeVarChunk
apacheODEPckg :: ODELibPckg
apacheODESymbols :: [QuantityDict]
odeintPckg :: ODELibPckg
odeintSymbols :: [QuantityDict]
scipyODELSodaPkg :: ODELibPckg
