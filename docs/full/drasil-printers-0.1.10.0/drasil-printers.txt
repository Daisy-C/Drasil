-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Printers SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-printers
@version 0.1.10.0


-- | Global configuration for output (This should be deprecated in the
--   future as Recipes evolve)
module Language.Drasil.Config

-- | TeX Only - Numbered sections?
numberedSections :: Bool

-- | TeX Only - Settings for hyperref.
hyperSettings :: String

-- | TeX font size.
fontSize :: Int

-- | Used to name the BibTeX file
bibFname :: String

-- | Print verbose data definition descriptions?
verboseDDDescription :: Bool

-- | The bibliography format.
data StyleGuide
MLA :: StyleGuide
APA :: StyleGuide
Chicago :: StyleGuide

-- | MLA for bibliography style.
bibStyleH :: StyleGuide

-- | MLA for bibliography style as a <a>String</a>.
bibStyleT :: String

-- | TeX Only - column width for data definitions (fraction of LaTeX
--   textwidth).
colAwidth :: Double

-- | TeX Only - column width for data definitions (fraction of LaTeX
--   textwidth).
colBwidth :: Double

-- | TeX Only - Number Data Definition equations?
numberedDDEquations :: Bool

-- | TeX Only - Number Theoretical Model equations?
numberedTMEquations :: Bool

module Language.Drasil.DOT.Print

-- | Type synonym for clarity.
type Colour = String

-- | Type synonym for clarity.
type Label = String

-- | A node family contains a list of <a>UID</a>s, their display labels,
--   general subgraph label, and colour.
data NodeFamily
NF :: [UID] -> [Label] -> Label -> Colour -> NodeFamily

-- | Node <a>UID</a>s.
[nodeUIDs] :: NodeFamily -> [UID]

-- | Display labels for nodes. We use the reference addresses from the
--   <a>UID</a>s.
[nodeLabels] :: NodeFamily -> [Label]

-- | Individual subgraph labels. These labels do not show on the final
--   generated pdf or png files.
[nfLabel] :: NodeFamily -> Label

-- | Gives the ability to change colours of bubbles within the graph.
[nfColour] :: NodeFamily -> Colour

-- | Holds all important and relevant information for generating a
--   traceability graph. Includes nodes, graph edges, and node family
--   information.
data GraphInfo
GI :: NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> [(UID, [UID])] -> [(UID, [UID])] -> [(UID, [UID])] -> [(UID, [UID])] -> [(UID, [UID])] -> GraphInfo

-- | Assumptions.
[assumpNF] :: GraphInfo -> NodeFamily

-- | Data definitions.
[ddNF] :: GraphInfo -> NodeFamily

-- | General definitions.
[gdNF] :: GraphInfo -> NodeFamily

-- | Theory models.
[tmNF] :: GraphInfo -> NodeFamily

-- | Instance models.
[imNF] :: GraphInfo -> NodeFamily

-- | Requirements (both functional and non-functional).
[reqNF] :: GraphInfo -> NodeFamily

-- | Goal statement.
[gsNF] :: GraphInfo -> NodeFamily

-- | Changes (both likely and unlikely).
[chgNF] :: GraphInfo -> NodeFamily

-- | Assumptions dependent on assumptions.
[edgesAvsA] :: GraphInfo -> [(UID, [UID])]

-- | Definitions, models, requirements, and changes dependent on
--   assumptions.
[edgesAvsAll] :: GraphInfo -> [(UID, [UID])]

-- | Definitions and models that are dependent on other definitions and
--   models.
[edgesRefvsRef] :: GraphInfo -> [(UID, [UID])]

-- | Goals and requirements dependent on definitions, models, and other
--   requirements.
[edgesAllvsR] :: GraphInfo -> [(UID, [UID])]

-- | Definitions, models, requirements, goals, and changes that are
--   dependent on one another.
[edgesAllvsAll] :: GraphInfo -> [(UID, [UID])]

-- | Creates the directory for output, gathers all individual graph output
--   functions and calls them.
outputDot :: FilePath -> GraphInfo -> IO ()

-- | Output function for assumptions dependent on assumptions.
mkOutputAvsA :: GraphInfo -> IO ()

-- | Output function for definitions, models, requirements, and changes
--   dependent on assumptions.
mkOutputAvsAll :: GraphInfo -> IO ()

-- | Output function for definitions and models that are dependent on other
--   definitions and models.
mkOutputRefvsRef :: GraphInfo -> IO ()

-- | Output function for goals and requirements dependent on definitions,
--   models, and other requirements.
mkOutputAllvsR :: GraphInfo -> IO ()

-- | Output function for definitions, models, requirements, goals, and
--   changes that are dependent on one another.
mkOutputAllvsAll :: GraphInfo -> IO ()

-- | General output function for making a traceability graph. Takes in the
--   graph information, title, edge generator functions, and node family
--   functions.
mkOutput :: GraphInfo -> String -> (GraphInfo -> [(UID, [UID])]) -> [GraphInfo -> NodeFamily] -> IO ()

-- | Graph output helper. Takes in the file handle, edges, and node
--   families.
outputSub :: Handle -> [(String, [String])] -> [NodeFamily] -> IO ()

-- | Prints graph edges (directions) onto a given file handle.
mkDirections :: Handle -> (String, [String]) -> IO ()

-- | Prints graph nodes (labels) onto a given file handle.
mkNodes :: Handle -> NodeFamily -> IO ()

-- | Helper that only makes a subgraph if there are elements in the
--   subgraph. Otherwise, it returns nothing.
mkSubgraph :: Handle -> Label -> [UID] -> IO ()

-- | Gets graph labels and removes any invalid characters.
filterAndGI :: GraphInfo -> [GraphInfo -> NodeFamily] -> [NodeFamily]

-- | Helper to remove invalid characters.
filterInvalidChars :: String -> String

module Language.Drasil.Format

-- | Possible formats for output.
data Format
TeX :: Format
Plain :: Format
HTML :: Format

module Language.Drasil.HTML.CSS

-- | Generates the CSS selectors necessary for a document.
makeCSS :: Document -> Doc

-- | Create the link to the necessary CSS file.
linkCSS :: String -> Doc

module Language.Drasil.HTML.Monad

-- | Printing "monad". Doesn't need context, so Identity (under another
--   name) will do just fine.
newtype PrintHTML
PH :: String -> PrintHTML
[unPH] :: PrintHTML -> String
instance Language.Drasil.Unicode.RenderSpecial Language.Drasil.HTML.Monad.PrintHTML

module Language.Drasil.Markdown.CreateMd

-- | Combines a list of sentences into a final Doc, also appends end note.
makeMd :: [Doc] -> Doc

-- | Example title and purpose section.
introInfo :: String -> [String] -> Doc

-- | Language version section.
verInfo :: String -> String -> Doc

-- | Invalid Operating Systems section, does not display unless atleast 1
--   invalid OS.
unsupOS :: Maybe String -> Doc

-- | External Libraries section. The inputs are a list of name and version
--   pairs and a list of the corresponding version numbers, these are first
--   combined into a list of triplets, and then each printed on a new line.
extLibSec :: [(String, String)] -> [String] -> Doc

-- | Constructs regular section section from header and message.
regularSec :: Doc -> Doc -> Doc

-- | Instruction section, contains 3 paragraphs, Running, Building and
--   Config Files. The Config file section is only displayed if there are
--   configuration files.
instDoc :: [String] -> Doc

-- | End section.
endNote :: [String] -> Doc

module Language.Drasil.Printing.AST

-- | Different types of links for referencing. May be internal, a citation,
--   or external. A citation may also hold additional reference
--   information.
data LinkType
Internal :: LinkType
Cite2 :: Spec -> LinkType
External :: LinkType

-- | Different operators.
data Ops
IsIn :: Ops
Integer :: Ops
Real :: Ops
Rational :: Ops
Natural :: Ops
Boolean :: Ops
Comma :: Ops
Prime :: Ops
Log :: Ops
Ln :: Ops
Sin :: Ops
Cos :: Ops
Tan :: Ops
Sec :: Ops
Csc :: Ops
Cot :: Ops
Arcsin :: Ops
Arccos :: Ops
Arctan :: Ops
Not :: Ops
Dim :: Ops
Exp :: Ops
Neg :: Ops
Cross :: Ops
Dot :: Ops
Eq :: Ops
NEq :: Ops
Lt :: Ops
Gt :: Ops
LEq :: Ops
GEq :: Ops
Impl :: Ops
Iff :: Ops
Subt :: Ops
And :: Ops
Or :: Ops
Add :: Ops
Mul :: Ops
Summ :: Ops
Inte :: Ops
Prod :: Ops
Point :: Ops
Perc :: Ops
LArrow :: Ops
RArrow :: Ops

-- | Holds the type of "text fencing" ("(), {}, |, ||").
data Fence
Paren :: Fence
Curly :: Fence
Norm :: Fence
Abs :: Fence

-- | The "^" symbol.
data OverSymb
Hat :: OverSymb

-- | Different font effects (<b>bold</b>, <i>emphasis</i>).
data Fonts
Bold :: Fonts
Emph :: Fonts

-- | Spacing is Thin.
data Spacing
Thin :: Spacing

-- | A Label is just a <a>Spec</a> (sentence).
type Label = Spec

-- | Redefine the <a>Expr</a> type from Language.Drasil to be more suitable
--   to printing.
data Expr
Dbl :: Double -> Expr
Int :: Integer -> Expr
Str :: String -> Expr

-- | Case expressions
Case :: [(Expr, Expr)] -> Expr

-- | Matrix.
Mtx :: [[Expr]] -> Expr
Row :: [Expr] -> Expr
Ident :: String -> Expr
Label :: String -> Expr

-- | Special characters.
Spec :: Special -> Expr

-- | Subscript.
Sub :: Expr -> Expr

-- | Superscript.
Sup :: Expr -> Expr
MO :: Ops -> Expr

-- | Holds an expression that needs a hat symbol "^"
Over :: OverSymb -> Expr -> Expr

-- | Holds an expression that is surrounded with a <a>Fence</a>.
Fenced :: Fence -> Fence -> Expr -> Expr

-- | Holds an expression with a font.
Font :: Fonts -> Expr -> Expr

-- | Fractions are a layout thing.
Div :: Expr -> Expr -> Expr

-- | Roots are also a layout thing. Just sqrt for now.
Sqrt :: Expr -> Expr

-- | Holds the <a>Spacing</a>.
Spc :: Spacing -> Expr

-- | Redefine the <tt>Sentence</tt> type from Language.Drasil to be more
--   suitable to printing.
data Spec

-- | Holds an expression.
E :: Expr -> Spec

-- | Holds a String.
S :: String -> Spec

-- | Concatenation.
(:+:) :: Spec -> Spec -> Spec

-- | Special characters.
Sp :: Special -> Spec

-- | Holds the actual reference of form <a>LinkType</a>, reference address,
--   and display name
Ref :: LinkType -> String -> Spec -> Spec

-- | Empty sentence.
EmptyS :: Spec

-- | Quotes are different in different languages.
Quote :: Spec -> Spec

-- | Newline. | A title is just a sentence (<a>Spec</a>).
HARDNL :: Spec
infixr 5 :+:
type Title = Spec

-- | Different types of lists that contain an <a>ItemType</a> and may
--   contain a label and a title. May be ordered, unordered, simple,
--   descriptive, or for definitions. More suitable to printing.
data ListType
Ordered :: [(ItemType, Maybe Label)] -> ListType
Unordered :: [(ItemType, Maybe Label)] -> ListType
Simple :: [(Title, ItemType, Maybe Label)] -> ListType
Desc :: [(Title, ItemType, Maybe Label)] -> ListType
Definitions :: [(Title, ItemType, Maybe Label)] -> ListType

-- | A list may contain an element or another list. More suitable to
--   printing.
data ItemType
Flat :: Spec -> ItemType
Nested :: Spec -> ListType -> ItemType

module Language.Drasil.HTML.Helpers

-- | HTML tag wrapper.
html :: Doc -> Doc

-- | Head tag wrapper.
headTag :: Doc -> Doc

-- | Body tag wrapper.
body :: Doc -> Doc

-- | Title tag wrapper.
title :: Doc -> Doc

-- | Paragraph tag wrapper.
paragraph :: Doc -> Doc

-- | Code tag wrapper.
code :: Doc -> Doc

-- | Table row tag wrapper.
tr :: Doc -> Doc

-- | Table header tag wrapper.
th :: Doc -> Doc

-- | Table cell tag wrapper.
td :: Doc -> Doc

-- | Figure tag wrapper.
figure :: Doc -> Doc

-- | Figcaption tag wrapper.
figcaption :: Doc -> Doc

-- | List tag wrapper.
li :: Doc -> Doc

-- | Paragraph in list tag wrapper.
pa :: Doc -> Doc

-- | Bring attention to element wrapper.
ba :: Doc -> Doc

-- | Ordered list tag wrapper.
ol :: [String] -> Doc -> Doc

-- | Unordered list tag wrapper.
ul :: [String] -> Doc -> Doc

-- | Table tag wrapper.
table :: [String] -> Doc -> Doc

-- | Image tag wrapper.
img :: [(String, Doc)] -> Doc

-- | Helper for HTML headers.
h :: Int -> Doc -> Doc

-- | HTML class or id selector.
data Variation
Class :: Variation
Id :: Variation

-- | General <a>Class</a> wrapper function and formats the document space
--   with <a>cat</a>.
wrap :: String -> [String] -> Doc -> Doc

-- | General wrapper function and formats the document space with
--   <a>hcat</a>.
wrap' :: String -> [String] -> Doc -> Doc

-- | Helper for wrapping HTML tags. The fourth argument provides class
--   names for the CSS.
wrapGen' :: ([Doc] -> Doc) -> Variation -> String -> Doc -> [String] -> Doc -> Doc

-- | General wrapper that formats the document space nicely.
wrapGen :: Variation -> String -> Doc -> [String] -> Doc -> Doc

-- | Helper for wrapping attributes in a tag.
--   
--   <ul>
--   <li>The first argument is tag name.</li>
--   <li>The <a>String</a> in the pair is the attribute name,</li>
--   <li>The <a>Doc</a> is the value for different attributes.</li>
--   </ul>
wrapInside :: String -> [(String, Doc)] -> Doc

-- | Helper for setting up captions.
caption :: Doc -> Doc

-- | Helper for wrapping divisions or sections.
refwrap :: Doc -> Doc -> Doc

-- | Helper for setting up links to references.
reflink :: String -> Doc -> Doc

-- | Helper for setting up links to references with additional information.
reflinkInfo :: String -> Doc -> Doc -> Doc

-- | Helper for setting up links to external URIs.
reflinkURI :: String -> Doc -> Doc

-- | Helper for setting up figures.
image :: Doc -> Doc -> MaxWidthPercent -> Doc

-- | Emphasis (italics) tag.
em :: Doc -> Doc

-- | Superscript tag.
sup :: Doc -> Doc

-- | Subscript tag.
sub :: Doc -> Doc

-- | Bold tag.
bold :: Doc -> Doc

-- | Title header.
articleTitle :: Doc -> Doc

-- | Author header.
author :: Doc -> Doc

-- | Div tag wrapper.
divTag :: [String] -> Doc -> Doc

-- | Span tag wrapper.
spanTag :: [String] -> Doc -> Doc

-- | Indent the Document by 2 positions.
indent :: Doc -> Doc

-- | Create and markup fractions fraction :: Doc -&gt; Doc -&gt; Doc
--   fraction a b = divTag ["fraction"] (spanTag ["fup"] a $$ spanTag
--   ["fdn"] b)
--   
--   Build case expressions.
makeCases :: [(Expr, Expr)] -> (Expr -> Doc) -> Doc

module Language.Drasil.Printing.Citation

-- | A collection of citations.
type BibRef = [Citation]

-- | A citation contains an entry id, the kind of citation, and the
--   appropriate citation fields.
data Citation
Cite :: EntryID -> CitationKind -> [CiteField] -> Citation

-- | Fields used in citations. More suitable to printing
data CiteField
Address :: Spec -> CiteField
Author :: People -> CiteField

-- | Used for <a>InCollection</a> references only.
BookTitle :: Spec -> CiteField
Chapter :: Int -> CiteField
Edition :: Int -> CiteField
Editor :: People -> CiteField
HowPublished :: HP -> CiteField
Institution :: Spec -> CiteField
Journal :: Spec -> CiteField
Month :: Month -> CiteField
Note :: Spec -> CiteField
Number :: Int -> CiteField
Organization :: Spec -> CiteField

-- | Range of pages (ex1. 1-32; ex2. 7,31,52-55)
Pages :: [Int] -> CiteField
Publisher :: Spec -> CiteField
School :: Spec -> CiteField
Series :: Spec -> CiteField
Title :: Spec -> CiteField

-- | BibTeX "type" field
Type :: Spec -> CiteField
Volume :: Int -> CiteField
Year :: Int -> CiteField

-- | How something is published. Necessary for URLs to work properly.
data HP
URL :: Spec -> HP
Verb :: Spec -> HP


-- | Helper functions for printing
module Language.Drasil.Printing.Helpers

-- | Single backslash.
--   
--   Basic text-rendering helper function.
bslash :: Doc

-- | Double backslash.
--   
--   Basic text-rendering helper function.
dbs :: Doc

-- | Variable assignment character ("=").
--   
--   Basic text-rendering helper function.
assign :: Doc

-- | Equality character ("==").
--   
--   Basic text-rendering helper function.
eq :: Doc

-- | Less than.
--   
--   Basic text-rendering helper function.
lt :: Doc

-- | Greater than.
--   
--   Basic text-rendering helper function.
gt :: Doc

-- | Less than or equal to.
--   
--   Basic text-rendering helper function.
leq :: Doc

-- | Greater than or equal to.
--   
--   Basic text-rendering helper function.
geq :: Doc

-- | Dollar sign.
--   
--   Basic text-rendering helper function.
dlr :: Doc

-- | Asterisk.
--   
--   Basic text-rendering helper function.
ast :: Doc

-- | Plus.
--   
--   Basic text-rendering helper function.
pls :: Doc

-- | Hat symbol ("^").
--   
--   Basic text-rendering helper function.
hat :: Doc

-- | Forward slash.
--   
--   Basic text-rendering helper function.
slash :: Doc

-- | Hyphen.
--   
--   Basic text-rendering helper function.
hyph :: Doc

-- | Tab.
--   
--   Basic text-rendering helper function.
tab :: Doc

-- | Underscore.
--   
--   Basic text-rendering helper function.
unders :: Doc

-- | Square brackets.
--   
--   Text-rendering helper for wrapping strings with brackets/braces.
sq :: String -> Doc

-- | Curly braces.
--   
--   Text-rendering helper for wrapping strings with brackets/braces.
br :: String -> Doc

-- | Dot symbol (".")
--   
--   Text-rendering helper for appending a period/decimal point (dot
--   symbol) or a comma.
dot :: Doc -> Doc

-- | Comma (",")
--   
--   Text-rendering helper for appending a period/decimal point (dot
--   symbol) or a comma.
comm :: Doc -> Doc

-- | For wrapping $ on both sides of a <a>Doc</a>.
dollarDoc :: Doc -> Doc

-- | Wraps in parenthesis.
--   
--   Basic plaintext (String) wrapping.
paren :: String -> String

-- | Wraps in curly braces.
--   
--   Basic plaintext (String) wrapping.
brace :: String -> String

-- | Wraps in dollar signs.
--   
--   Basic plaintext (String) wrapping.
dollar :: String -> String

-- | Wraps in square brackets.
--   
--   Basic plaintext (String) wrapping.
sqbrac :: String -> String

-- | Wraps in angular brackets ("&lt;&gt;").
--   
--   Basic plaintext (String) wrapping.
angbrac :: String -> String

-- | Capitalize first letter of string.
--   
--   Format strings and convert to Doc.
upcase :: String -> Doc

-- | Make first letter lowercase.
--   
--   Format strings and convert to Doc.
lowcase :: String -> Doc

-- | Appends a suffix for a number. Used only on single digit <a>Int</a>s.
sufx :: Int -> String

-- | Similar to <a>sufx</a> but used on any sized <a>Int</a>.
sufxer :: Int -> String

module Language.Drasil.Printing.Import.Helpers

-- | Helper for inserting parentheses.
parens :: Expr -> Expr

-- | Processes the digits from the <tt>floatToDigits</tt> function, decimal
--   point position, a counter, and exponent.
digitsProcess :: [Integer] -> Int -> Int -> Integer -> [Expr]

-- | Takes the exponent and the <a>Int</a> of the base and gives the
--   decimal point position and processed exponent. This function supports
--   transferring scientific notation to engineering notation. References
--   for standard of Engineering Notation:
--   
--   
--   <a>https://www.khanacademy.org/science/electrical-engineering/introduction-to-ee/</a>
--   intro-to-ee<i>a</i>ee-numbers-in-electrical-engineering
--   
--   
--   <a>https://www.calculatorsoup.com/calculators/math/scientific-notation-converter.php</a>
--   
--   <a>https://en.wikipedia.org/wiki/Scientific_notation</a>
processExpo :: Int -> (Int, Int)

-- | Given the stage of the symbol, looks up a character/symbol inside a
--   chunk database that matches the given <a>UID</a>.
lookupC :: Stage -> ChunkDB -> UID -> Symbol

-- | Look up a term given a chunk database and a <a>UID</a> associated with
--   the term. Also specifies capitalization
lookupT :: ChunkDB -> UID -> TermCapitalization -> Sentence

-- | Look up the acronym/abbreviation of a term. Otherwise returns the
--   singular form of a term. Takes a chunk database and a <a>UID</a>
--   associated with the term.
lookupS :: ChunkDB -> UID -> TermCapitalization -> Sentence

-- | Look up the plural form of a term given a chunk database and a
--   <a>UID</a> associated with the term.
lookupP :: ChunkDB -> UID -> TermCapitalization -> Sentence

-- | Helper to get the proper function for capitalizing a <a>NP</a> based
--   on its <a>TermCapitalization</a>. Singular case.
resolveCapT :: TermCapitalization -> NP -> Sentence

-- | Helper to get the right function for capitalizing a <a>NP</a> based on
--   its <a>TermCapitalization</a>. Plural case.
resolveCapP :: TermCapitalization -> NP -> Sentence

-- | Helper to get the capital case of an abbreviation based on
--   <a>TermCapitalization</a>. For sentence and title cases.
capHelper :: TermCapitalization -> String -> Maybe String

module Language.Drasil.Printing.Import.Symbol

-- | Converts a symbol into an expression.
symbol :: Symbol -> Expr

-- | Renders a unit symbol as a printable expression.
pUnit :: USymb -> Expr

module Language.Drasil.Printing.LayoutObj

-- | A document must contain a title, author, and contents (as
--   <a>LayoutObj</a>s).
data Document
Document :: Title -> Author -> [LayoutObj] -> Document

-- | An author is just a sentence (<a>Spec</a>).
type Author = Spec

-- | Contents are just a sentence (<a>Spec</a>).
type Contents = Spec

-- | A group of layout objects.
type Items = [LayoutObj]

-- | Tags.
type Tags = [String]

-- | Depth of a header.
type Depth = Int

-- | Horizontal dimension of a graph.
type Width = Float

-- | Vertical dimension of a graph.
type Height = Float

-- | Holds a file path.
type Filepath = String

-- | A caption is just a sentence (<a>Spec</a>).
type Caption = Spec
data LayoutObj

-- | Holds all information needed for a table.
Table :: Tags -> [[Spec]] -> Label -> Bool -> Caption -> LayoutObj

-- | Holds all information needed for a header.
Header :: Depth -> Title -> Label -> LayoutObj

-- | Paragraph.
Paragraph :: Contents -> LayoutObj

-- | Equation block.
EqnBlock :: Contents -> LayoutObj

-- | Definition. Holds the type, contents, and a label.
Definition :: DType -> [(String, [LayoutObj])] -> Label -> LayoutObj

-- | List.
List :: ListType -> LayoutObj

-- | Holds all information needed for a figure.
Figure :: Label -> Caption -> Filepath -> MaxWidthPercent -> LayoutObj

-- | Holds all information needed for a graph.
Graph :: [(Spec, Spec)] -> Maybe Width -> Maybe Height -> Caption -> Label -> LayoutObj

-- | Holds tags, more contents, and a label. this shouldn't be here, it
--   should have been expanded.
HDiv :: Tags -> [LayoutObj] -> Label -> LayoutObj

-- | Bibliography section.
Bib :: BibRef -> LayoutObj

module Language.Drasil.Printing.PrintingInformation

-- | Notation can be scientific or for engineering.
data Notation
Scientific :: Notation
Engineering :: Notation

-- | Able to be printed.
class HasPrintingOptions c

-- | Holds the printing notation.
getSetting :: HasPrintingOptions c => Lens' c Notation

-- | Holds the printing configuration.
newtype PrintingConfiguration
PC :: Notation -> PrintingConfiguration
[_notation] :: PrintingConfiguration -> Notation
notation :: Iso' PrintingConfiguration Notation

-- | Printing information contains a database, a stage, and a printing
--   configuration.
data PrintingInformation
PI :: ChunkDB -> Stage -> PrintingConfiguration -> PrintingInformation
[_ckdb] :: PrintingInformation -> ChunkDB
[_stg] :: PrintingInformation -> Stage
[_configuration] :: PrintingInformation -> PrintingConfiguration
stg :: Lens' PrintingInformation Stage
configuration :: Lens' PrintingInformation PrintingConfiguration
ckdb :: Lens' PrintingInformation ChunkDB

-- | Builds a document's printing information based on the system
--   information.
piSys :: SystemInformation -> Stage -> PrintingConfiguration -> PrintingInformation

-- | Default configuration is for engineering.
defaultConfiguration :: PrintingConfiguration
instance Language.Drasil.Printing.PrintingInformation.HasPrintingOptions Language.Drasil.Printing.PrintingInformation.PrintingInformation
instance Language.Drasil.Printing.PrintingInformation.HasPrintingOptions Language.Drasil.Printing.PrintingInformation.PrintingConfiguration

module Language.Drasil.Printing.Import.Expr

-- | Translate Exprs to printable layout AST.
expr :: Expr -> PrintingInformation -> Expr

module Language.Drasil.Printing.Import.Space

-- | Render a <a>Space</a>.
space :: PrintingInformation -> Space -> Expr

module Language.Drasil.Printing.Import.DisplayExpr

-- | Translate DisplayExprs to printable layout AST.
dispExpr :: DisplayExpr -> PrintingInformation -> Expr

module Language.Drasil.Printing.Import.Sentence

-- | Translates <a>Sentence</a> to the printable representation of a
--   <a>Sentence</a> (<tt>Spec</tt>).
spec :: PrintingInformation -> Sentence -> Spec

-- | Renders the shortname of a reference/domain.
renderShortName :: ChunkDB -> IRefProg -> ShortName -> Sentence

-- | Render a uniform resource locator as a <a>Sentence</a>.
renderURI :: ctx -> ShortName -> Sentence

-- | Renders citation information.
renderCitInfo :: RefInfo -> Sentence

module Language.Drasil.Printing.Import.Document

-- | Translates from <a>Document</a> to a printable representation of
--   <a>Document</a>.
makeDocument :: PrintingInformation -> Document -> Document

-- | Helper for translating sections into a printable representation of
--   layout objects (<a>LayoutObj</a>).
layout :: PrintingInformation -> Int -> SecCons -> LayoutObj

-- | Helper function for creating sections as layout objects.
createLayout :: PrintingInformation -> [Section] -> [LayoutObj]

-- | Helper function for creating sections at the appropriate depth.
sec :: PrintingInformation -> Int -> Section -> LayoutObj

-- | Helper that translates <a>Contents</a> to a printable representation
--   of <a>LayoutObj</a>. Called internally by <a>layout</a>.
lay :: PrintingInformation -> Contents -> LayoutObj

-- | Helper that translates <a>LabelledContent</a>s to a printable
--   representation of <a>LayoutObj</a>. Called internally by <a>lay</a>.
layLabelled :: PrintingInformation -> LabelledContent -> LayoutObj

-- | Helper that translates <a>RawContent</a>s to a printable
--   representation of <a>LayoutObj</a>. Called internally by <a>lay</a>.
layUnlabelled :: PrintingInformation -> RawContent -> LayoutObj

-- | For importing a bibliography.
layCite :: Citation -> Citation

-- | Helper for translating <tt>Citefield</tt>s into a printable
--   representation of <a>CiteField</a>s
layField :: CiteField -> CiteField

-- | Translates lists to be printable.
makeL :: PrintingInformation -> ListType -> ListType

-- | Helper for translating list items to be printable.
item :: PrintingInformation -> ItemType -> ItemType

module Language.Drasil.Printing.Import.CodeExpr

-- | Translate Exprs to printable layout AST.
codeExpr :: CodeExpr -> PrintingInformation -> Expr

module Language.Drasil.Printing.Import

-- | Translate Exprs to printable layout AST.
expr :: Expr -> PrintingInformation -> Expr

-- | Translate Exprs to printable layout AST.
codeExpr :: CodeExpr -> PrintingInformation -> Expr

-- | Translate DisplayExprs to printable layout AST.
dispExpr :: DisplayExpr -> PrintingInformation -> Expr

-- | Render a <a>Space</a>.
space :: PrintingInformation -> Space -> Expr

-- | Translates <a>Sentence</a> to the printable representation of a
--   <a>Sentence</a> (<tt>Spec</tt>).
spec :: PrintingInformation -> Sentence -> Spec

-- | Converts a symbol into an expression.
symbol :: Symbol -> Expr

-- | Translates from <a>Document</a> to a printable representation of
--   <a>Document</a>.
makeDocument :: PrintingInformation -> Document -> Document

module Language.Drasil.Plain.Print

-- | Data is either linear or not.
data Linearity
Linear :: Linearity
Nonlinear :: Linearity

-- | Create expressions for a document in <a>Doc</a> format.
exprDoc :: ChunkDB -> Stage -> Linearity -> Expr -> Doc

-- | Create code expressions for a document in <a>Doc</a> format.
codeExprDoc :: ChunkDB -> Stage -> Linearity -> CodeExpr -> Doc

-- | Create sentences for a document in <a>Doc</a> format.
sentenceDoc :: ChunkDB -> Stage -> Linearity -> Sentence -> Doc

-- | Create symbols for a document in <a>Doc</a> format.
symbolDoc :: Symbol -> Doc

-- | Helper for printing units in <a>Doc</a> format.
unitDoc :: Linearity -> USymb -> Doc


-- | Printing Monad. Starts with a specific data type (reader monad) and
--   extends from there.
module Language.Drasil.TeX.Monad

-- | There are two proper contexts, Text and Math; Curr is the current
--   context. There are multiple ways of getting there: for Text, either
--   being at the top-level or inside text. For Math, either surrounded by
--   $ or in begin{equation} .. end{equation}. Curr is when the current
--   context is fine.
data MathContext
Text :: MathContext
Math :: MathContext
Curr :: MathContext

-- | A monad for printing in LaTeX.
newtype PrintLaTeX a
PL :: (MathContext -> a) -> PrintLaTeX a
[runPrint] :: PrintLaTeX a -> MathContext -> a

-- | Convenient abbreviation.
type D = PrintLaTeX Doc

-- | MonadReader calls this <tt>local</tt>. Can switch contexts (including
--   no-switch cases). Adjust printing as necessary.
switch :: (MathContext -> MathContext) -> D -> D

-- | Change context to Math.
toMath :: D -> D

-- | Change context to Text.
toText :: D -> D

-- | MonadReader calls this <tt>ask</tt>.
getCtx :: PrintLaTeX MathContext

-- | Since Text.PrettyPrint steals &lt;&gt;, use %% instead for mappend.
(%%) :: D -> D -> D

-- | Lifts Text.PrettyPrint's $+$. Above, with no overlapping. Associative.
($+$) :: D -> D -> D

-- | Concatenates a list of <a>D</a> using a function from [<a>Doc</a>]
--   -&gt; <a>Doc</a>.
tpRunPrint :: ([Doc] -> Doc) -> [D] -> D

-- | List version of <a>$$</a>. Above, except that if the last line of the
--   first argument stops at least one position before the first line of
--   the second begins, these two lines are overlapped.
vcat :: [D] -> D
vpunctuate :: Doc -> [D] -> D
hpunctuate :: Doc -> [D] -> D

-- | MathContext operations.
lub :: MathContext -> MathContext -> MathContext

-- | Latex type. Holds <a>String</a>s.
newtype Latex
L :: String -> Latex
[unPL] :: Latex -> String
instance GHC.Classes.Eq Language.Drasil.TeX.Monad.MathContext
instance Language.Drasil.Unicode.RenderSpecial Language.Drasil.TeX.Monad.Latex
instance GHC.Base.Functor Language.Drasil.TeX.Monad.PrintLaTeX
instance GHC.Base.Applicative Language.Drasil.TeX.Monad.PrintLaTeX
instance GHC.Base.Monad Language.Drasil.TeX.Monad.PrintLaTeX
instance GHC.Base.Semigroup (Language.Drasil.TeX.Monad.PrintLaTeX Text.PrettyPrint.HughesPJ.Doc)
instance GHC.Base.Monoid (Language.Drasil.TeX.Monad.PrintLaTeX Text.PrettyPrint.HughesPJ.Doc)

module Language.Drasil.TeX.Helpers

-- | Curly braces.
--   
--   Helper for adding fencing symbols.
br :: D -> D

-- | Square brackets.
--   
--   Helper for adding fencing symbols.
sq :: D -> D

-- | Parenthesis.
--   
--   Helper for adding fencing symbols.
parens :: D -> D

-- | Quotes.
--   
--   Helper for adding fencing symbols.
quote :: D -> D

-- | 0-argument command.
command0 :: String -> D

-- | Make 1-argument command.
command :: String -> String -> D

-- | Similar to <a>command</a>, but uses <a>br</a> for braces.
commandD :: String -> D -> D

-- | 1-argument command, with optional argument.
command1o :: String -> Maybe String -> String -> D

-- | Similar to <a>command1o</a>, but uses <a>sq</a> and <a>br</a> for
--   brackets.
command1oD :: String -> Maybe D -> D -> D

-- | 1-argument command with parameter in square brackets.
command1p :: String -> String -> String -> D

-- | Similar to <a>command1p</a>, but uses <a>sq</a> and <a>br</a> for
--   brackets.
command1pD :: String -> D -> D -> D

-- | Make LaTeX symbol.
texSym :: String -> D

-- | 2-argument command.
command2 :: String -> String -> String -> D

-- | Similar to <a>command2</a>, but uses <a>br</a> for brackets.
command2D :: String -> D -> D -> D

-- | 3-argument command.
command3 :: String -> String -> String -> String -> D

-- | Encapsulate environments.
mkEnv :: String -> D -> D

-- | Encapsulate environments with argument with braces.
mkEnvArgBr :: String -> String -> D -> D

-- | Encapsulate environments with argument with brackets.
mkEnvArgSq :: String -> String -> D -> D

-- | Makes minipage environment.
mkMinipage :: D -> D

-- | For defining (LaTeX) macros.
comm :: String -> String -> Maybe String -> D

-- | Renews given command.
renewcomm :: String -> String -> D

-- | Useful to have an empty case.
empty :: D

-- | For sections.
genSec :: Int -> D

-- | For references.
ref :: String -> D -> D

-- | For references.
sref :: String -> D -> D

-- | For references.
hyperref :: String -> D -> D

-- | For references.
externalref :: String -> D -> D

-- | For references.
snref :: String -> D -> D

-- | For references.
href :: String -> String -> D

-- | For citations.
cite :: String -> Maybe D -> D

-- | Newcounter command.
count :: String -> D

-- | Mathbb command.
mathbb :: String -> D

-- | Usepackage command.
usepackage :: String -> D

-- | Include graphics with a given max width percentage.
includegraphics :: MaxWidthPercent -> String -> D

-- | Preamble for a LaTeX document.
author :: D -> D

-- | Preamble for a LaTeX document.
caption :: D -> D

-- | Preamble for a LaTeX document.
item :: D -> D

-- | Preamble for a LaTeX document.
label :: D -> D

-- | Preamble for a LaTeX document.
title :: D -> D

-- | Preamble for a LaTeX document.
bold :: D -> D

-- | Command for "item".
item' :: D -> D -> D

-- | Formatting options for a LaTeX document.
maketitle :: D

-- | Formatting options for a LaTeX document.
maketoc :: D

-- | Formatting options for a LaTeX document.
newpage :: D

-- | Formatting options for a LaTeX document.
centering :: D

-- | Common commands and formatting options for a LaTeX document.
code :: D -> D

-- | Common commands and formatting options for a LaTeX document.
itemize :: D -> D

-- | Common commands and formatting options for a LaTeX document.
enumerate :: D -> D

-- | Common commands and formatting options for a LaTeX document.
description :: D -> D

-- | Common commands and formatting options for a LaTeX document.
figure :: D -> D

-- | Common commands and formatting options for a LaTeX document.
center :: D -> D

-- | Common commands and formatting options for a LaTeX document.
document :: D -> D

-- | Common commands and formatting options for a LaTeX document.
equation :: D -> D

-- | Common commands and formatting options for a LaTeX document.
symbDescription :: D -> D

-- | Command for the document class.
docclass :: String -> String -> D

-- | General section function.
sec :: Int -> D -> D

-- | Makes second argument a subscript of the first argument.
subscript :: D -> D -> D

-- | Makes second argument a superscript of the first argument.
superscript :: D -> D -> D

-- | Macro/Command definitions.
bullet :: D

-- | Macro/Command definitions.
counter :: D

-- | Macro/Command definitions.
ddefnum :: D

-- | Macro/Command definitions.
ddref :: D

-- | Macro/Command definitions.
colAw :: D

-- | Macro/Command definitions.
colBw :: D

-- | Macro/Command definitions.
arrayS :: D

-- | Macro/Command definitions.
modcounter :: D

-- | Macro/Command definitions.
modnum :: D

-- | Add newline.
newline :: D -> D

-- | Create a fraction.
fraction :: D -> D -> D

-- | Configuration settings.
hyperConfig :: D

-- | Uses luatex85 tex packages.
useTikz :: D

-- | toEqn is special; it switches to <a>Math</a>, but inserts an equation
--   environment.
toEqn :: D -> D

-- | Wrap with parenthesis.
--   
--   Helper(s) for String-Printing in TeX where it varies from
--   HTML/Plaintext.
paren :: String -> String

-- | Wrap with square brackets.
--   
--   Helper(s) for String-Printing in TeX where it varies from
--   HTML/Plaintext.
sqbrac :: String -> String

module Language.Drasil.TeX.Preamble

-- | Generates LaTeX document preamble.
genPreamble :: [LayoutObj] -> D
instance GHC.Classes.Eq Language.Drasil.TeX.Preamble.Def
instance GHC.Classes.Eq Language.Drasil.TeX.Preamble.Package

module Language.Drasil.TeX.Print

-- | Generates a LaTeX document.
genTeX :: Document -> PrintingInformation -> Doc

-- | Print an expression to a document.
pExpr :: Expr -> D

-- | Prints units.
pUnit :: USymb -> D

-- | Prints all <a>Spec</a>s.
spec :: Spec -> D

module Language.Drasil.HTML.Print

-- | Generate an HTML document from a Drasil <a>Document</a>.
genHTML :: PrintingInformation -> String -> Document -> Doc

module Language.Drasil.Printers

-- | Possible formats for output.
data Format
TeX :: Format
HTML :: Format

-- | Creates the directory for output, gathers all individual graph output
--   functions and calls them.
outputDot :: FilePath -> GraphInfo -> IO ()

-- | Holds all important and relevant information for generating a
--   traceability graph. Includes nodes, graph edges, and node family
--   information.
data GraphInfo
GI :: NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> [(UID, [UID])] -> [(UID, [UID])] -> [(UID, [UID])] -> [(UID, [UID])] -> [(UID, [UID])] -> GraphInfo

-- | Assumptions.
[assumpNF] :: GraphInfo -> NodeFamily

-- | Data definitions.
[ddNF] :: GraphInfo -> NodeFamily

-- | General definitions.
[gdNF] :: GraphInfo -> NodeFamily

-- | Theory models.
[tmNF] :: GraphInfo -> NodeFamily

-- | Instance models.
[imNF] :: GraphInfo -> NodeFamily

-- | Requirements (both functional and non-functional).
[reqNF] :: GraphInfo -> NodeFamily

-- | Goal statement.
[gsNF] :: GraphInfo -> NodeFamily

-- | Changes (both likely and unlikely).
[chgNF] :: GraphInfo -> NodeFamily

-- | Assumptions dependent on assumptions.
[edgesAvsA] :: GraphInfo -> [(UID, [UID])]

-- | Definitions, models, requirements, and changes dependent on
--   assumptions.
[edgesAvsAll] :: GraphInfo -> [(UID, [UID])]

-- | Definitions and models that are dependent on other definitions and
--   models.
[edgesRefvsRef] :: GraphInfo -> [(UID, [UID])]

-- | Goals and requirements dependent on definitions, models, and other
--   requirements.
[edgesAllvsR] :: GraphInfo -> [(UID, [UID])]

-- | Definitions, models, requirements, goals, and changes that are
--   dependent on one another.
[edgesAllvsAll] :: GraphInfo -> [(UID, [UID])]

-- | A node family contains a list of <a>UID</a>s, their display labels,
--   general subgraph label, and colour.
data NodeFamily
NF :: [UID] -> [Label] -> Label -> Colour -> NodeFamily

-- | Node <a>UID</a>s.
[nodeUIDs] :: NodeFamily -> [UID]

-- | Display labels for nodes. We use the reference addresses from the
--   <a>UID</a>s.
[nodeLabels] :: NodeFamily -> [Label]

-- | Individual subgraph labels. These labels do not show on the final
--   generated pdf or png files.
[nfLabel] :: NodeFamily -> Label

-- | Gives the ability to change colours of bubbles within the graph.
[nfColour] :: NodeFamily -> Colour

-- | Generates the CSS selectors necessary for a document.
makeCSS :: Document -> Doc

-- | Generate an HTML document from a Drasil <a>Document</a>.
genHTML :: PrintingInformation -> String -> Document -> Doc

-- | Combines a list of sentences into a final Doc, also appends end note.
makeMd :: [Doc] -> Doc

-- | Example title and purpose section.
introInfo :: String -> [String] -> Doc

-- | Language version section.
verInfo :: String -> String -> Doc

-- | Invalid Operating Systems section, does not display unless atleast 1
--   invalid OS.
unsupOS :: Maybe String -> Doc

-- | Constructs regular section section from header and message.
regularSec :: Doc -> Doc -> Doc

-- | Instruction section, contains 3 paragraphs, Running, Building and
--   Config Files. The Config file section is only displayed if there are
--   configuration files.
instDoc :: [String] -> Doc

-- | External Libraries section. The inputs are a list of name and version
--   pairs and a list of the corresponding version numbers, these are first
--   combined into a list of triplets, and then each printed on a new line.
extLibSec :: [(String, String)] -> [String] -> Doc

-- | End section.
endNote :: [String] -> Doc

-- | Data is either linear or not.
data Linearity
Linear :: Linearity
Nonlinear :: Linearity

-- | Create sentences for a document in <a>Doc</a> format.
sentenceDoc :: ChunkDB -> Stage -> Linearity -> Sentence -> Doc

-- | Create expressions for a document in <a>Doc</a> format.
exprDoc :: ChunkDB -> Stage -> Linearity -> Expr -> Doc

-- | Create code expressions for a document in <a>Doc</a> format.
codeExprDoc :: ChunkDB -> Stage -> Linearity -> CodeExpr -> Doc

-- | Create symbols for a document in <a>Doc</a> format.
symbolDoc :: Symbol -> Doc

-- | Helper for printing units in <a>Doc</a> format.
unitDoc :: Linearity -> USymb -> Doc

-- | Generates a LaTeX document.
genTeX :: Document -> PrintingInformation -> Doc

-- | Printing information contains a database, a stage, and a printing
--   configuration.
data PrintingInformation
PI :: ChunkDB -> Stage -> PrintingConfiguration -> PrintingInformation
[_ckdb] :: PrintingInformation -> ChunkDB
[_stg] :: PrintingInformation -> Stage
[_configuration] :: PrintingInformation -> PrintingConfiguration

-- | Builds a document's printing information based on the system
--   information.
piSys :: SystemInformation -> Stage -> PrintingConfiguration -> PrintingInformation

-- | Able to be printed.
class HasPrintingOptions c

-- | Holds the printing notation.
getSetting :: HasPrintingOptions c => Lens' c Notation

-- | Notation can be scientific or for engineering.
data Notation
Scientific :: Notation
Engineering :: Notation

-- | Default configuration is for engineering.
defaultConfiguration :: PrintingConfiguration
